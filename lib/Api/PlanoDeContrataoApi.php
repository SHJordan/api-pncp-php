<?php
/**
 * PlanoDeContrataoApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API PNCP
 *
 * API REST de serviços do Portal Nacional de Contratações Públicas (PNCP)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: css.serpro@serpro.gov.br
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * PlanoDeContrataoApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PlanoDeContrataoApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'consultarPlanoComItens' => [
            'application/json',
        ],
        'consultarPlanoConsolidado' => [
            'application/json',
        ],
        'incluirPlano' => [
            'application/json',
        ],
        'incluirPlanoContratacaoItem' => [
            'application/json',
        ],
        'recuperarDadosOrgaoPca' => [
            'application/json',
        ],
        'recuperarDadosOrgaoPcaQuantidade' => [
            'application/json',
        ],
        'recuperarDadosOrgaoPcaUnidades' => [
            'application/json',
        ],
        'recuperarDadosPcaItensCategoria' => [
            'application/json',
        ],
        'recuperarDadosPcaItensQuantidadeItens' => [
            'application/json',
        ],
        'recuperarItensPlanoPorContratacao' => [
            'application/json',
        ],
        'recuperarSequenciaisDoPlano' => [
            'application/json',
        ],
        'recuperarValoresCategoriaItem' => [
            'application/json',
        ],
        'recuperarValoresCategoriaItem1' => [
            'application/json',
        ],
        'removerItemPlano' => [
            'application/json',
        ],
        'removerItensPlano' => [
            'application/json',
        ],
        'removerItensPlanoPorContratacao' => [
            'application/json',
        ],
        'removerPlano' => [
            'application/json',
        ],
        'retificarParcialmentePlanoContratacaoItem' => [
            'application/json',
        ],
        'retificarParcialmentePlanoContratacaoItens' => [
            'application/json',
        ],
        'retornarPlanosTodasUnidadesDoOrgaoCsv' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation consultarPlanoComItens
     *
     * Consultar Plano de Contratação com Itens
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarPlanoComItens'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\PlanoContratacaoComItensDTO
     */
    public function consultarPlanoComItens($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarPlanoComItens'][0])
    {
        list($response) = $this->consultarPlanoComItensWithHttpInfo($cnpj, $ano, $sequencial, $contentType);
        return $response;
    }

    /**
     * Operation consultarPlanoComItensWithHttpInfo
     *
     * Consultar Plano de Contratação com Itens
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarPlanoComItens'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\PlanoContratacaoComItensDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarPlanoComItensWithHttpInfo($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarPlanoComItens'][0])
    {
        $request = $this->consultarPlanoComItensRequest($cnpj, $ano, $sequencial, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\PlanoContratacaoComItensDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PlanoContratacaoComItensDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PlanoContratacaoComItensDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PlanoContratacaoComItensDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PlanoContratacaoComItensDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarPlanoComItensAsync
     *
     * Consultar Plano de Contratação com Itens
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarPlanoComItens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarPlanoComItensAsync($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarPlanoComItens'][0])
    {
        return $this->consultarPlanoComItensAsyncWithHttpInfo($cnpj, $ano, $sequencial, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarPlanoComItensAsyncWithHttpInfo
     *
     * Consultar Plano de Contratação com Itens
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarPlanoComItens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarPlanoComItensAsyncWithHttpInfo($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarPlanoComItens'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PlanoContratacaoComItensDTO';
        $request = $this->consultarPlanoComItensRequest($cnpj, $ano, $sequencial, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarPlanoComItens'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarPlanoComItens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarPlanoComItensRequest($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarPlanoComItens'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling consultarPlanoComItens'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling consultarPlanoComItens'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling consultarPlanoComItens'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling PlanoDeContrataoApi.consultarPlanoComItens, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v1/orgaos/{cnpj}/pca/{ano}/{sequencial}/itens/plano';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarPlanoConsolidado
     *
     * Consultar Plano de Contratação Consolidado
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarPlanoConsolidado'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\PlanoSequencialConsolidadoDTO
     */
    public function consultarPlanoConsolidado($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarPlanoConsolidado'][0])
    {
        list($response) = $this->consultarPlanoConsolidadoWithHttpInfo($cnpj, $ano, $sequencial, $contentType);
        return $response;
    }

    /**
     * Operation consultarPlanoConsolidadoWithHttpInfo
     *
     * Consultar Plano de Contratação Consolidado
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarPlanoConsolidado'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\PlanoSequencialConsolidadoDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarPlanoConsolidadoWithHttpInfo($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarPlanoConsolidado'][0])
    {
        $request = $this->consultarPlanoConsolidadoRequest($cnpj, $ano, $sequencial, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\PlanoSequencialConsolidadoDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PlanoSequencialConsolidadoDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PlanoSequencialConsolidadoDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PlanoSequencialConsolidadoDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PlanoSequencialConsolidadoDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarPlanoConsolidadoAsync
     *
     * Consultar Plano de Contratação Consolidado
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarPlanoConsolidado'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarPlanoConsolidadoAsync($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarPlanoConsolidado'][0])
    {
        return $this->consultarPlanoConsolidadoAsyncWithHttpInfo($cnpj, $ano, $sequencial, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarPlanoConsolidadoAsyncWithHttpInfo
     *
     * Consultar Plano de Contratação Consolidado
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarPlanoConsolidado'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarPlanoConsolidadoAsyncWithHttpInfo($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarPlanoConsolidado'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PlanoSequencialConsolidadoDTO';
        $request = $this->consultarPlanoConsolidadoRequest($cnpj, $ano, $sequencial, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarPlanoConsolidado'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarPlanoConsolidado'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarPlanoConsolidadoRequest($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarPlanoConsolidado'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling consultarPlanoConsolidado'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling consultarPlanoConsolidado'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling consultarPlanoConsolidado'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling PlanoDeContrataoApi.consultarPlanoConsolidado, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v1/orgaos/{cnpj}/pca/{ano}/{sequencial}/consolidado';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation incluirPlano
     *
     * Inserir Plano de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  \OpenAPI\Client\Model\IncluirPlanoContratacaoDTO $incluir_plano_contratacao_dto incluir_plano_contratacao_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirPlano'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object
     */
    public function incluirPlano($cnpj, $incluir_plano_contratacao_dto, string $contentType = self::contentTypes['incluirPlano'][0])
    {
        list($response) = $this->incluirPlanoWithHttpInfo($cnpj, $incluir_plano_contratacao_dto, $contentType);
        return $response;
    }

    /**
     * Operation incluirPlanoWithHttpInfo
     *
     * Inserir Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  \OpenAPI\Client\Model\IncluirPlanoContratacaoDTO $incluir_plano_contratacao_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirPlano'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function incluirPlanoWithHttpInfo($cnpj, $incluir_plano_contratacao_dto, string $contentType = self::contentTypes['incluirPlano'][0])
    {
        $request = $this->incluirPlanoRequest($cnpj, $incluir_plano_contratacao_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation incluirPlanoAsync
     *
     * Inserir Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  \OpenAPI\Client\Model\IncluirPlanoContratacaoDTO $incluir_plano_contratacao_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirPlano'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incluirPlanoAsync($cnpj, $incluir_plano_contratacao_dto, string $contentType = self::contentTypes['incluirPlano'][0])
    {
        return $this->incluirPlanoAsyncWithHttpInfo($cnpj, $incluir_plano_contratacao_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation incluirPlanoAsyncWithHttpInfo
     *
     * Inserir Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  \OpenAPI\Client\Model\IncluirPlanoContratacaoDTO $incluir_plano_contratacao_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirPlano'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incluirPlanoAsyncWithHttpInfo($cnpj, $incluir_plano_contratacao_dto, string $contentType = self::contentTypes['incluirPlano'][0])
    {
        $returnType = 'object';
        $request = $this->incluirPlanoRequest($cnpj, $incluir_plano_contratacao_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'incluirPlano'
     *
     * @param  string $cnpj (required)
     * @param  \OpenAPI\Client\Model\IncluirPlanoContratacaoDTO $incluir_plano_contratacao_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirPlano'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function incluirPlanoRequest($cnpj, $incluir_plano_contratacao_dto, string $contentType = self::contentTypes['incluirPlano'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling incluirPlano'
            );
        }

        // verify the required parameter 'incluir_plano_contratacao_dto' is set
        if ($incluir_plano_contratacao_dto === null || (is_array($incluir_plano_contratacao_dto) && count($incluir_plano_contratacao_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $incluir_plano_contratacao_dto when calling incluirPlano'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/pca';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($incluir_plano_contratacao_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($incluir_plano_contratacao_dto));
            } else {
                $httpBody = $incluir_plano_contratacao_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation incluirPlanoContratacaoItem
     *
     * Inserir itens de Plano de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  \OpenAPI\Client\Model\IncluirPlanoContratacaoItemDTO[] $incluir_plano_contratacao_item_dto incluir_plano_contratacao_item_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirPlanoContratacaoItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object
     */
    public function incluirPlanoContratacaoItem($cnpj, $ano, $sequencial, $incluir_plano_contratacao_item_dto, string $contentType = self::contentTypes['incluirPlanoContratacaoItem'][0])
    {
        list($response) = $this->incluirPlanoContratacaoItemWithHttpInfo($cnpj, $ano, $sequencial, $incluir_plano_contratacao_item_dto, $contentType);
        return $response;
    }

    /**
     * Operation incluirPlanoContratacaoItemWithHttpInfo
     *
     * Inserir itens de Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\IncluirPlanoContratacaoItemDTO[] $incluir_plano_contratacao_item_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirPlanoContratacaoItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function incluirPlanoContratacaoItemWithHttpInfo($cnpj, $ano, $sequencial, $incluir_plano_contratacao_item_dto, string $contentType = self::contentTypes['incluirPlanoContratacaoItem'][0])
    {
        $request = $this->incluirPlanoContratacaoItemRequest($cnpj, $ano, $sequencial, $incluir_plano_contratacao_item_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation incluirPlanoContratacaoItemAsync
     *
     * Inserir itens de Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\IncluirPlanoContratacaoItemDTO[] $incluir_plano_contratacao_item_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirPlanoContratacaoItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incluirPlanoContratacaoItemAsync($cnpj, $ano, $sequencial, $incluir_plano_contratacao_item_dto, string $contentType = self::contentTypes['incluirPlanoContratacaoItem'][0])
    {
        return $this->incluirPlanoContratacaoItemAsyncWithHttpInfo($cnpj, $ano, $sequencial, $incluir_plano_contratacao_item_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation incluirPlanoContratacaoItemAsyncWithHttpInfo
     *
     * Inserir itens de Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\IncluirPlanoContratacaoItemDTO[] $incluir_plano_contratacao_item_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirPlanoContratacaoItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incluirPlanoContratacaoItemAsyncWithHttpInfo($cnpj, $ano, $sequencial, $incluir_plano_contratacao_item_dto, string $contentType = self::contentTypes['incluirPlanoContratacaoItem'][0])
    {
        $returnType = 'object';
        $request = $this->incluirPlanoContratacaoItemRequest($cnpj, $ano, $sequencial, $incluir_plano_contratacao_item_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'incluirPlanoContratacaoItem'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\IncluirPlanoContratacaoItemDTO[] $incluir_plano_contratacao_item_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirPlanoContratacaoItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function incluirPlanoContratacaoItemRequest($cnpj, $ano, $sequencial, $incluir_plano_contratacao_item_dto, string $contentType = self::contentTypes['incluirPlanoContratacaoItem'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling incluirPlanoContratacaoItem'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling incluirPlanoContratacaoItem'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling incluirPlanoContratacaoItem'
            );
        }

        // verify the required parameter 'incluir_plano_contratacao_item_dto' is set
        if ($incluir_plano_contratacao_item_dto === null || (is_array($incluir_plano_contratacao_item_dto) && count($incluir_plano_contratacao_item_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $incluir_plano_contratacao_item_dto when calling incluirPlanoContratacaoItem'
            );
        }
        if (count($incluir_plano_contratacao_item_dto) > 2000) {
            throw new \InvalidArgumentException('invalid value for "$incluir_plano_contratacao_item_dto" when calling PlanoDeContrataoApi.incluirPlanoContratacaoItem, number of items must be less than or equal to 2000.');
        }
        if (count($incluir_plano_contratacao_item_dto) < 1) {
            throw new \InvalidArgumentException('invalid value for "$incluir_plano_contratacao_item_dto" when calling PlanoDeContrataoApi.incluirPlanoContratacaoItem, number of items must be greater than or equal to 1.');
        }
        

        $resourcePath = '/v1/orgaos/{cnpj}/pca/{ano}/{sequencial}/itens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($incluir_plano_contratacao_item_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($incluir_plano_contratacao_item_dto));
            } else {
                $httpBody = $incluir_plano_contratacao_item_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recuperarDadosOrgaoPca
     *
     * Consultar Planos de Contratação Consolidados por Órgão e Ano
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarDadosOrgaoPca'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\PlanoContratacaoItemOrgaoToDTO
     */
    public function recuperarDadosOrgaoPca($cnpj, $ano, string $contentType = self::contentTypes['recuperarDadosOrgaoPca'][0])
    {
        list($response) = $this->recuperarDadosOrgaoPcaWithHttpInfo($cnpj, $ano, $contentType);
        return $response;
    }

    /**
     * Operation recuperarDadosOrgaoPcaWithHttpInfo
     *
     * Consultar Planos de Contratação Consolidados por Órgão e Ano
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarDadosOrgaoPca'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\PlanoContratacaoItemOrgaoToDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function recuperarDadosOrgaoPcaWithHttpInfo($cnpj, $ano, string $contentType = self::contentTypes['recuperarDadosOrgaoPca'][0])
    {
        $request = $this->recuperarDadosOrgaoPcaRequest($cnpj, $ano, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\PlanoContratacaoItemOrgaoToDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PlanoContratacaoItemOrgaoToDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PlanoContratacaoItemOrgaoToDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PlanoContratacaoItemOrgaoToDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PlanoContratacaoItemOrgaoToDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recuperarDadosOrgaoPcaAsync
     *
     * Consultar Planos de Contratação Consolidados por Órgão e Ano
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarDadosOrgaoPca'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarDadosOrgaoPcaAsync($cnpj, $ano, string $contentType = self::contentTypes['recuperarDadosOrgaoPca'][0])
    {
        return $this->recuperarDadosOrgaoPcaAsyncWithHttpInfo($cnpj, $ano, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recuperarDadosOrgaoPcaAsyncWithHttpInfo
     *
     * Consultar Planos de Contratação Consolidados por Órgão e Ano
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarDadosOrgaoPca'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarDadosOrgaoPcaAsyncWithHttpInfo($cnpj, $ano, string $contentType = self::contentTypes['recuperarDadosOrgaoPca'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PlanoContratacaoItemOrgaoToDTO';
        $request = $this->recuperarDadosOrgaoPcaRequest($cnpj, $ano, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recuperarDadosOrgaoPca'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarDadosOrgaoPca'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recuperarDadosOrgaoPcaRequest($cnpj, $ano, string $contentType = self::contentTypes['recuperarDadosOrgaoPca'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling recuperarDadosOrgaoPca'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling recuperarDadosOrgaoPca'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/pca/{ano}/consolidado';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recuperarDadosOrgaoPcaQuantidade
     *
     * Consultar Quantidade de Planos de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarDadosOrgaoPcaQuantidade'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|int
     */
    public function recuperarDadosOrgaoPcaQuantidade($cnpj, $ano, string $contentType = self::contentTypes['recuperarDadosOrgaoPcaQuantidade'][0])
    {
        list($response) = $this->recuperarDadosOrgaoPcaQuantidadeWithHttpInfo($cnpj, $ano, $contentType);
        return $response;
    }

    /**
     * Operation recuperarDadosOrgaoPcaQuantidadeWithHttpInfo
     *
     * Consultar Quantidade de Planos de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarDadosOrgaoPcaQuantidade'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|int, HTTP status code, HTTP response headers (array of strings)
     */
    public function recuperarDadosOrgaoPcaQuantidadeWithHttpInfo($cnpj, $ano, string $contentType = self::contentTypes['recuperarDadosOrgaoPcaQuantidade'][0])
    {
        $request = $this->recuperarDadosOrgaoPcaQuantidadeRequest($cnpj, $ano, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recuperarDadosOrgaoPcaQuantidadeAsync
     *
     * Consultar Quantidade de Planos de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarDadosOrgaoPcaQuantidade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarDadosOrgaoPcaQuantidadeAsync($cnpj, $ano, string $contentType = self::contentTypes['recuperarDadosOrgaoPcaQuantidade'][0])
    {
        return $this->recuperarDadosOrgaoPcaQuantidadeAsyncWithHttpInfo($cnpj, $ano, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recuperarDadosOrgaoPcaQuantidadeAsyncWithHttpInfo
     *
     * Consultar Quantidade de Planos de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarDadosOrgaoPcaQuantidade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarDadosOrgaoPcaQuantidadeAsyncWithHttpInfo($cnpj, $ano, string $contentType = self::contentTypes['recuperarDadosOrgaoPcaQuantidade'][0])
    {
        $returnType = 'int';
        $request = $this->recuperarDadosOrgaoPcaQuantidadeRequest($cnpj, $ano, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recuperarDadosOrgaoPcaQuantidade'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarDadosOrgaoPcaQuantidade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recuperarDadosOrgaoPcaQuantidadeRequest($cnpj, $ano, string $contentType = self::contentTypes['recuperarDadosOrgaoPcaQuantidade'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling recuperarDadosOrgaoPcaQuantidade'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling recuperarDadosOrgaoPcaQuantidade'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/pca/{ano}/quantidade';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recuperarDadosOrgaoPcaUnidades
     *
     * Consultar Planos de Contratação Consolidados das Unidades por Órgão e Ano
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $pagina pagina (optional)
     * @param  int $tamanho_pagina tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarDadosOrgaoPcaUnidades'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\PlanoContratacaoOrgaoDTO[]
     */
    public function recuperarDadosOrgaoPcaUnidades($cnpj, $ano, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarDadosOrgaoPcaUnidades'][0])
    {
        list($response) = $this->recuperarDadosOrgaoPcaUnidadesWithHttpInfo($cnpj, $ano, $pagina, $tamanho_pagina, $contentType);
        return $response;
    }

    /**
     * Operation recuperarDadosOrgaoPcaUnidadesWithHttpInfo
     *
     * Consultar Planos de Contratação Consolidados das Unidades por Órgão e Ano
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarDadosOrgaoPcaUnidades'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\PlanoContratacaoOrgaoDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function recuperarDadosOrgaoPcaUnidadesWithHttpInfo($cnpj, $ano, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarDadosOrgaoPcaUnidades'][0])
    {
        $request = $this->recuperarDadosOrgaoPcaUnidadesRequest($cnpj, $ano, $pagina, $tamanho_pagina, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\PlanoContratacaoOrgaoDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PlanoContratacaoOrgaoDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PlanoContratacaoOrgaoDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PlanoContratacaoOrgaoDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PlanoContratacaoOrgaoDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recuperarDadosOrgaoPcaUnidadesAsync
     *
     * Consultar Planos de Contratação Consolidados das Unidades por Órgão e Ano
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarDadosOrgaoPcaUnidades'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarDadosOrgaoPcaUnidadesAsync($cnpj, $ano, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarDadosOrgaoPcaUnidades'][0])
    {
        return $this->recuperarDadosOrgaoPcaUnidadesAsyncWithHttpInfo($cnpj, $ano, $pagina, $tamanho_pagina, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recuperarDadosOrgaoPcaUnidadesAsyncWithHttpInfo
     *
     * Consultar Planos de Contratação Consolidados das Unidades por Órgão e Ano
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarDadosOrgaoPcaUnidades'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarDadosOrgaoPcaUnidadesAsyncWithHttpInfo($cnpj, $ano, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarDadosOrgaoPcaUnidades'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PlanoContratacaoOrgaoDTO[]';
        $request = $this->recuperarDadosOrgaoPcaUnidadesRequest($cnpj, $ano, $pagina, $tamanho_pagina, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recuperarDadosOrgaoPcaUnidades'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarDadosOrgaoPcaUnidades'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recuperarDadosOrgaoPcaUnidadesRequest($cnpj, $ano, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarDadosOrgaoPcaUnidades'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling recuperarDadosOrgaoPcaUnidades'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling recuperarDadosOrgaoPcaUnidades'
            );
        }

        if ($pagina !== null && $pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$pagina" when calling PlanoDeContrataoApi.recuperarDadosOrgaoPcaUnidades, must be bigger than or equal to 1.');
        }
        
        if ($tamanho_pagina !== null && $tamanho_pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$tamanho_pagina" when calling PlanoDeContrataoApi.recuperarDadosOrgaoPcaUnidades, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v1/orgaos/{cnpj}/pca/{ano}/consolidado/unidades';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tamanho_pagina,
            'tamanhoPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recuperarDadosPcaItensCategoria
     *
     * Consultar Itens do Plano de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $categoria categoria (optional)
     * @param  int $pagina pagina (optional)
     * @param  int $tamanho_pagina tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarDadosPcaItensCategoria'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\IRecuperarPlanoItemDTO[]
     */
    public function recuperarDadosPcaItensCategoria($cnpj, $ano, $sequencial, $categoria = null, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarDadosPcaItensCategoria'][0])
    {
        list($response) = $this->recuperarDadosPcaItensCategoriaWithHttpInfo($cnpj, $ano, $sequencial, $categoria, $pagina, $tamanho_pagina, $contentType);
        return $response;
    }

    /**
     * Operation recuperarDadosPcaItensCategoriaWithHttpInfo
     *
     * Consultar Itens do Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $categoria (optional)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarDadosPcaItensCategoria'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\IRecuperarPlanoItemDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function recuperarDadosPcaItensCategoriaWithHttpInfo($cnpj, $ano, $sequencial, $categoria = null, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarDadosPcaItensCategoria'][0])
    {
        $request = $this->recuperarDadosPcaItensCategoriaRequest($cnpj, $ano, $sequencial, $categoria, $pagina, $tamanho_pagina, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\IRecuperarPlanoItemDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\IRecuperarPlanoItemDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\IRecuperarPlanoItemDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\IRecuperarPlanoItemDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\IRecuperarPlanoItemDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recuperarDadosPcaItensCategoriaAsync
     *
     * Consultar Itens do Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $categoria (optional)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarDadosPcaItensCategoria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarDadosPcaItensCategoriaAsync($cnpj, $ano, $sequencial, $categoria = null, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarDadosPcaItensCategoria'][0])
    {
        return $this->recuperarDadosPcaItensCategoriaAsyncWithHttpInfo($cnpj, $ano, $sequencial, $categoria, $pagina, $tamanho_pagina, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recuperarDadosPcaItensCategoriaAsyncWithHttpInfo
     *
     * Consultar Itens do Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $categoria (optional)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarDadosPcaItensCategoria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarDadosPcaItensCategoriaAsyncWithHttpInfo($cnpj, $ano, $sequencial, $categoria = null, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarDadosPcaItensCategoria'][0])
    {
        $returnType = '\OpenAPI\Client\Model\IRecuperarPlanoItemDTO[]';
        $request = $this->recuperarDadosPcaItensCategoriaRequest($cnpj, $ano, $sequencial, $categoria, $pagina, $tamanho_pagina, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recuperarDadosPcaItensCategoria'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $categoria (optional)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarDadosPcaItensCategoria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recuperarDadosPcaItensCategoriaRequest($cnpj, $ano, $sequencial, $categoria = null, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarDadosPcaItensCategoria'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling recuperarDadosPcaItensCategoria'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling recuperarDadosPcaItensCategoria'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling recuperarDadosPcaItensCategoria'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling PlanoDeContrataoApi.recuperarDadosPcaItensCategoria, must be bigger than or equal to 1.');
        }
        

        if ($pagina !== null && $pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$pagina" when calling PlanoDeContrataoApi.recuperarDadosPcaItensCategoria, must be bigger than or equal to 1.');
        }
        
        if ($tamanho_pagina !== null && $tamanho_pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$tamanho_pagina" when calling PlanoDeContrataoApi.recuperarDadosPcaItensCategoria, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v1/orgaos/{cnpj}/pca/{ano}/{sequencial}/itens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $categoria,
            'categoria', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tamanho_pagina,
            'tamanhoPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recuperarDadosPcaItensQuantidadeItens
     *
     * Consultar Quantidade de Itens do Plano de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $categoria categoria (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarDadosPcaItensQuantidadeItens'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|int
     */
    public function recuperarDadosPcaItensQuantidadeItens($cnpj, $ano, $sequencial, $categoria = null, string $contentType = self::contentTypes['recuperarDadosPcaItensQuantidadeItens'][0])
    {
        list($response) = $this->recuperarDadosPcaItensQuantidadeItensWithHttpInfo($cnpj, $ano, $sequencial, $categoria, $contentType);
        return $response;
    }

    /**
     * Operation recuperarDadosPcaItensQuantidadeItensWithHttpInfo
     *
     * Consultar Quantidade de Itens do Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $categoria (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarDadosPcaItensQuantidadeItens'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|int, HTTP status code, HTTP response headers (array of strings)
     */
    public function recuperarDadosPcaItensQuantidadeItensWithHttpInfo($cnpj, $ano, $sequencial, $categoria = null, string $contentType = self::contentTypes['recuperarDadosPcaItensQuantidadeItens'][0])
    {
        $request = $this->recuperarDadosPcaItensQuantidadeItensRequest($cnpj, $ano, $sequencial, $categoria, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recuperarDadosPcaItensQuantidadeItensAsync
     *
     * Consultar Quantidade de Itens do Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $categoria (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarDadosPcaItensQuantidadeItens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarDadosPcaItensQuantidadeItensAsync($cnpj, $ano, $sequencial, $categoria = null, string $contentType = self::contentTypes['recuperarDadosPcaItensQuantidadeItens'][0])
    {
        return $this->recuperarDadosPcaItensQuantidadeItensAsyncWithHttpInfo($cnpj, $ano, $sequencial, $categoria, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recuperarDadosPcaItensQuantidadeItensAsyncWithHttpInfo
     *
     * Consultar Quantidade de Itens do Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $categoria (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarDadosPcaItensQuantidadeItens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarDadosPcaItensQuantidadeItensAsyncWithHttpInfo($cnpj, $ano, $sequencial, $categoria = null, string $contentType = self::contentTypes['recuperarDadosPcaItensQuantidadeItens'][0])
    {
        $returnType = 'int';
        $request = $this->recuperarDadosPcaItensQuantidadeItensRequest($cnpj, $ano, $sequencial, $categoria, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recuperarDadosPcaItensQuantidadeItens'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $categoria (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarDadosPcaItensQuantidadeItens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recuperarDadosPcaItensQuantidadeItensRequest($cnpj, $ano, $sequencial, $categoria = null, string $contentType = self::contentTypes['recuperarDadosPcaItensQuantidadeItens'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling recuperarDadosPcaItensQuantidadeItens'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling recuperarDadosPcaItensQuantidadeItens'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling recuperarDadosPcaItensQuantidadeItens'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling PlanoDeContrataoApi.recuperarDadosPcaItensQuantidadeItens, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v1/orgaos/{cnpj}/pca/{ano}/{sequencial}/itens/quantidade';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $categoria,
            'categoria', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recuperarItensPlanoPorContratacao
     *
     * Retornar Itens de Plano de Contratação por número da Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  string $numero_contratacao numero_contratacao (required)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarItensPlanoPorContratacao'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\IRecuperarPlanoItemDTO[]
     */
    public function recuperarItensPlanoPorContratacao($cnpj, $ano, $sequencial, $numero_contratacao, $page = 0, $size = 10, string $contentType = self::contentTypes['recuperarItensPlanoPorContratacao'][0])
    {
        list($response) = $this->recuperarItensPlanoPorContratacaoWithHttpInfo($cnpj, $ano, $sequencial, $numero_contratacao, $page, $size, $contentType);
        return $response;
    }

    /**
     * Operation recuperarItensPlanoPorContratacaoWithHttpInfo
     *
     * Retornar Itens de Plano de Contratação por número da Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $numero_contratacao (required)
     * @param  int $page (optional, default to 0)
     * @param  int $size (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarItensPlanoPorContratacao'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\IRecuperarPlanoItemDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function recuperarItensPlanoPorContratacaoWithHttpInfo($cnpj, $ano, $sequencial, $numero_contratacao, $page = 0, $size = 10, string $contentType = self::contentTypes['recuperarItensPlanoPorContratacao'][0])
    {
        $request = $this->recuperarItensPlanoPorContratacaoRequest($cnpj, $ano, $sequencial, $numero_contratacao, $page, $size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\IRecuperarPlanoItemDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\IRecuperarPlanoItemDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\IRecuperarPlanoItemDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\IRecuperarPlanoItemDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\IRecuperarPlanoItemDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recuperarItensPlanoPorContratacaoAsync
     *
     * Retornar Itens de Plano de Contratação por número da Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $numero_contratacao (required)
     * @param  int $page (optional, default to 0)
     * @param  int $size (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarItensPlanoPorContratacao'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarItensPlanoPorContratacaoAsync($cnpj, $ano, $sequencial, $numero_contratacao, $page = 0, $size = 10, string $contentType = self::contentTypes['recuperarItensPlanoPorContratacao'][0])
    {
        return $this->recuperarItensPlanoPorContratacaoAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_contratacao, $page, $size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recuperarItensPlanoPorContratacaoAsyncWithHttpInfo
     *
     * Retornar Itens de Plano de Contratação por número da Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $numero_contratacao (required)
     * @param  int $page (optional, default to 0)
     * @param  int $size (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarItensPlanoPorContratacao'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarItensPlanoPorContratacaoAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_contratacao, $page = 0, $size = 10, string $contentType = self::contentTypes['recuperarItensPlanoPorContratacao'][0])
    {
        $returnType = '\OpenAPI\Client\Model\IRecuperarPlanoItemDTO[]';
        $request = $this->recuperarItensPlanoPorContratacaoRequest($cnpj, $ano, $sequencial, $numero_contratacao, $page, $size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recuperarItensPlanoPorContratacao'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $numero_contratacao (required)
     * @param  int $page (optional, default to 0)
     * @param  int $size (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarItensPlanoPorContratacao'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recuperarItensPlanoPorContratacaoRequest($cnpj, $ano, $sequencial, $numero_contratacao, $page = 0, $size = 10, string $contentType = self::contentTypes['recuperarItensPlanoPorContratacao'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling recuperarItensPlanoPorContratacao'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling recuperarItensPlanoPorContratacao'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling recuperarItensPlanoPorContratacao'
            );
        }

        // verify the required parameter 'numero_contratacao' is set
        if ($numero_contratacao === null || (is_array($numero_contratacao) && count($numero_contratacao) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numero_contratacao when calling recuperarItensPlanoPorContratacao'
            );
        }




        $resourcePath = '/v1/orgaos/{cnpj}/pca/{ano}/{sequencial}/itens/contratacao';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $numero_contratacao,
            'numeroContratacao', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recuperarSequenciaisDoPlano
     *
     * @param  string $cnpj cnpj (required)
     * @param  string $uasg uasg (required)
     * @param  int $ano ano (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarSequenciaisDoPlano'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\SequenciaisDTO
     */
    public function recuperarSequenciaisDoPlano($cnpj, $uasg, $ano, string $contentType = self::contentTypes['recuperarSequenciaisDoPlano'][0])
    {
        list($response) = $this->recuperarSequenciaisDoPlanoWithHttpInfo($cnpj, $uasg, $ano, $contentType);
        return $response;
    }

    /**
     * Operation recuperarSequenciaisDoPlanoWithHttpInfo
     *
     * @param  string $cnpj (required)
     * @param  string $uasg (required)
     * @param  int $ano (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarSequenciaisDoPlano'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\SequenciaisDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function recuperarSequenciaisDoPlanoWithHttpInfo($cnpj, $uasg, $ano, string $contentType = self::contentTypes['recuperarSequenciaisDoPlano'][0])
    {
        $request = $this->recuperarSequenciaisDoPlanoRequest($cnpj, $uasg, $ano, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\SequenciaisDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SequenciaisDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SequenciaisDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SequenciaisDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SequenciaisDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recuperarSequenciaisDoPlanoAsync
     *
     * @param  string $cnpj (required)
     * @param  string $uasg (required)
     * @param  int $ano (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarSequenciaisDoPlano'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarSequenciaisDoPlanoAsync($cnpj, $uasg, $ano, string $contentType = self::contentTypes['recuperarSequenciaisDoPlano'][0])
    {
        return $this->recuperarSequenciaisDoPlanoAsyncWithHttpInfo($cnpj, $uasg, $ano, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recuperarSequenciaisDoPlanoAsyncWithHttpInfo
     *
     * @param  string $cnpj (required)
     * @param  string $uasg (required)
     * @param  int $ano (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarSequenciaisDoPlano'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarSequenciaisDoPlanoAsyncWithHttpInfo($cnpj, $uasg, $ano, string $contentType = self::contentTypes['recuperarSequenciaisDoPlano'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SequenciaisDTO';
        $request = $this->recuperarSequenciaisDoPlanoRequest($cnpj, $uasg, $ano, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recuperarSequenciaisDoPlano'
     *
     * @param  string $cnpj (required)
     * @param  string $uasg (required)
     * @param  int $ano (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarSequenciaisDoPlano'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recuperarSequenciaisDoPlanoRequest($cnpj, $uasg, $ano, string $contentType = self::contentTypes['recuperarSequenciaisDoPlano'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling recuperarSequenciaisDoPlano'
            );
        }

        // verify the required parameter 'uasg' is set
        if ($uasg === null || (is_array($uasg) && count($uasg) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uasg when calling recuperarSequenciaisDoPlano'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling recuperarSequenciaisDoPlano'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/pca/{uasg}/{ano}/sequenciaisplano';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($uasg !== null) {
            $resourcePath = str_replace(
                '{' . 'uasg' . '}',
                ObjectSerializer::toPathValue($uasg),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recuperarValoresCategoriaItem
     *
     * Consultar Valores de um Plano de Contratação por Categoria
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $categoria_item categoria_item (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarValoresCategoriaItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarValoresCategoriaItemPcaDTO[]
     */
    public function recuperarValoresCategoriaItem($cnpj, $ano, $sequencial, $categoria_item = null, string $contentType = self::contentTypes['recuperarValoresCategoriaItem'][0])
    {
        list($response) = $this->recuperarValoresCategoriaItemWithHttpInfo($cnpj, $ano, $sequencial, $categoria_item, $contentType);
        return $response;
    }

    /**
     * Operation recuperarValoresCategoriaItemWithHttpInfo
     *
     * Consultar Valores de um Plano de Contratação por Categoria
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $categoria_item (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarValoresCategoriaItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarValoresCategoriaItemPcaDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function recuperarValoresCategoriaItemWithHttpInfo($cnpj, $ano, $sequencial, $categoria_item = null, string $contentType = self::contentTypes['recuperarValoresCategoriaItem'][0])
    {
        $request = $this->recuperarValoresCategoriaItemRequest($cnpj, $ano, $sequencial, $categoria_item, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\RecuperarValoresCategoriaItemPcaDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RecuperarValoresCategoriaItemPcaDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RecuperarValoresCategoriaItemPcaDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RecuperarValoresCategoriaItemPcaDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RecuperarValoresCategoriaItemPcaDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recuperarValoresCategoriaItemAsync
     *
     * Consultar Valores de um Plano de Contratação por Categoria
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $categoria_item (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarValoresCategoriaItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarValoresCategoriaItemAsync($cnpj, $ano, $sequencial, $categoria_item = null, string $contentType = self::contentTypes['recuperarValoresCategoriaItem'][0])
    {
        return $this->recuperarValoresCategoriaItemAsyncWithHttpInfo($cnpj, $ano, $sequencial, $categoria_item, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recuperarValoresCategoriaItemAsyncWithHttpInfo
     *
     * Consultar Valores de um Plano de Contratação por Categoria
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $categoria_item (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarValoresCategoriaItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarValoresCategoriaItemAsyncWithHttpInfo($cnpj, $ano, $sequencial, $categoria_item = null, string $contentType = self::contentTypes['recuperarValoresCategoriaItem'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RecuperarValoresCategoriaItemPcaDTO[]';
        $request = $this->recuperarValoresCategoriaItemRequest($cnpj, $ano, $sequencial, $categoria_item, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recuperarValoresCategoriaItem'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $categoria_item (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarValoresCategoriaItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recuperarValoresCategoriaItemRequest($cnpj, $ano, $sequencial, $categoria_item = null, string $contentType = self::contentTypes['recuperarValoresCategoriaItem'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling recuperarValoresCategoriaItem'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling recuperarValoresCategoriaItem'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling recuperarValoresCategoriaItem'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling PlanoDeContrataoApi.recuperarValoresCategoriaItem, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v1/orgaos/{cnpj}/pca/{ano}/{sequencial}/valorescategoriaitem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $categoria_item,
            'categoriaItem', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recuperarValoresCategoriaItem1
     *
     * Consultar Valores de Planos de Contratação de um Órgão por Categoria
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $categoria_item categoria_item (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarValoresCategoriaItem1'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarValoresCategoriaItemPcaDTO[]
     */
    public function recuperarValoresCategoriaItem1($cnpj, $ano, $categoria_item = null, string $contentType = self::contentTypes['recuperarValoresCategoriaItem1'][0])
    {
        list($response) = $this->recuperarValoresCategoriaItem1WithHttpInfo($cnpj, $ano, $categoria_item, $contentType);
        return $response;
    }

    /**
     * Operation recuperarValoresCategoriaItem1WithHttpInfo
     *
     * Consultar Valores de Planos de Contratação de um Órgão por Categoria
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $categoria_item (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarValoresCategoriaItem1'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarValoresCategoriaItemPcaDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function recuperarValoresCategoriaItem1WithHttpInfo($cnpj, $ano, $categoria_item = null, string $contentType = self::contentTypes['recuperarValoresCategoriaItem1'][0])
    {
        $request = $this->recuperarValoresCategoriaItem1Request($cnpj, $ano, $categoria_item, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\RecuperarValoresCategoriaItemPcaDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RecuperarValoresCategoriaItemPcaDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RecuperarValoresCategoriaItemPcaDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RecuperarValoresCategoriaItemPcaDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RecuperarValoresCategoriaItemPcaDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recuperarValoresCategoriaItem1Async
     *
     * Consultar Valores de Planos de Contratação de um Órgão por Categoria
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $categoria_item (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarValoresCategoriaItem1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarValoresCategoriaItem1Async($cnpj, $ano, $categoria_item = null, string $contentType = self::contentTypes['recuperarValoresCategoriaItem1'][0])
    {
        return $this->recuperarValoresCategoriaItem1AsyncWithHttpInfo($cnpj, $ano, $categoria_item, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recuperarValoresCategoriaItem1AsyncWithHttpInfo
     *
     * Consultar Valores de Planos de Contratação de um Órgão por Categoria
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $categoria_item (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarValoresCategoriaItem1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarValoresCategoriaItem1AsyncWithHttpInfo($cnpj, $ano, $categoria_item = null, string $contentType = self::contentTypes['recuperarValoresCategoriaItem1'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RecuperarValoresCategoriaItemPcaDTO[]';
        $request = $this->recuperarValoresCategoriaItem1Request($cnpj, $ano, $categoria_item, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recuperarValoresCategoriaItem1'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $categoria_item (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarValoresCategoriaItem1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recuperarValoresCategoriaItem1Request($cnpj, $ano, $categoria_item = null, string $contentType = self::contentTypes['recuperarValoresCategoriaItem1'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling recuperarValoresCategoriaItem1'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling recuperarValoresCategoriaItem1'
            );
        }



        $resourcePath = '/v1/orgaos/{cnpj}/pca/{ano}/valorescategoriaitem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $categoria_item,
            'categoriaItem', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removerItemPlano
     *
     * Excluir Item de Plano de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $numero_item numero_item (required)
     * @param  \OpenAPI\Client\Model\ExclusaoItemPcaDTO $exclusao_item_pca_dto exclusao_item_pca_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerItemPlano'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removerItemPlano($cnpj, $ano, $sequencial, $numero_item, $exclusao_item_pca_dto = null, string $contentType = self::contentTypes['removerItemPlano'][0])
    {
        $this->removerItemPlanoWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $exclusao_item_pca_dto, $contentType);
    }

    /**
     * Operation removerItemPlanoWithHttpInfo
     *
     * Excluir Item de Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  \OpenAPI\Client\Model\ExclusaoItemPcaDTO $exclusao_item_pca_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerItemPlano'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removerItemPlanoWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $exclusao_item_pca_dto = null, string $contentType = self::contentTypes['removerItemPlano'][0])
    {
        $request = $this->removerItemPlanoRequest($cnpj, $ano, $sequencial, $numero_item, $exclusao_item_pca_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removerItemPlanoAsync
     *
     * Excluir Item de Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  \OpenAPI\Client\Model\ExclusaoItemPcaDTO $exclusao_item_pca_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerItemPlano'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removerItemPlanoAsync($cnpj, $ano, $sequencial, $numero_item, $exclusao_item_pca_dto = null, string $contentType = self::contentTypes['removerItemPlano'][0])
    {
        return $this->removerItemPlanoAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $exclusao_item_pca_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removerItemPlanoAsyncWithHttpInfo
     *
     * Excluir Item de Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  \OpenAPI\Client\Model\ExclusaoItemPcaDTO $exclusao_item_pca_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerItemPlano'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removerItemPlanoAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $exclusao_item_pca_dto = null, string $contentType = self::contentTypes['removerItemPlano'][0])
    {
        $returnType = '';
        $request = $this->removerItemPlanoRequest($cnpj, $ano, $sequencial, $numero_item, $exclusao_item_pca_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removerItemPlano'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  \OpenAPI\Client\Model\ExclusaoItemPcaDTO $exclusao_item_pca_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerItemPlano'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removerItemPlanoRequest($cnpj, $ano, $sequencial, $numero_item, $exclusao_item_pca_dto = null, string $contentType = self::contentTypes['removerItemPlano'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling removerItemPlano'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling removerItemPlano'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling removerItemPlano'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling PlanoDeContrataoApi.removerItemPlano, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'numero_item' is set
        if ($numero_item === null || (is_array($numero_item) && count($numero_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numero_item when calling removerItemPlano'
            );
        }
        if ($numero_item < 1) {
            throw new \InvalidArgumentException('invalid value for "$numero_item" when calling PlanoDeContrataoApi.removerItemPlano, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v1/orgaos/{cnpj}/pca/{ano}/{sequencial}/itens/{numeroItem}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }
        // path params
        if ($numero_item !== null) {
            $resourcePath = str_replace(
                '{' . 'numeroItem' . '}',
                ObjectSerializer::toPathValue($numero_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($exclusao_item_pca_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($exclusao_item_pca_dto));
            } else {
                $httpBody = $exclusao_item_pca_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removerItensPlano
     *
     * Excluir Itens de Plano de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  \OpenAPI\Client\Model\ExclusaoListaItensPcaDTO $exclusao_lista_itens_pca_dto exclusao_lista_itens_pca_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerItensPlano'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removerItensPlano($cnpj, $ano, $sequencial, $exclusao_lista_itens_pca_dto, string $contentType = self::contentTypes['removerItensPlano'][0])
    {
        $this->removerItensPlanoWithHttpInfo($cnpj, $ano, $sequencial, $exclusao_lista_itens_pca_dto, $contentType);
    }

    /**
     * Operation removerItensPlanoWithHttpInfo
     *
     * Excluir Itens de Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\ExclusaoListaItensPcaDTO $exclusao_lista_itens_pca_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerItensPlano'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removerItensPlanoWithHttpInfo($cnpj, $ano, $sequencial, $exclusao_lista_itens_pca_dto, string $contentType = self::contentTypes['removerItensPlano'][0])
    {
        $request = $this->removerItensPlanoRequest($cnpj, $ano, $sequencial, $exclusao_lista_itens_pca_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removerItensPlanoAsync
     *
     * Excluir Itens de Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\ExclusaoListaItensPcaDTO $exclusao_lista_itens_pca_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerItensPlano'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removerItensPlanoAsync($cnpj, $ano, $sequencial, $exclusao_lista_itens_pca_dto, string $contentType = self::contentTypes['removerItensPlano'][0])
    {
        return $this->removerItensPlanoAsyncWithHttpInfo($cnpj, $ano, $sequencial, $exclusao_lista_itens_pca_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removerItensPlanoAsyncWithHttpInfo
     *
     * Excluir Itens de Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\ExclusaoListaItensPcaDTO $exclusao_lista_itens_pca_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerItensPlano'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removerItensPlanoAsyncWithHttpInfo($cnpj, $ano, $sequencial, $exclusao_lista_itens_pca_dto, string $contentType = self::contentTypes['removerItensPlano'][0])
    {
        $returnType = '';
        $request = $this->removerItensPlanoRequest($cnpj, $ano, $sequencial, $exclusao_lista_itens_pca_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removerItensPlano'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\ExclusaoListaItensPcaDTO $exclusao_lista_itens_pca_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerItensPlano'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removerItensPlanoRequest($cnpj, $ano, $sequencial, $exclusao_lista_itens_pca_dto, string $contentType = self::contentTypes['removerItensPlano'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling removerItensPlano'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling removerItensPlano'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling removerItensPlano'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling PlanoDeContrataoApi.removerItensPlano, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'exclusao_lista_itens_pca_dto' is set
        if ($exclusao_lista_itens_pca_dto === null || (is_array($exclusao_lista_itens_pca_dto) && count($exclusao_lista_itens_pca_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exclusao_lista_itens_pca_dto when calling removerItensPlano'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/pca/{ano}/{sequencial}/itens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($exclusao_lista_itens_pca_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($exclusao_lista_itens_pca_dto));
            } else {
                $httpBody = $exclusao_lista_itens_pca_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removerItensPlanoPorContratacao
     *
     * Excluir Itens de Plano de Contratação por número da Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  string $numero_contratacao numero_contratacao (required)
     * @param  \OpenAPI\Client\Model\ExclusaoItemPcaDTO $exclusao_item_pca_dto exclusao_item_pca_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerItensPlanoPorContratacao'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removerItensPlanoPorContratacao($cnpj, $ano, $sequencial, $numero_contratacao, $exclusao_item_pca_dto, string $contentType = self::contentTypes['removerItensPlanoPorContratacao'][0])
    {
        $this->removerItensPlanoPorContratacaoWithHttpInfo($cnpj, $ano, $sequencial, $numero_contratacao, $exclusao_item_pca_dto, $contentType);
    }

    /**
     * Operation removerItensPlanoPorContratacaoWithHttpInfo
     *
     * Excluir Itens de Plano de Contratação por número da Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $numero_contratacao (required)
     * @param  \OpenAPI\Client\Model\ExclusaoItemPcaDTO $exclusao_item_pca_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerItensPlanoPorContratacao'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removerItensPlanoPorContratacaoWithHttpInfo($cnpj, $ano, $sequencial, $numero_contratacao, $exclusao_item_pca_dto, string $contentType = self::contentTypes['removerItensPlanoPorContratacao'][0])
    {
        $request = $this->removerItensPlanoPorContratacaoRequest($cnpj, $ano, $sequencial, $numero_contratacao, $exclusao_item_pca_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removerItensPlanoPorContratacaoAsync
     *
     * Excluir Itens de Plano de Contratação por número da Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $numero_contratacao (required)
     * @param  \OpenAPI\Client\Model\ExclusaoItemPcaDTO $exclusao_item_pca_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerItensPlanoPorContratacao'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removerItensPlanoPorContratacaoAsync($cnpj, $ano, $sequencial, $numero_contratacao, $exclusao_item_pca_dto, string $contentType = self::contentTypes['removerItensPlanoPorContratacao'][0])
    {
        return $this->removerItensPlanoPorContratacaoAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_contratacao, $exclusao_item_pca_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removerItensPlanoPorContratacaoAsyncWithHttpInfo
     *
     * Excluir Itens de Plano de Contratação por número da Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $numero_contratacao (required)
     * @param  \OpenAPI\Client\Model\ExclusaoItemPcaDTO $exclusao_item_pca_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerItensPlanoPorContratacao'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removerItensPlanoPorContratacaoAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_contratacao, $exclusao_item_pca_dto, string $contentType = self::contentTypes['removerItensPlanoPorContratacao'][0])
    {
        $returnType = '';
        $request = $this->removerItensPlanoPorContratacaoRequest($cnpj, $ano, $sequencial, $numero_contratacao, $exclusao_item_pca_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removerItensPlanoPorContratacao'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $numero_contratacao (required)
     * @param  \OpenAPI\Client\Model\ExclusaoItemPcaDTO $exclusao_item_pca_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerItensPlanoPorContratacao'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removerItensPlanoPorContratacaoRequest($cnpj, $ano, $sequencial, $numero_contratacao, $exclusao_item_pca_dto, string $contentType = self::contentTypes['removerItensPlanoPorContratacao'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling removerItensPlanoPorContratacao'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling removerItensPlanoPorContratacao'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling removerItensPlanoPorContratacao'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling PlanoDeContrataoApi.removerItensPlanoPorContratacao, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'numero_contratacao' is set
        if ($numero_contratacao === null || (is_array($numero_contratacao) && count($numero_contratacao) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numero_contratacao when calling removerItensPlanoPorContratacao'
            );
        }
        if (strlen($numero_contratacao) > 100) {
            throw new \InvalidArgumentException('invalid length for "$numero_contratacao" when calling PlanoDeContrataoApi.removerItensPlanoPorContratacao, must be smaller than or equal to 100.');
        }
        if (strlen($numero_contratacao) < 0) {
            throw new \InvalidArgumentException('invalid length for "$numero_contratacao" when calling PlanoDeContrataoApi.removerItensPlanoPorContratacao, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'exclusao_item_pca_dto' is set
        if ($exclusao_item_pca_dto === null || (is_array($exclusao_item_pca_dto) && count($exclusao_item_pca_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exclusao_item_pca_dto when calling removerItensPlanoPorContratacao'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/pca/{ano}/{sequencial}/itens/contratacao';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $numero_contratacao,
            'numeroContratacao', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($exclusao_item_pca_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($exclusao_item_pca_dto));
            } else {
                $httpBody = $exclusao_item_pca_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removerPlano
     *
     * Excluir Plano de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerPlano'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removerPlano($cnpj, $ano, $sequencial, $exclusao_dto = null, string $contentType = self::contentTypes['removerPlano'][0])
    {
        $this->removerPlanoWithHttpInfo($cnpj, $ano, $sequencial, $exclusao_dto, $contentType);
    }

    /**
     * Operation removerPlanoWithHttpInfo
     *
     * Excluir Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerPlano'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removerPlanoWithHttpInfo($cnpj, $ano, $sequencial, $exclusao_dto = null, string $contentType = self::contentTypes['removerPlano'][0])
    {
        $request = $this->removerPlanoRequest($cnpj, $ano, $sequencial, $exclusao_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removerPlanoAsync
     *
     * Excluir Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerPlano'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removerPlanoAsync($cnpj, $ano, $sequencial, $exclusao_dto = null, string $contentType = self::contentTypes['removerPlano'][0])
    {
        return $this->removerPlanoAsyncWithHttpInfo($cnpj, $ano, $sequencial, $exclusao_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removerPlanoAsyncWithHttpInfo
     *
     * Excluir Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerPlano'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removerPlanoAsyncWithHttpInfo($cnpj, $ano, $sequencial, $exclusao_dto = null, string $contentType = self::contentTypes['removerPlano'][0])
    {
        $returnType = '';
        $request = $this->removerPlanoRequest($cnpj, $ano, $sequencial, $exclusao_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removerPlano'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerPlano'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removerPlanoRequest($cnpj, $ano, $sequencial, $exclusao_dto = null, string $contentType = self::contentTypes['removerPlano'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling removerPlano'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling removerPlano'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling removerPlano'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling PlanoDeContrataoApi.removerPlano, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v1/orgaos/{cnpj}/pca/{ano}/{sequencial}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($exclusao_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($exclusao_dto));
            } else {
                $httpBody = $exclusao_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retificarParcialmentePlanoContratacaoItem
     *
     * Retificar Parcialmente item de Plano de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $numero_item numero_item (required)
     * @param  \OpenAPI\Client\Model\RetificarParcialPlanoContratacaoItemDTO $retificar_parcial_plano_contratacao_item_dto retificar_parcial_plano_contratacao_item_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarParcialmentePlanoContratacaoItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function retificarParcialmentePlanoContratacaoItem($cnpj, $ano, $sequencial, $numero_item, $retificar_parcial_plano_contratacao_item_dto, string $contentType = self::contentTypes['retificarParcialmentePlanoContratacaoItem'][0])
    {
        $this->retificarParcialmentePlanoContratacaoItemWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $retificar_parcial_plano_contratacao_item_dto, $contentType);
    }

    /**
     * Operation retificarParcialmentePlanoContratacaoItemWithHttpInfo
     *
     * Retificar Parcialmente item de Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  \OpenAPI\Client\Model\RetificarParcialPlanoContratacaoItemDTO $retificar_parcial_plano_contratacao_item_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarParcialmentePlanoContratacaoItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function retificarParcialmentePlanoContratacaoItemWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $retificar_parcial_plano_contratacao_item_dto, string $contentType = self::contentTypes['retificarParcialmentePlanoContratacaoItem'][0])
    {
        $request = $this->retificarParcialmentePlanoContratacaoItemRequest($cnpj, $ano, $sequencial, $numero_item, $retificar_parcial_plano_contratacao_item_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retificarParcialmentePlanoContratacaoItemAsync
     *
     * Retificar Parcialmente item de Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  \OpenAPI\Client\Model\RetificarParcialPlanoContratacaoItemDTO $retificar_parcial_plano_contratacao_item_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarParcialmentePlanoContratacaoItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retificarParcialmentePlanoContratacaoItemAsync($cnpj, $ano, $sequencial, $numero_item, $retificar_parcial_plano_contratacao_item_dto, string $contentType = self::contentTypes['retificarParcialmentePlanoContratacaoItem'][0])
    {
        return $this->retificarParcialmentePlanoContratacaoItemAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $retificar_parcial_plano_contratacao_item_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retificarParcialmentePlanoContratacaoItemAsyncWithHttpInfo
     *
     * Retificar Parcialmente item de Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  \OpenAPI\Client\Model\RetificarParcialPlanoContratacaoItemDTO $retificar_parcial_plano_contratacao_item_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarParcialmentePlanoContratacaoItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retificarParcialmentePlanoContratacaoItemAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $retificar_parcial_plano_contratacao_item_dto, string $contentType = self::contentTypes['retificarParcialmentePlanoContratacaoItem'][0])
    {
        $returnType = '';
        $request = $this->retificarParcialmentePlanoContratacaoItemRequest($cnpj, $ano, $sequencial, $numero_item, $retificar_parcial_plano_contratacao_item_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retificarParcialmentePlanoContratacaoItem'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  \OpenAPI\Client\Model\RetificarParcialPlanoContratacaoItemDTO $retificar_parcial_plano_contratacao_item_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarParcialmentePlanoContratacaoItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retificarParcialmentePlanoContratacaoItemRequest($cnpj, $ano, $sequencial, $numero_item, $retificar_parcial_plano_contratacao_item_dto, string $contentType = self::contentTypes['retificarParcialmentePlanoContratacaoItem'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling retificarParcialmentePlanoContratacaoItem'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling retificarParcialmentePlanoContratacaoItem'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling retificarParcialmentePlanoContratacaoItem'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling PlanoDeContrataoApi.retificarParcialmentePlanoContratacaoItem, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'numero_item' is set
        if ($numero_item === null || (is_array($numero_item) && count($numero_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numero_item when calling retificarParcialmentePlanoContratacaoItem'
            );
        }
        if ($numero_item < 1) {
            throw new \InvalidArgumentException('invalid value for "$numero_item" when calling PlanoDeContrataoApi.retificarParcialmentePlanoContratacaoItem, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'retificar_parcial_plano_contratacao_item_dto' is set
        if ($retificar_parcial_plano_contratacao_item_dto === null || (is_array($retificar_parcial_plano_contratacao_item_dto) && count($retificar_parcial_plano_contratacao_item_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $retificar_parcial_plano_contratacao_item_dto when calling retificarParcialmentePlanoContratacaoItem'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/pca/{ano}/{sequencial}/itens/{numeroItem}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }
        // path params
        if ($numero_item !== null) {
            $resourcePath = str_replace(
                '{' . 'numeroItem' . '}',
                ObjectSerializer::toPathValue($numero_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($retificar_parcial_plano_contratacao_item_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($retificar_parcial_plano_contratacao_item_dto));
            } else {
                $httpBody = $retificar_parcial_plano_contratacao_item_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retificarParcialmentePlanoContratacaoItens
     *
     * Retificar Parcialmente itens de Plano de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  \OpenAPI\Client\Model\RetificarParcialPlanoContratacaoListaItensDTO $retificar_parcial_plano_contratacao_lista_itens_dto retificar_parcial_plano_contratacao_lista_itens_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarParcialmentePlanoContratacaoItens'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function retificarParcialmentePlanoContratacaoItens($cnpj, $ano, $sequencial, $retificar_parcial_plano_contratacao_lista_itens_dto, string $contentType = self::contentTypes['retificarParcialmentePlanoContratacaoItens'][0])
    {
        $this->retificarParcialmentePlanoContratacaoItensWithHttpInfo($cnpj, $ano, $sequencial, $retificar_parcial_plano_contratacao_lista_itens_dto, $contentType);
    }

    /**
     * Operation retificarParcialmentePlanoContratacaoItensWithHttpInfo
     *
     * Retificar Parcialmente itens de Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\RetificarParcialPlanoContratacaoListaItensDTO $retificar_parcial_plano_contratacao_lista_itens_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarParcialmentePlanoContratacaoItens'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function retificarParcialmentePlanoContratacaoItensWithHttpInfo($cnpj, $ano, $sequencial, $retificar_parcial_plano_contratacao_lista_itens_dto, string $contentType = self::contentTypes['retificarParcialmentePlanoContratacaoItens'][0])
    {
        $request = $this->retificarParcialmentePlanoContratacaoItensRequest($cnpj, $ano, $sequencial, $retificar_parcial_plano_contratacao_lista_itens_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retificarParcialmentePlanoContratacaoItensAsync
     *
     * Retificar Parcialmente itens de Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\RetificarParcialPlanoContratacaoListaItensDTO $retificar_parcial_plano_contratacao_lista_itens_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarParcialmentePlanoContratacaoItens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retificarParcialmentePlanoContratacaoItensAsync($cnpj, $ano, $sequencial, $retificar_parcial_plano_contratacao_lista_itens_dto, string $contentType = self::contentTypes['retificarParcialmentePlanoContratacaoItens'][0])
    {
        return $this->retificarParcialmentePlanoContratacaoItensAsyncWithHttpInfo($cnpj, $ano, $sequencial, $retificar_parcial_plano_contratacao_lista_itens_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retificarParcialmentePlanoContratacaoItensAsyncWithHttpInfo
     *
     * Retificar Parcialmente itens de Plano de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\RetificarParcialPlanoContratacaoListaItensDTO $retificar_parcial_plano_contratacao_lista_itens_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarParcialmentePlanoContratacaoItens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retificarParcialmentePlanoContratacaoItensAsyncWithHttpInfo($cnpj, $ano, $sequencial, $retificar_parcial_plano_contratacao_lista_itens_dto, string $contentType = self::contentTypes['retificarParcialmentePlanoContratacaoItens'][0])
    {
        $returnType = '';
        $request = $this->retificarParcialmentePlanoContratacaoItensRequest($cnpj, $ano, $sequencial, $retificar_parcial_plano_contratacao_lista_itens_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retificarParcialmentePlanoContratacaoItens'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\RetificarParcialPlanoContratacaoListaItensDTO $retificar_parcial_plano_contratacao_lista_itens_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarParcialmentePlanoContratacaoItens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retificarParcialmentePlanoContratacaoItensRequest($cnpj, $ano, $sequencial, $retificar_parcial_plano_contratacao_lista_itens_dto, string $contentType = self::contentTypes['retificarParcialmentePlanoContratacaoItens'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling retificarParcialmentePlanoContratacaoItens'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling retificarParcialmentePlanoContratacaoItens'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling retificarParcialmentePlanoContratacaoItens'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling PlanoDeContrataoApi.retificarParcialmentePlanoContratacaoItens, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'retificar_parcial_plano_contratacao_lista_itens_dto' is set
        if ($retificar_parcial_plano_contratacao_lista_itens_dto === null || (is_array($retificar_parcial_plano_contratacao_lista_itens_dto) && count($retificar_parcial_plano_contratacao_lista_itens_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $retificar_parcial_plano_contratacao_lista_itens_dto when calling retificarParcialmentePlanoContratacaoItens'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/pca/{ano}/{sequencial}/itens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($retificar_parcial_plano_contratacao_lista_itens_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($retificar_parcial_plano_contratacao_lista_itens_dto));
            } else {
                $httpBody = $retificar_parcial_plano_contratacao_lista_itens_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retornarPlanosTodasUnidadesDoOrgaoCsv
     *
     * Baixar CSV dos Planos de Contratação por Órgão e Ano
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retornarPlanosTodasUnidadesDoOrgaoCsv'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|string[]
     */
    public function retornarPlanosTodasUnidadesDoOrgaoCsv($cnpj, $ano, string $contentType = self::contentTypes['retornarPlanosTodasUnidadesDoOrgaoCsv'][0])
    {
        list($response) = $this->retornarPlanosTodasUnidadesDoOrgaoCsvWithHttpInfo($cnpj, $ano, $contentType);
        return $response;
    }

    /**
     * Operation retornarPlanosTodasUnidadesDoOrgaoCsvWithHttpInfo
     *
     * Baixar CSV dos Planos de Contratação por Órgão e Ano
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retornarPlanosTodasUnidadesDoOrgaoCsv'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function retornarPlanosTodasUnidadesDoOrgaoCsvWithHttpInfo($cnpj, $ano, string $contentType = self::contentTypes['retornarPlanosTodasUnidadesDoOrgaoCsv'][0])
    {
        $request = $this->retornarPlanosTodasUnidadesDoOrgaoCsvRequest($cnpj, $ano, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retornarPlanosTodasUnidadesDoOrgaoCsvAsync
     *
     * Baixar CSV dos Planos de Contratação por Órgão e Ano
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retornarPlanosTodasUnidadesDoOrgaoCsv'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retornarPlanosTodasUnidadesDoOrgaoCsvAsync($cnpj, $ano, string $contentType = self::contentTypes['retornarPlanosTodasUnidadesDoOrgaoCsv'][0])
    {
        return $this->retornarPlanosTodasUnidadesDoOrgaoCsvAsyncWithHttpInfo($cnpj, $ano, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retornarPlanosTodasUnidadesDoOrgaoCsvAsyncWithHttpInfo
     *
     * Baixar CSV dos Planos de Contratação por Órgão e Ano
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retornarPlanosTodasUnidadesDoOrgaoCsv'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retornarPlanosTodasUnidadesDoOrgaoCsvAsyncWithHttpInfo($cnpj, $ano, string $contentType = self::contentTypes['retornarPlanosTodasUnidadesDoOrgaoCsv'][0])
    {
        $returnType = 'string[]';
        $request = $this->retornarPlanosTodasUnidadesDoOrgaoCsvRequest($cnpj, $ano, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retornarPlanosTodasUnidadesDoOrgaoCsv'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retornarPlanosTodasUnidadesDoOrgaoCsv'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retornarPlanosTodasUnidadesDoOrgaoCsvRequest($cnpj, $ano, string $contentType = self::contentTypes['retornarPlanosTodasUnidadesDoOrgaoCsv'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling retornarPlanosTodasUnidadesDoOrgaoCsv'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling retornarPlanosTodasUnidadesDoOrgaoCsv'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/pca/{ano}/csv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
