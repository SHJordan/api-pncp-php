<?php
/**
 * ContratoApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API PNCP
 *
 * API REST de serviços do Portal Nacional de Contratações Públicas (PNCP)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: css.serpro@serpro.gov.br
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ContratoApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ContratoApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'consultarContrato' => [
            'application/json',
        ],
        'consultarContrato1' => [
            'application/json',
        ],
        'consultarContrato2' => [
            'application/json',
        ],
        'consultarContratosContratacao' => [
            'application/json',
        ],
        'inserirArquivo1' => [
            'multipart/form-data',
        ],
        'inserirContrato' => [
            'application/json',
        ],
        'recuperarArquivo1' => [
            'application/json',
        ],
        'recuperarContratoDocumentoQuantidade' => [
            'application/json',
        ],
        'recuperarInformacoesDocumentosContrato' => [
            'application/json',
        ],
        'removerContrato' => [
            'application/json',
        ],
        'removerDocumentoContrato1' => [
            'application/json',
        ],
        'retificarContrato' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation consultarContrato
     *
     * Consultar Contrato
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarContrato'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarContratoDTO
     */
    public function consultarContrato($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarContrato'][0])
    {
        list($response) = $this->consultarContratoWithHttpInfo($cnpj, $ano, $sequencial, $contentType);
        return $response;
    }

    /**
     * Operation consultarContratoWithHttpInfo
     *
     * Consultar Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarContrato'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarContratoDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarContratoWithHttpInfo($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarContrato'][0])
    {
        $request = $this->consultarContratoRequest($cnpj, $ano, $sequencial, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\RecuperarContratoDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RecuperarContratoDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RecuperarContratoDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RecuperarContratoDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RecuperarContratoDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarContratoAsync
     *
     * Consultar Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarContrato'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarContratoAsync($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarContrato'][0])
    {
        return $this->consultarContratoAsyncWithHttpInfo($cnpj, $ano, $sequencial, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarContratoAsyncWithHttpInfo
     *
     * Consultar Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarContrato'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarContratoAsyncWithHttpInfo($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarContrato'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RecuperarContratoDTO';
        $request = $this->consultarContratoRequest($cnpj, $ano, $sequencial, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarContrato'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarContrato'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarContratoRequest($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarContrato'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling consultarContrato'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling consultarContrato'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling consultarContrato'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling ContratoApi.consultarContrato, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v1/orgaos/{cnpj}/contratos/{ano}/{sequencial}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarContrato1
     *
     * Consultar Histórico de Contrato
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $pagina pagina (optional)
     * @param  int $tamanho_pagina tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarContrato1'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarHistoricoContratoDTO[]
     */
    public function consultarContrato1($cnpj, $ano, $sequencial, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['consultarContrato1'][0])
    {
        list($response) = $this->consultarContrato1WithHttpInfo($cnpj, $ano, $sequencial, $pagina, $tamanho_pagina, $contentType);
        return $response;
    }

    /**
     * Operation consultarContrato1WithHttpInfo
     *
     * Consultar Histórico de Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarContrato1'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarHistoricoContratoDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarContrato1WithHttpInfo($cnpj, $ano, $sequencial, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['consultarContrato1'][0])
    {
        $request = $this->consultarContrato1Request($cnpj, $ano, $sequencial, $pagina, $tamanho_pagina, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\RecuperarHistoricoContratoDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RecuperarHistoricoContratoDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RecuperarHistoricoContratoDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RecuperarHistoricoContratoDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RecuperarHistoricoContratoDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarContrato1Async
     *
     * Consultar Histórico de Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarContrato1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarContrato1Async($cnpj, $ano, $sequencial, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['consultarContrato1'][0])
    {
        return $this->consultarContrato1AsyncWithHttpInfo($cnpj, $ano, $sequencial, $pagina, $tamanho_pagina, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarContrato1AsyncWithHttpInfo
     *
     * Consultar Histórico de Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarContrato1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarContrato1AsyncWithHttpInfo($cnpj, $ano, $sequencial, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['consultarContrato1'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RecuperarHistoricoContratoDTO[]';
        $request = $this->consultarContrato1Request($cnpj, $ano, $sequencial, $pagina, $tamanho_pagina, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarContrato1'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarContrato1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarContrato1Request($cnpj, $ano, $sequencial, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['consultarContrato1'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling consultarContrato1'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling consultarContrato1'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling consultarContrato1'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling ContratoApi.consultarContrato1, must be bigger than or equal to 1.');
        }
        
        if ($pagina !== null && $pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$pagina" when calling ContratoApi.consultarContrato1, must be bigger than or equal to 1.');
        }
        
        if ($tamanho_pagina !== null && $tamanho_pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$tamanho_pagina" when calling ContratoApi.consultarContrato1, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v1/orgaos/{cnpj}/contratos/{ano}/{sequencial}/historico';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tamanho_pagina,
            'tamanhoPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarContrato2
     *
     * Consultar Quantidade Histórico de Contrato
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarContrato2'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|int
     */
    public function consultarContrato2($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarContrato2'][0])
    {
        list($response) = $this->consultarContrato2WithHttpInfo($cnpj, $ano, $sequencial, $contentType);
        return $response;
    }

    /**
     * Operation consultarContrato2WithHttpInfo
     *
     * Consultar Quantidade Histórico de Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarContrato2'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|int, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarContrato2WithHttpInfo($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarContrato2'][0])
    {
        $request = $this->consultarContrato2Request($cnpj, $ano, $sequencial, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarContrato2Async
     *
     * Consultar Quantidade Histórico de Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarContrato2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarContrato2Async($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarContrato2'][0])
    {
        return $this->consultarContrato2AsyncWithHttpInfo($cnpj, $ano, $sequencial, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarContrato2AsyncWithHttpInfo
     *
     * Consultar Quantidade Histórico de Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarContrato2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarContrato2AsyncWithHttpInfo($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarContrato2'][0])
    {
        $returnType = 'int';
        $request = $this->consultarContrato2Request($cnpj, $ano, $sequencial, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarContrato2'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarContrato2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarContrato2Request($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarContrato2'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling consultarContrato2'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling consultarContrato2'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling consultarContrato2'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling ContratoApi.consultarContrato2, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v1/orgaos/{cnpj}/contratos/{ano}/{sequencial}/historico/quantidade';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarContratosContratacao
     *
     * Consultar Contratos de uma Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano_contratacao ano_contratacao (required)
     * @param  int $sequencial_contratacao sequencial_contratacao (required)
     * @param  int $pagina pagina (required)
     * @param  int $tamanho_pagina tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarContratosContratacao'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\PaginaRetornoRecuperarContratoDTO
     */
    public function consultarContratosContratacao($cnpj, $ano_contratacao, $sequencial_contratacao, $pagina, $tamanho_pagina = null, string $contentType = self::contentTypes['consultarContratosContratacao'][0])
    {
        list($response) = $this->consultarContratosContratacaoWithHttpInfo($cnpj, $ano_contratacao, $sequencial_contratacao, $pagina, $tamanho_pagina, $contentType);
        return $response;
    }

    /**
     * Operation consultarContratosContratacaoWithHttpInfo
     *
     * Consultar Contratos de uma Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano_contratacao (required)
     * @param  int $sequencial_contratacao (required)
     * @param  int $pagina (required)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarContratosContratacao'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\PaginaRetornoRecuperarContratoDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarContratosContratacaoWithHttpInfo($cnpj, $ano_contratacao, $sequencial_contratacao, $pagina, $tamanho_pagina = null, string $contentType = self::contentTypes['consultarContratosContratacao'][0])
    {
        $request = $this->consultarContratosContratacaoRequest($cnpj, $ano_contratacao, $sequencial_contratacao, $pagina, $tamanho_pagina, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\PaginaRetornoRecuperarContratoDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PaginaRetornoRecuperarContratoDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PaginaRetornoRecuperarContratoDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PaginaRetornoRecuperarContratoDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PaginaRetornoRecuperarContratoDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarContratosContratacaoAsync
     *
     * Consultar Contratos de uma Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano_contratacao (required)
     * @param  int $sequencial_contratacao (required)
     * @param  int $pagina (required)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarContratosContratacao'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarContratosContratacaoAsync($cnpj, $ano_contratacao, $sequencial_contratacao, $pagina, $tamanho_pagina = null, string $contentType = self::contentTypes['consultarContratosContratacao'][0])
    {
        return $this->consultarContratosContratacaoAsyncWithHttpInfo($cnpj, $ano_contratacao, $sequencial_contratacao, $pagina, $tamanho_pagina, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarContratosContratacaoAsyncWithHttpInfo
     *
     * Consultar Contratos de uma Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano_contratacao (required)
     * @param  int $sequencial_contratacao (required)
     * @param  int $pagina (required)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarContratosContratacao'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarContratosContratacaoAsyncWithHttpInfo($cnpj, $ano_contratacao, $sequencial_contratacao, $pagina, $tamanho_pagina = null, string $contentType = self::contentTypes['consultarContratosContratacao'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PaginaRetornoRecuperarContratoDTO';
        $request = $this->consultarContratosContratacaoRequest($cnpj, $ano_contratacao, $sequencial_contratacao, $pagina, $tamanho_pagina, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarContratosContratacao'
     *
     * @param  string $cnpj (required)
     * @param  int $ano_contratacao (required)
     * @param  int $sequencial_contratacao (required)
     * @param  int $pagina (required)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarContratosContratacao'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarContratosContratacaoRequest($cnpj, $ano_contratacao, $sequencial_contratacao, $pagina, $tamanho_pagina = null, string $contentType = self::contentTypes['consultarContratosContratacao'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling consultarContratosContratacao'
            );
        }

        // verify the required parameter 'ano_contratacao' is set
        if ($ano_contratacao === null || (is_array($ano_contratacao) && count($ano_contratacao) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano_contratacao when calling consultarContratosContratacao'
            );
        }

        // verify the required parameter 'sequencial_contratacao' is set
        if ($sequencial_contratacao === null || (is_array($sequencial_contratacao) && count($sequencial_contratacao) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_contratacao when calling consultarContratosContratacao'
            );
        }
        if ($sequencial_contratacao < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial_contratacao" when calling ContratoApi.consultarContratosContratacao, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'pagina' is set
        if ($pagina === null || (is_array($pagina) && count($pagina) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pagina when calling consultarContratosContratacao'
            );
        }
        if ($pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$pagina" when calling ContratoApi.consultarContratosContratacao, must be bigger than or equal to 1.');
        }
        
        if ($tamanho_pagina !== null && $tamanho_pagina > 50) {
            throw new \InvalidArgumentException('invalid value for "$tamanho_pagina" when calling ContratoApi.consultarContratosContratacao, must be smaller than or equal to 50.');
        }
        if ($tamanho_pagina !== null && $tamanho_pagina < 10) {
            throw new \InvalidArgumentException('invalid value for "$tamanho_pagina" when calling ContratoApi.consultarContratosContratacao, must be bigger than or equal to 10.');
        }
        

        $resourcePath = '/v1/orgaos/{cnpj}/contratos/contratacao/{anoContratacao}/{sequencialContratacao}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tamanho_pagina,
            'tamanhoPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano_contratacao !== null) {
            $resourcePath = str_replace(
                '{' . 'anoContratacao' . '}',
                ObjectSerializer::toPathValue($ano_contratacao),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_contratacao !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialContratacao' . '}',
                ObjectSerializer::toPathValue($sequencial_contratacao),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inserirArquivo1
     *
     * Inserir Documento de Contrato
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  string $titulo_documento titulo_documento (required)
     * @param  int $tipo_documento_id tipo_documento_id (required)
     * @param  \SplFileObject $arquivo arquivo (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirArquivo1'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object
     */
    public function inserirArquivo1($cnpj, $ano, $sequencial, $titulo_documento, $tipo_documento_id, $arquivo, string $contentType = self::contentTypes['inserirArquivo1'][0])
    {
        list($response) = $this->inserirArquivo1WithHttpInfo($cnpj, $ano, $sequencial, $titulo_documento, $tipo_documento_id, $arquivo, $contentType);
        return $response;
    }

    /**
     * Operation inserirArquivo1WithHttpInfo
     *
     * Inserir Documento de Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $titulo_documento (required)
     * @param  int $tipo_documento_id (required)
     * @param  \SplFileObject $arquivo (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirArquivo1'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function inserirArquivo1WithHttpInfo($cnpj, $ano, $sequencial, $titulo_documento, $tipo_documento_id, $arquivo, string $contentType = self::contentTypes['inserirArquivo1'][0])
    {
        $request = $this->inserirArquivo1Request($cnpj, $ano, $sequencial, $titulo_documento, $tipo_documento_id, $arquivo, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inserirArquivo1Async
     *
     * Inserir Documento de Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $titulo_documento (required)
     * @param  int $tipo_documento_id (required)
     * @param  \SplFileObject $arquivo (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirArquivo1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inserirArquivo1Async($cnpj, $ano, $sequencial, $titulo_documento, $tipo_documento_id, $arquivo, string $contentType = self::contentTypes['inserirArquivo1'][0])
    {
        return $this->inserirArquivo1AsyncWithHttpInfo($cnpj, $ano, $sequencial, $titulo_documento, $tipo_documento_id, $arquivo, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inserirArquivo1AsyncWithHttpInfo
     *
     * Inserir Documento de Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $titulo_documento (required)
     * @param  int $tipo_documento_id (required)
     * @param  \SplFileObject $arquivo (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirArquivo1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inserirArquivo1AsyncWithHttpInfo($cnpj, $ano, $sequencial, $titulo_documento, $tipo_documento_id, $arquivo, string $contentType = self::contentTypes['inserirArquivo1'][0])
    {
        $returnType = 'object';
        $request = $this->inserirArquivo1Request($cnpj, $ano, $sequencial, $titulo_documento, $tipo_documento_id, $arquivo, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inserirArquivo1'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $titulo_documento (required)
     * @param  int $tipo_documento_id (required)
     * @param  \SplFileObject $arquivo (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirArquivo1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function inserirArquivo1Request($cnpj, $ano, $sequencial, $titulo_documento, $tipo_documento_id, $arquivo, string $contentType = self::contentTypes['inserirArquivo1'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling inserirArquivo1'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling inserirArquivo1'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling inserirArquivo1'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling ContratoApi.inserirArquivo1, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'titulo_documento' is set
        if ($titulo_documento === null || (is_array($titulo_documento) && count($titulo_documento) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $titulo_documento when calling inserirArquivo1'
            );
        }
        if (strlen($titulo_documento) > 255) {
            throw new \InvalidArgumentException('invalid length for "$titulo_documento" when calling ContratoApi.inserirArquivo1, must be smaller than or equal to 255.');
        }
        if (strlen($titulo_documento) < 0) {
            throw new \InvalidArgumentException('invalid length for "$titulo_documento" when calling ContratoApi.inserirArquivo1, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'tipo_documento_id' is set
        if ($tipo_documento_id === null || (is_array($tipo_documento_id) && count($tipo_documento_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tipo_documento_id when calling inserirArquivo1'
            );
        }
        if ($tipo_documento_id > 18) {
            throw new \InvalidArgumentException('invalid value for "$tipo_documento_id" when calling ContratoApi.inserirArquivo1, must be smaller than or equal to 18.');
        }
        if ($tipo_documento_id < 12) {
            throw new \InvalidArgumentException('invalid value for "$tipo_documento_id" when calling ContratoApi.inserirArquivo1, must be bigger than or equal to 12.');
        }
        
        // verify the required parameter 'arquivo' is set
        if ($arquivo === null || (is_array($arquivo) && count($arquivo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $arquivo when calling inserirArquivo1'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/contratos/{ano}/{sequencial}/arquivos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($titulo_documento !== null) {
            $headerParams['Titulo-Documento'] = ObjectSerializer::toHeaderValue($titulo_documento);
        }
        // header params
        if ($tipo_documento_id !== null) {
            $headerParams['Tipo-Documento-Id'] = ObjectSerializer::toHeaderValue($tipo_documento_id);
        }

        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }

        // form params
        if ($arquivo !== null) {
            $multipart = true;
            $formParams['arquivo'] = [];
            $paramFiles = is_array($arquivo) ? $arquivo : [$arquivo];
            foreach ($paramFiles as $paramFile) {
                $formParams['arquivo'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inserirContrato
     *
     * Inserir Contrato
     *
     * @param  string $cnpj cnpj (required)
     * @param  \OpenAPI\Client\Model\IncluirContratoDTO $incluir_contrato_dto incluir_contrato_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirContrato'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object
     */
    public function inserirContrato($cnpj, $incluir_contrato_dto, string $contentType = self::contentTypes['inserirContrato'][0])
    {
        list($response) = $this->inserirContratoWithHttpInfo($cnpj, $incluir_contrato_dto, $contentType);
        return $response;
    }

    /**
     * Operation inserirContratoWithHttpInfo
     *
     * Inserir Contrato
     *
     * @param  string $cnpj (required)
     * @param  \OpenAPI\Client\Model\IncluirContratoDTO $incluir_contrato_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirContrato'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function inserirContratoWithHttpInfo($cnpj, $incluir_contrato_dto, string $contentType = self::contentTypes['inserirContrato'][0])
    {
        $request = $this->inserirContratoRequest($cnpj, $incluir_contrato_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inserirContratoAsync
     *
     * Inserir Contrato
     *
     * @param  string $cnpj (required)
     * @param  \OpenAPI\Client\Model\IncluirContratoDTO $incluir_contrato_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirContrato'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inserirContratoAsync($cnpj, $incluir_contrato_dto, string $contentType = self::contentTypes['inserirContrato'][0])
    {
        return $this->inserirContratoAsyncWithHttpInfo($cnpj, $incluir_contrato_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inserirContratoAsyncWithHttpInfo
     *
     * Inserir Contrato
     *
     * @param  string $cnpj (required)
     * @param  \OpenAPI\Client\Model\IncluirContratoDTO $incluir_contrato_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirContrato'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inserirContratoAsyncWithHttpInfo($cnpj, $incluir_contrato_dto, string $contentType = self::contentTypes['inserirContrato'][0])
    {
        $returnType = 'object';
        $request = $this->inserirContratoRequest($cnpj, $incluir_contrato_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inserirContrato'
     *
     * @param  string $cnpj (required)
     * @param  \OpenAPI\Client\Model\IncluirContratoDTO $incluir_contrato_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirContrato'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function inserirContratoRequest($cnpj, $incluir_contrato_dto, string $contentType = self::contentTypes['inserirContrato'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling inserirContrato'
            );
        }

        // verify the required parameter 'incluir_contrato_dto' is set
        if ($incluir_contrato_dto === null || (is_array($incluir_contrato_dto) && count($incluir_contrato_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $incluir_contrato_dto when calling inserirContrato'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/contratos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($incluir_contrato_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($incluir_contrato_dto));
            } else {
                $httpBody = $incluir_contrato_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recuperarArquivo1
     *
     * Baixar Documento de Contrato
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $sequencial_documento sequencial_documento (required)
     * @param  bool $ignorar_exclusao ignorar_exclusao (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarArquivo1'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\SplFileObject
     */
    public function recuperarArquivo1($cnpj, $ano, $sequencial, $sequencial_documento, $ignorar_exclusao = null, string $contentType = self::contentTypes['recuperarArquivo1'][0])
    {
        list($response) = $this->recuperarArquivo1WithHttpInfo($cnpj, $ano, $sequencial, $sequencial_documento, $ignorar_exclusao, $contentType);
        return $response;
    }

    /**
     * Operation recuperarArquivo1WithHttpInfo
     *
     * Baixar Documento de Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $sequencial_documento (required)
     * @param  bool $ignorar_exclusao (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarArquivo1'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function recuperarArquivo1WithHttpInfo($cnpj, $ano, $sequencial, $sequencial_documento, $ignorar_exclusao = null, string $contentType = self::contentTypes['recuperarArquivo1'][0])
    {
        $request = $this->recuperarArquivo1Request($cnpj, $ano, $sequencial, $sequencial_documento, $ignorar_exclusao, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recuperarArquivo1Async
     *
     * Baixar Documento de Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $sequencial_documento (required)
     * @param  bool $ignorar_exclusao (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarArquivo1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarArquivo1Async($cnpj, $ano, $sequencial, $sequencial_documento, $ignorar_exclusao = null, string $contentType = self::contentTypes['recuperarArquivo1'][0])
    {
        return $this->recuperarArquivo1AsyncWithHttpInfo($cnpj, $ano, $sequencial, $sequencial_documento, $ignorar_exclusao, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recuperarArquivo1AsyncWithHttpInfo
     *
     * Baixar Documento de Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $sequencial_documento (required)
     * @param  bool $ignorar_exclusao (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarArquivo1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarArquivo1AsyncWithHttpInfo($cnpj, $ano, $sequencial, $sequencial_documento, $ignorar_exclusao = null, string $contentType = self::contentTypes['recuperarArquivo1'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->recuperarArquivo1Request($cnpj, $ano, $sequencial, $sequencial_documento, $ignorar_exclusao, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recuperarArquivo1'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $sequencial_documento (required)
     * @param  bool $ignorar_exclusao (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarArquivo1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recuperarArquivo1Request($cnpj, $ano, $sequencial, $sequencial_documento, $ignorar_exclusao = null, string $contentType = self::contentTypes['recuperarArquivo1'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling recuperarArquivo1'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling recuperarArquivo1'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling recuperarArquivo1'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling ContratoApi.recuperarArquivo1, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'sequencial_documento' is set
        if ($sequencial_documento === null || (is_array($sequencial_documento) && count($sequencial_documento) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_documento when calling recuperarArquivo1'
            );
        }
        if ($sequencial_documento < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial_documento" when calling ContratoApi.recuperarArquivo1, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v1/orgaos/{cnpj}/contratos/{ano}/{sequencial}/arquivos/{sequencialDocumento}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ignorar_exclusao,
            'ignorarExclusao', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_documento !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialDocumento' . '}',
                ObjectSerializer::toPathValue($sequencial_documento),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recuperarContratoDocumentoQuantidade
     *
     * Consultar Quantidade de Documentos de Contrato
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarContratoDocumentoQuantidade'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|int
     */
    public function recuperarContratoDocumentoQuantidade($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['recuperarContratoDocumentoQuantidade'][0])
    {
        list($response) = $this->recuperarContratoDocumentoQuantidadeWithHttpInfo($cnpj, $ano, $sequencial, $contentType);
        return $response;
    }

    /**
     * Operation recuperarContratoDocumentoQuantidadeWithHttpInfo
     *
     * Consultar Quantidade de Documentos de Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarContratoDocumentoQuantidade'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|int, HTTP status code, HTTP response headers (array of strings)
     */
    public function recuperarContratoDocumentoQuantidadeWithHttpInfo($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['recuperarContratoDocumentoQuantidade'][0])
    {
        $request = $this->recuperarContratoDocumentoQuantidadeRequest($cnpj, $ano, $sequencial, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recuperarContratoDocumentoQuantidadeAsync
     *
     * Consultar Quantidade de Documentos de Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarContratoDocumentoQuantidade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarContratoDocumentoQuantidadeAsync($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['recuperarContratoDocumentoQuantidade'][0])
    {
        return $this->recuperarContratoDocumentoQuantidadeAsyncWithHttpInfo($cnpj, $ano, $sequencial, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recuperarContratoDocumentoQuantidadeAsyncWithHttpInfo
     *
     * Consultar Quantidade de Documentos de Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarContratoDocumentoQuantidade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarContratoDocumentoQuantidadeAsyncWithHttpInfo($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['recuperarContratoDocumentoQuantidade'][0])
    {
        $returnType = 'int';
        $request = $this->recuperarContratoDocumentoQuantidadeRequest($cnpj, $ano, $sequencial, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recuperarContratoDocumentoQuantidade'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarContratoDocumentoQuantidade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recuperarContratoDocumentoQuantidadeRequest($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['recuperarContratoDocumentoQuantidade'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling recuperarContratoDocumentoQuantidade'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling recuperarContratoDocumentoQuantidade'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling recuperarContratoDocumentoQuantidade'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/contratos/{ano}/{sequencial}/arquivos/quantidade';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recuperarInformacoesDocumentosContrato
     *
     * Consultar Documentos de Contrato
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $pagina pagina (optional)
     * @param  int $tamanho_pagina tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarInformacoesDocumentosContrato'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarDadosDocumentoContratoDTO[]
     */
    public function recuperarInformacoesDocumentosContrato($cnpj, $ano, $sequencial, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarInformacoesDocumentosContrato'][0])
    {
        list($response) = $this->recuperarInformacoesDocumentosContratoWithHttpInfo($cnpj, $ano, $sequencial, $pagina, $tamanho_pagina, $contentType);
        return $response;
    }

    /**
     * Operation recuperarInformacoesDocumentosContratoWithHttpInfo
     *
     * Consultar Documentos de Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarInformacoesDocumentosContrato'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarDadosDocumentoContratoDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function recuperarInformacoesDocumentosContratoWithHttpInfo($cnpj, $ano, $sequencial, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarInformacoesDocumentosContrato'][0])
    {
        $request = $this->recuperarInformacoesDocumentosContratoRequest($cnpj, $ano, $sequencial, $pagina, $tamanho_pagina, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\RecuperarDadosDocumentoContratoDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RecuperarDadosDocumentoContratoDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RecuperarDadosDocumentoContratoDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RecuperarDadosDocumentoContratoDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RecuperarDadosDocumentoContratoDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recuperarInformacoesDocumentosContratoAsync
     *
     * Consultar Documentos de Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarInformacoesDocumentosContrato'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarInformacoesDocumentosContratoAsync($cnpj, $ano, $sequencial, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarInformacoesDocumentosContrato'][0])
    {
        return $this->recuperarInformacoesDocumentosContratoAsyncWithHttpInfo($cnpj, $ano, $sequencial, $pagina, $tamanho_pagina, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recuperarInformacoesDocumentosContratoAsyncWithHttpInfo
     *
     * Consultar Documentos de Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarInformacoesDocumentosContrato'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarInformacoesDocumentosContratoAsyncWithHttpInfo($cnpj, $ano, $sequencial, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarInformacoesDocumentosContrato'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RecuperarDadosDocumentoContratoDTO[]';
        $request = $this->recuperarInformacoesDocumentosContratoRequest($cnpj, $ano, $sequencial, $pagina, $tamanho_pagina, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recuperarInformacoesDocumentosContrato'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarInformacoesDocumentosContrato'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recuperarInformacoesDocumentosContratoRequest($cnpj, $ano, $sequencial, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarInformacoesDocumentosContrato'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling recuperarInformacoesDocumentosContrato'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling recuperarInformacoesDocumentosContrato'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling recuperarInformacoesDocumentosContrato'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling ContratoApi.recuperarInformacoesDocumentosContrato, must be bigger than or equal to 1.');
        }
        
        if ($pagina !== null && $pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$pagina" when calling ContratoApi.recuperarInformacoesDocumentosContrato, must be bigger than or equal to 1.');
        }
        
        if ($tamanho_pagina !== null && $tamanho_pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$tamanho_pagina" when calling ContratoApi.recuperarInformacoesDocumentosContrato, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v1/orgaos/{cnpj}/contratos/{ano}/{sequencial}/arquivos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tamanho_pagina,
            'tamanhoPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removerContrato
     *
     * Excluir Contrato
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerContrato'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removerContrato($cnpj, $ano, $sequencial, $exclusao_dto = null, string $contentType = self::contentTypes['removerContrato'][0])
    {
        $this->removerContratoWithHttpInfo($cnpj, $ano, $sequencial, $exclusao_dto, $contentType);
    }

    /**
     * Operation removerContratoWithHttpInfo
     *
     * Excluir Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerContrato'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removerContratoWithHttpInfo($cnpj, $ano, $sequencial, $exclusao_dto = null, string $contentType = self::contentTypes['removerContrato'][0])
    {
        $request = $this->removerContratoRequest($cnpj, $ano, $sequencial, $exclusao_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removerContratoAsync
     *
     * Excluir Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerContrato'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removerContratoAsync($cnpj, $ano, $sequencial, $exclusao_dto = null, string $contentType = self::contentTypes['removerContrato'][0])
    {
        return $this->removerContratoAsyncWithHttpInfo($cnpj, $ano, $sequencial, $exclusao_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removerContratoAsyncWithHttpInfo
     *
     * Excluir Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerContrato'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removerContratoAsyncWithHttpInfo($cnpj, $ano, $sequencial, $exclusao_dto = null, string $contentType = self::contentTypes['removerContrato'][0])
    {
        $returnType = '';
        $request = $this->removerContratoRequest($cnpj, $ano, $sequencial, $exclusao_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removerContrato'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerContrato'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removerContratoRequest($cnpj, $ano, $sequencial, $exclusao_dto = null, string $contentType = self::contentTypes['removerContrato'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling removerContrato'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling removerContrato'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling removerContrato'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling ContratoApi.removerContrato, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v1/orgaos/{cnpj}/contratos/{ano}/{sequencial}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($exclusao_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($exclusao_dto));
            } else {
                $httpBody = $exclusao_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removerDocumentoContrato1
     *
     * Excluir Documento de Contrato
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $sequencial_documento sequencial_documento (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto exclusao_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerDocumentoContrato1'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removerDocumentoContrato1($cnpj, $ano, $sequencial, $sequencial_documento, $exclusao_dto, string $contentType = self::contentTypes['removerDocumentoContrato1'][0])
    {
        $this->removerDocumentoContrato1WithHttpInfo($cnpj, $ano, $sequencial, $sequencial_documento, $exclusao_dto, $contentType);
    }

    /**
     * Operation removerDocumentoContrato1WithHttpInfo
     *
     * Excluir Documento de Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $sequencial_documento (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerDocumentoContrato1'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removerDocumentoContrato1WithHttpInfo($cnpj, $ano, $sequencial, $sequencial_documento, $exclusao_dto, string $contentType = self::contentTypes['removerDocumentoContrato1'][0])
    {
        $request = $this->removerDocumentoContrato1Request($cnpj, $ano, $sequencial, $sequencial_documento, $exclusao_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removerDocumentoContrato1Async
     *
     * Excluir Documento de Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $sequencial_documento (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerDocumentoContrato1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removerDocumentoContrato1Async($cnpj, $ano, $sequencial, $sequencial_documento, $exclusao_dto, string $contentType = self::contentTypes['removerDocumentoContrato1'][0])
    {
        return $this->removerDocumentoContrato1AsyncWithHttpInfo($cnpj, $ano, $sequencial, $sequencial_documento, $exclusao_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removerDocumentoContrato1AsyncWithHttpInfo
     *
     * Excluir Documento de Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $sequencial_documento (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerDocumentoContrato1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removerDocumentoContrato1AsyncWithHttpInfo($cnpj, $ano, $sequencial, $sequencial_documento, $exclusao_dto, string $contentType = self::contentTypes['removerDocumentoContrato1'][0])
    {
        $returnType = '';
        $request = $this->removerDocumentoContrato1Request($cnpj, $ano, $sequencial, $sequencial_documento, $exclusao_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removerDocumentoContrato1'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $sequencial_documento (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerDocumentoContrato1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removerDocumentoContrato1Request($cnpj, $ano, $sequencial, $sequencial_documento, $exclusao_dto, string $contentType = self::contentTypes['removerDocumentoContrato1'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling removerDocumentoContrato1'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling removerDocumentoContrato1'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling removerDocumentoContrato1'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling ContratoApi.removerDocumentoContrato1, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'sequencial_documento' is set
        if ($sequencial_documento === null || (is_array($sequencial_documento) && count($sequencial_documento) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_documento when calling removerDocumentoContrato1'
            );
        }
        if ($sequencial_documento < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial_documento" when calling ContratoApi.removerDocumentoContrato1, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'exclusao_dto' is set
        if ($exclusao_dto === null || (is_array($exclusao_dto) && count($exclusao_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exclusao_dto when calling removerDocumentoContrato1'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/contratos/{ano}/{sequencial}/arquivos/{sequencialDocumento}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_documento !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialDocumento' . '}',
                ObjectSerializer::toPathValue($sequencial_documento),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($exclusao_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($exclusao_dto));
            } else {
                $httpBody = $exclusao_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retificarContrato
     *
     * Retificar Contrato
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  \OpenAPI\Client\Model\AlterarContratoDTO $alterar_contrato_dto alterar_contrato_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarContrato'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object
     */
    public function retificarContrato($cnpj, $ano, $sequencial, $alterar_contrato_dto, string $contentType = self::contentTypes['retificarContrato'][0])
    {
        list($response) = $this->retificarContratoWithHttpInfo($cnpj, $ano, $sequencial, $alterar_contrato_dto, $contentType);
        return $response;
    }

    /**
     * Operation retificarContratoWithHttpInfo
     *
     * Retificar Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\AlterarContratoDTO $alterar_contrato_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarContrato'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function retificarContratoWithHttpInfo($cnpj, $ano, $sequencial, $alterar_contrato_dto, string $contentType = self::contentTypes['retificarContrato'][0])
    {
        $request = $this->retificarContratoRequest($cnpj, $ano, $sequencial, $alterar_contrato_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retificarContratoAsync
     *
     * Retificar Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\AlterarContratoDTO $alterar_contrato_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarContrato'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retificarContratoAsync($cnpj, $ano, $sequencial, $alterar_contrato_dto, string $contentType = self::contentTypes['retificarContrato'][0])
    {
        return $this->retificarContratoAsyncWithHttpInfo($cnpj, $ano, $sequencial, $alterar_contrato_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retificarContratoAsyncWithHttpInfo
     *
     * Retificar Contrato
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\AlterarContratoDTO $alterar_contrato_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarContrato'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retificarContratoAsyncWithHttpInfo($cnpj, $ano, $sequencial, $alterar_contrato_dto, string $contentType = self::contentTypes['retificarContrato'][0])
    {
        $returnType = 'object';
        $request = $this->retificarContratoRequest($cnpj, $ano, $sequencial, $alterar_contrato_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retificarContrato'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\AlterarContratoDTO $alterar_contrato_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarContrato'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retificarContratoRequest($cnpj, $ano, $sequencial, $alterar_contrato_dto, string $contentType = self::contentTypes['retificarContrato'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling retificarContrato'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling retificarContrato'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling retificarContrato'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling ContratoApi.retificarContrato, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'alterar_contrato_dto' is set
        if ($alterar_contrato_dto === null || (is_array($alterar_contrato_dto) && count($alterar_contrato_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alterar_contrato_dto when calling retificarContrato'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/contratos/{ano}/{sequencial}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($alterar_contrato_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($alterar_contrato_dto));
            } else {
                $httpBody = $alterar_contrato_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
