<?php
/**
 * ContrataoApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API PNCP
 *
 * API REST de serviços do Portal Nacional de Contratações Públicas (PNCP)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: css.serpro@serpro.gov.br
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ContrataoApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ContrataoApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'consultarCompra' => [
            'application/json',
        ],
        'consultarCompra1' => [
            'application/json',
        ],
        'consultarQuantidade' => [
            'application/json',
        ],
        'getImagem' => [
            'application/json',
        ],
        'getImagemLista' => [
            'application/json',
        ],
        'incluirCompra' => [
            'multipart/form-data',
        ],
        'incluirCompraItem' => [
            'application/json',
        ],
        'incluirCompraItemResultado' => [
            'application/json',
        ],
        'inserirArquivo2' => [
            'multipart/form-data',
        ],
        'inserirImagem' => [
            'multipart/form-data',
        ],
        'pesquisarCompraItem' => [
            'application/json',
        ],
        'recuperarArquivo2' => [
            'application/json',
        ],
        'recuperarCompraDocumentoQuantidade' => [
            'application/json',
        ],
        'recuperarCompraItem' => [
            'application/json',
        ],
        'recuperarCompraItemQuantidade' => [
            'application/json',
        ],
        'recuperarInformacoesDocumentosCompra' => [
            'application/json',
        ],
        'recuperarResultado' => [
            'application/json',
        ],
        'recuperarResultados' => [
            'application/json',
        ],
        'removerCompra' => [
            'application/json',
        ],
        'removerDocumentoCompra' => [
            'application/json',
        ],
        'removerImagem' => [
            'application/json',
        ],
        'retificarCompra' => [
            'application/json',
        ],
        'retificarCompraItem' => [
            'application/json',
        ],
        'retificarCompraItemResultado' => [
            'application/json',
        ],
        'retificarParcialmenteCompra' => [
            'application/json',
        ],
        'retificarParcialmenteCompraItem' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation consultarCompra
     *
     * Consultar Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCompra'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarCompraDTO
     */
    public function consultarCompra($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarCompra'][0])
    {
        list($response) = $this->consultarCompraWithHttpInfo($cnpj, $ano, $sequencial, $contentType);
        return $response;
    }

    /**
     * Operation consultarCompraWithHttpInfo
     *
     * Consultar Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCompra'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarCompraDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarCompraWithHttpInfo($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarCompra'][0])
    {
        $request = $this->consultarCompraRequest($cnpj, $ano, $sequencial, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\RecuperarCompraDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RecuperarCompraDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RecuperarCompraDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RecuperarCompraDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RecuperarCompraDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarCompraAsync
     *
     * Consultar Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCompra'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarCompraAsync($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarCompra'][0])
    {
        return $this->consultarCompraAsyncWithHttpInfo($cnpj, $ano, $sequencial, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarCompraAsyncWithHttpInfo
     *
     * Consultar Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCompra'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarCompraAsyncWithHttpInfo($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarCompra'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RecuperarCompraDTO';
        $request = $this->consultarCompraRequest($cnpj, $ano, $sequencial, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarCompra'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCompra'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarCompraRequest($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarCompra'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling consultarCompra'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling consultarCompra'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling consultarCompra'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling ContrataoApi.consultarCompra, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarCompra1
     *
     * Consultar Histórico de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $pagina pagina (optional)
     * @param  int $tamanho_pagina tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCompra1'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarHistoricoCompraDTO[]
     */
    public function consultarCompra1($cnpj, $ano, $sequencial, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['consultarCompra1'][0])
    {
        list($response) = $this->consultarCompra1WithHttpInfo($cnpj, $ano, $sequencial, $pagina, $tamanho_pagina, $contentType);
        return $response;
    }

    /**
     * Operation consultarCompra1WithHttpInfo
     *
     * Consultar Histórico de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCompra1'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarHistoricoCompraDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarCompra1WithHttpInfo($cnpj, $ano, $sequencial, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['consultarCompra1'][0])
    {
        $request = $this->consultarCompra1Request($cnpj, $ano, $sequencial, $pagina, $tamanho_pagina, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\RecuperarHistoricoCompraDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RecuperarHistoricoCompraDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RecuperarHistoricoCompraDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RecuperarHistoricoCompraDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RecuperarHistoricoCompraDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarCompra1Async
     *
     * Consultar Histórico de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCompra1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarCompra1Async($cnpj, $ano, $sequencial, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['consultarCompra1'][0])
    {
        return $this->consultarCompra1AsyncWithHttpInfo($cnpj, $ano, $sequencial, $pagina, $tamanho_pagina, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarCompra1AsyncWithHttpInfo
     *
     * Consultar Histórico de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCompra1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarCompra1AsyncWithHttpInfo($cnpj, $ano, $sequencial, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['consultarCompra1'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RecuperarHistoricoCompraDTO[]';
        $request = $this->consultarCompra1Request($cnpj, $ano, $sequencial, $pagina, $tamanho_pagina, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarCompra1'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarCompra1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarCompra1Request($cnpj, $ano, $sequencial, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['consultarCompra1'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling consultarCompra1'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling consultarCompra1'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling consultarCompra1'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling ContrataoApi.consultarCompra1, must be bigger than or equal to 1.');
        }
        
        if ($pagina !== null && $pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$pagina" when calling ContrataoApi.consultarCompra1, must be bigger than or equal to 1.');
        }
        
        if ($tamanho_pagina !== null && $tamanho_pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$tamanho_pagina" when calling ContrataoApi.consultarCompra1, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}/historico';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tamanho_pagina,
            'tamanhoPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarQuantidade
     *
     * Consultar Quantidade Histórico de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarQuantidade'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|int
     */
    public function consultarQuantidade($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarQuantidade'][0])
    {
        list($response) = $this->consultarQuantidadeWithHttpInfo($cnpj, $ano, $sequencial, $contentType);
        return $response;
    }

    /**
     * Operation consultarQuantidadeWithHttpInfo
     *
     * Consultar Quantidade Histórico de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarQuantidade'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|int, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarQuantidadeWithHttpInfo($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarQuantidade'][0])
    {
        $request = $this->consultarQuantidadeRequest($cnpj, $ano, $sequencial, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarQuantidadeAsync
     *
     * Consultar Quantidade Histórico de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarQuantidade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarQuantidadeAsync($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarQuantidade'][0])
    {
        return $this->consultarQuantidadeAsyncWithHttpInfo($cnpj, $ano, $sequencial, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarQuantidadeAsyncWithHttpInfo
     *
     * Consultar Quantidade Histórico de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarQuantidade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarQuantidadeAsyncWithHttpInfo($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarQuantidade'][0])
    {
        $returnType = 'int';
        $request = $this->consultarQuantidadeRequest($cnpj, $ano, $sequencial, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarQuantidade'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarQuantidade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarQuantidadeRequest($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['consultarQuantidade'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling consultarQuantidade'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling consultarQuantidade'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling consultarQuantidade'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling ContrataoApi.consultarQuantidade, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}/historico/quantidade';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getImagem
     *
     * Recuperar Imagem de um Item de uma Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $numero_item numero_item (required)
     * @param  int $sequencial_imagem sequencial_imagem (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImagem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|string[]
     */
    public function getImagem($cnpj, $ano, $sequencial, $numero_item, $sequencial_imagem, string $contentType = self::contentTypes['getImagem'][0])
    {
        list($response) = $this->getImagemWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $sequencial_imagem, $contentType);
        return $response;
    }

    /**
     * Operation getImagemWithHttpInfo
     *
     * Recuperar Imagem de um Item de uma Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  int $sequencial_imagem (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImagem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getImagemWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $sequencial_imagem, string $contentType = self::contentTypes['getImagem'][0])
    {
        $request = $this->getImagemRequest($cnpj, $ano, $sequencial, $numero_item, $sequencial_imagem, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getImagemAsync
     *
     * Recuperar Imagem de um Item de uma Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  int $sequencial_imagem (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImagem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImagemAsync($cnpj, $ano, $sequencial, $numero_item, $sequencial_imagem, string $contentType = self::contentTypes['getImagem'][0])
    {
        return $this->getImagemAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $sequencial_imagem, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getImagemAsyncWithHttpInfo
     *
     * Recuperar Imagem de um Item de uma Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  int $sequencial_imagem (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImagem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImagemAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $sequencial_imagem, string $contentType = self::contentTypes['getImagem'][0])
    {
        $returnType = 'string[]';
        $request = $this->getImagemRequest($cnpj, $ano, $sequencial, $numero_item, $sequencial_imagem, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getImagem'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  int $sequencial_imagem (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImagem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getImagemRequest($cnpj, $ano, $sequencial, $numero_item, $sequencial_imagem, string $contentType = self::contentTypes['getImagem'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling getImagem'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling getImagem'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling getImagem'
            );
        }

        // verify the required parameter 'numero_item' is set
        if ($numero_item === null || (is_array($numero_item) && count($numero_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numero_item when calling getImagem'
            );
        }

        // verify the required parameter 'sequencial_imagem' is set
        if ($sequencial_imagem === null || (is_array($sequencial_imagem) && count($sequencial_imagem) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_imagem when calling getImagem'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}/itens/{numeroItem}/imagem/{sequencialImagem}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }
        // path params
        if ($numero_item !== null) {
            $resourcePath = str_replace(
                '{' . 'numeroItem' . '}',
                ObjectSerializer::toPathValue($numero_item),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_imagem !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialImagem' . '}',
                ObjectSerializer::toPathValue($sequencial_imagem),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getImagemLista
     *
     * Recuperar Imagens de um Item de uma Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $numero_item numero_item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImagemLista'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarImagemContratacaoItemDTO[]
     */
    public function getImagemLista($cnpj, $ano, $sequencial, $numero_item, string $contentType = self::contentTypes['getImagemLista'][0])
    {
        list($response) = $this->getImagemListaWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $contentType);
        return $response;
    }

    /**
     * Operation getImagemListaWithHttpInfo
     *
     * Recuperar Imagens de um Item de uma Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImagemLista'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarImagemContratacaoItemDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getImagemListaWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, string $contentType = self::contentTypes['getImagemLista'][0])
    {
        $request = $this->getImagemListaRequest($cnpj, $ano, $sequencial, $numero_item, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\RecuperarImagemContratacaoItemDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RecuperarImagemContratacaoItemDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RecuperarImagemContratacaoItemDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RecuperarImagemContratacaoItemDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RecuperarImagemContratacaoItemDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getImagemListaAsync
     *
     * Recuperar Imagens de um Item de uma Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImagemLista'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImagemListaAsync($cnpj, $ano, $sequencial, $numero_item, string $contentType = self::contentTypes['getImagemLista'][0])
    {
        return $this->getImagemListaAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getImagemListaAsyncWithHttpInfo
     *
     * Recuperar Imagens de um Item de uma Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImagemLista'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImagemListaAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, string $contentType = self::contentTypes['getImagemLista'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RecuperarImagemContratacaoItemDTO[]';
        $request = $this->getImagemListaRequest($cnpj, $ano, $sequencial, $numero_item, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getImagemLista'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImagemLista'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getImagemListaRequest($cnpj, $ano, $sequencial, $numero_item, string $contentType = self::contentTypes['getImagemLista'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling getImagemLista'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling getImagemLista'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling getImagemLista'
            );
        }

        // verify the required parameter 'numero_item' is set
        if ($numero_item === null || (is_array($numero_item) && count($numero_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numero_item when calling getImagemLista'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}/itens/{numeroItem}/imagem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }
        // path params
        if ($numero_item !== null) {
            $resourcePath = str_replace(
                '{' . 'numeroItem' . '}',
                ObjectSerializer::toPathValue($numero_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation incluirCompra
     *
     * Inserir Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  string $titulo_documento titulo_documento (required)
     * @param  int $tipo_documento_id tipo_documento_id (required)
     * @param  \SplFileObject $compra O arquivo com os dados da compra deve utilizar o formato JSON, conforme o exemplo: {  \\\&quot;anoCompra\\\&quot;: 2021,  \\\&quot;itensCompra\\\&quot;: [    {      \\\&quot;numeroItem\\\&quot;: 1,      \\\&quot;materialOuServico\\\&quot;: \\\&quot;M\\\&quot;,      \\\&quot;tipoBeneficioId\\\&quot;: \\\&quot;1\\\&quot;,      \\\&quot;incentivoProdutivoBasico\\\&quot;: true,      \\\&quot;descricao\\\&quot;: \\\&quot;string\\\&quot;,      \\\&quot;quantidade\\\&quot;: 1,      \\\&quot;unidadeMedida\\\&quot;: \\\&quot;string\\\&quot;,      \\\&quot;valorUnitarioEstimado\\\&quot;: 100.00,      \\\&quot;valorTotal\\\&quot;: 100.00,      \\\&quot;orcamentoSigiloso\\\&quot;: true,      \\\&quot;criterioJulgamentoId\\\&quot;: \\\&quot;1\\\&quot;,      \\\&quot;itemCategoriaId\\\&quot;: 1,      \\\&quot;patrimonio\\\&quot;: \\\&quot;string\\\&quot;,      \\\&quot;codigoRegistroImobiliario\\\&quot;: \\\&quot;string\\\&quot;    }  ],  \\\&quot;tipoInstrumentoConvocatorioId\\\&quot;: \\\&quot;1\\\&quot;,  \\\&quot;modalidadeId\\\&quot;: \\\&quot;1\\\&quot;,  \\\&quot;modoDisputaId\\\&quot;: \\\&quot;1\\\&quot;,  \\\&quot;numeroCompra\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;numeroProcesso\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;objetoCompra\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;informacaoComplementar\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;amparoLegalId\\\&quot;: 1,  \\\&quot;srp\\\&quot;: true,  \\\&quot;dataAberturaProposta\\\&quot;: \\\&quot;2022-01-18T14:30:01\\\&quot;,  \\\&quot;dataEncerramentoProposta\\\&quot;: \\\&quot;2022-01-18T14:30:01\\\&quot;,  \\\&quot;codigoUnidadeCompradora\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;linkSistemaOrigem\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;justificativaPresencial\\\&quot;: \\\&quot;string\\\&quot;} (required)
     * @param  \SplFileObject $documento documento (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirCompra'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object
     */
    public function incluirCompra($cnpj, $titulo_documento, $tipo_documento_id, $compra, $documento, string $contentType = self::contentTypes['incluirCompra'][0])
    {
        list($response) = $this->incluirCompraWithHttpInfo($cnpj, $titulo_documento, $tipo_documento_id, $compra, $documento, $contentType);
        return $response;
    }

    /**
     * Operation incluirCompraWithHttpInfo
     *
     * Inserir Contratação
     *
     * @param  string $cnpj (required)
     * @param  string $titulo_documento (required)
     * @param  int $tipo_documento_id (required)
     * @param  \SplFileObject $compra O arquivo com os dados da compra deve utilizar o formato JSON, conforme o exemplo: {  \\\&quot;anoCompra\\\&quot;: 2021,  \\\&quot;itensCompra\\\&quot;: [    {      \\\&quot;numeroItem\\\&quot;: 1,      \\\&quot;materialOuServico\\\&quot;: \\\&quot;M\\\&quot;,      \\\&quot;tipoBeneficioId\\\&quot;: \\\&quot;1\\\&quot;,      \\\&quot;incentivoProdutivoBasico\\\&quot;: true,      \\\&quot;descricao\\\&quot;: \\\&quot;string\\\&quot;,      \\\&quot;quantidade\\\&quot;: 1,      \\\&quot;unidadeMedida\\\&quot;: \\\&quot;string\\\&quot;,      \\\&quot;valorUnitarioEstimado\\\&quot;: 100.00,      \\\&quot;valorTotal\\\&quot;: 100.00,      \\\&quot;orcamentoSigiloso\\\&quot;: true,      \\\&quot;criterioJulgamentoId\\\&quot;: \\\&quot;1\\\&quot;,      \\\&quot;itemCategoriaId\\\&quot;: 1,      \\\&quot;patrimonio\\\&quot;: \\\&quot;string\\\&quot;,      \\\&quot;codigoRegistroImobiliario\\\&quot;: \\\&quot;string\\\&quot;    }  ],  \\\&quot;tipoInstrumentoConvocatorioId\\\&quot;: \\\&quot;1\\\&quot;,  \\\&quot;modalidadeId\\\&quot;: \\\&quot;1\\\&quot;,  \\\&quot;modoDisputaId\\\&quot;: \\\&quot;1\\\&quot;,  \\\&quot;numeroCompra\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;numeroProcesso\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;objetoCompra\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;informacaoComplementar\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;amparoLegalId\\\&quot;: 1,  \\\&quot;srp\\\&quot;: true,  \\\&quot;dataAberturaProposta\\\&quot;: \\\&quot;2022-01-18T14:30:01\\\&quot;,  \\\&quot;dataEncerramentoProposta\\\&quot;: \\\&quot;2022-01-18T14:30:01\\\&quot;,  \\\&quot;codigoUnidadeCompradora\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;linkSistemaOrigem\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;justificativaPresencial\\\&quot;: \\\&quot;string\\\&quot;} (required)
     * @param  \SplFileObject $documento (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirCompra'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function incluirCompraWithHttpInfo($cnpj, $titulo_documento, $tipo_documento_id, $compra, $documento, string $contentType = self::contentTypes['incluirCompra'][0])
    {
        $request = $this->incluirCompraRequest($cnpj, $titulo_documento, $tipo_documento_id, $compra, $documento, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation incluirCompraAsync
     *
     * Inserir Contratação
     *
     * @param  string $cnpj (required)
     * @param  string $titulo_documento (required)
     * @param  int $tipo_documento_id (required)
     * @param  \SplFileObject $compra O arquivo com os dados da compra deve utilizar o formato JSON, conforme o exemplo: {  \\\&quot;anoCompra\\\&quot;: 2021,  \\\&quot;itensCompra\\\&quot;: [    {      \\\&quot;numeroItem\\\&quot;: 1,      \\\&quot;materialOuServico\\\&quot;: \\\&quot;M\\\&quot;,      \\\&quot;tipoBeneficioId\\\&quot;: \\\&quot;1\\\&quot;,      \\\&quot;incentivoProdutivoBasico\\\&quot;: true,      \\\&quot;descricao\\\&quot;: \\\&quot;string\\\&quot;,      \\\&quot;quantidade\\\&quot;: 1,      \\\&quot;unidadeMedida\\\&quot;: \\\&quot;string\\\&quot;,      \\\&quot;valorUnitarioEstimado\\\&quot;: 100.00,      \\\&quot;valorTotal\\\&quot;: 100.00,      \\\&quot;orcamentoSigiloso\\\&quot;: true,      \\\&quot;criterioJulgamentoId\\\&quot;: \\\&quot;1\\\&quot;,      \\\&quot;itemCategoriaId\\\&quot;: 1,      \\\&quot;patrimonio\\\&quot;: \\\&quot;string\\\&quot;,      \\\&quot;codigoRegistroImobiliario\\\&quot;: \\\&quot;string\\\&quot;    }  ],  \\\&quot;tipoInstrumentoConvocatorioId\\\&quot;: \\\&quot;1\\\&quot;,  \\\&quot;modalidadeId\\\&quot;: \\\&quot;1\\\&quot;,  \\\&quot;modoDisputaId\\\&quot;: \\\&quot;1\\\&quot;,  \\\&quot;numeroCompra\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;numeroProcesso\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;objetoCompra\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;informacaoComplementar\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;amparoLegalId\\\&quot;: 1,  \\\&quot;srp\\\&quot;: true,  \\\&quot;dataAberturaProposta\\\&quot;: \\\&quot;2022-01-18T14:30:01\\\&quot;,  \\\&quot;dataEncerramentoProposta\\\&quot;: \\\&quot;2022-01-18T14:30:01\\\&quot;,  \\\&quot;codigoUnidadeCompradora\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;linkSistemaOrigem\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;justificativaPresencial\\\&quot;: \\\&quot;string\\\&quot;} (required)
     * @param  \SplFileObject $documento (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirCompra'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incluirCompraAsync($cnpj, $titulo_documento, $tipo_documento_id, $compra, $documento, string $contentType = self::contentTypes['incluirCompra'][0])
    {
        return $this->incluirCompraAsyncWithHttpInfo($cnpj, $titulo_documento, $tipo_documento_id, $compra, $documento, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation incluirCompraAsyncWithHttpInfo
     *
     * Inserir Contratação
     *
     * @param  string $cnpj (required)
     * @param  string $titulo_documento (required)
     * @param  int $tipo_documento_id (required)
     * @param  \SplFileObject $compra O arquivo com os dados da compra deve utilizar o formato JSON, conforme o exemplo: {  \\\&quot;anoCompra\\\&quot;: 2021,  \\\&quot;itensCompra\\\&quot;: [    {      \\\&quot;numeroItem\\\&quot;: 1,      \\\&quot;materialOuServico\\\&quot;: \\\&quot;M\\\&quot;,      \\\&quot;tipoBeneficioId\\\&quot;: \\\&quot;1\\\&quot;,      \\\&quot;incentivoProdutivoBasico\\\&quot;: true,      \\\&quot;descricao\\\&quot;: \\\&quot;string\\\&quot;,      \\\&quot;quantidade\\\&quot;: 1,      \\\&quot;unidadeMedida\\\&quot;: \\\&quot;string\\\&quot;,      \\\&quot;valorUnitarioEstimado\\\&quot;: 100.00,      \\\&quot;valorTotal\\\&quot;: 100.00,      \\\&quot;orcamentoSigiloso\\\&quot;: true,      \\\&quot;criterioJulgamentoId\\\&quot;: \\\&quot;1\\\&quot;,      \\\&quot;itemCategoriaId\\\&quot;: 1,      \\\&quot;patrimonio\\\&quot;: \\\&quot;string\\\&quot;,      \\\&quot;codigoRegistroImobiliario\\\&quot;: \\\&quot;string\\\&quot;    }  ],  \\\&quot;tipoInstrumentoConvocatorioId\\\&quot;: \\\&quot;1\\\&quot;,  \\\&quot;modalidadeId\\\&quot;: \\\&quot;1\\\&quot;,  \\\&quot;modoDisputaId\\\&quot;: \\\&quot;1\\\&quot;,  \\\&quot;numeroCompra\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;numeroProcesso\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;objetoCompra\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;informacaoComplementar\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;amparoLegalId\\\&quot;: 1,  \\\&quot;srp\\\&quot;: true,  \\\&quot;dataAberturaProposta\\\&quot;: \\\&quot;2022-01-18T14:30:01\\\&quot;,  \\\&quot;dataEncerramentoProposta\\\&quot;: \\\&quot;2022-01-18T14:30:01\\\&quot;,  \\\&quot;codigoUnidadeCompradora\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;linkSistemaOrigem\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;justificativaPresencial\\\&quot;: \\\&quot;string\\\&quot;} (required)
     * @param  \SplFileObject $documento (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirCompra'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incluirCompraAsyncWithHttpInfo($cnpj, $titulo_documento, $tipo_documento_id, $compra, $documento, string $contentType = self::contentTypes['incluirCompra'][0])
    {
        $returnType = 'object';
        $request = $this->incluirCompraRequest($cnpj, $titulo_documento, $tipo_documento_id, $compra, $documento, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'incluirCompra'
     *
     * @param  string $cnpj (required)
     * @param  string $titulo_documento (required)
     * @param  int $tipo_documento_id (required)
     * @param  \SplFileObject $compra O arquivo com os dados da compra deve utilizar o formato JSON, conforme o exemplo: {  \\\&quot;anoCompra\\\&quot;: 2021,  \\\&quot;itensCompra\\\&quot;: [    {      \\\&quot;numeroItem\\\&quot;: 1,      \\\&quot;materialOuServico\\\&quot;: \\\&quot;M\\\&quot;,      \\\&quot;tipoBeneficioId\\\&quot;: \\\&quot;1\\\&quot;,      \\\&quot;incentivoProdutivoBasico\\\&quot;: true,      \\\&quot;descricao\\\&quot;: \\\&quot;string\\\&quot;,      \\\&quot;quantidade\\\&quot;: 1,      \\\&quot;unidadeMedida\\\&quot;: \\\&quot;string\\\&quot;,      \\\&quot;valorUnitarioEstimado\\\&quot;: 100.00,      \\\&quot;valorTotal\\\&quot;: 100.00,      \\\&quot;orcamentoSigiloso\\\&quot;: true,      \\\&quot;criterioJulgamentoId\\\&quot;: \\\&quot;1\\\&quot;,      \\\&quot;itemCategoriaId\\\&quot;: 1,      \\\&quot;patrimonio\\\&quot;: \\\&quot;string\\\&quot;,      \\\&quot;codigoRegistroImobiliario\\\&quot;: \\\&quot;string\\\&quot;    }  ],  \\\&quot;tipoInstrumentoConvocatorioId\\\&quot;: \\\&quot;1\\\&quot;,  \\\&quot;modalidadeId\\\&quot;: \\\&quot;1\\\&quot;,  \\\&quot;modoDisputaId\\\&quot;: \\\&quot;1\\\&quot;,  \\\&quot;numeroCompra\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;numeroProcesso\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;objetoCompra\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;informacaoComplementar\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;amparoLegalId\\\&quot;: 1,  \\\&quot;srp\\\&quot;: true,  \\\&quot;dataAberturaProposta\\\&quot;: \\\&quot;2022-01-18T14:30:01\\\&quot;,  \\\&quot;dataEncerramentoProposta\\\&quot;: \\\&quot;2022-01-18T14:30:01\\\&quot;,  \\\&quot;codigoUnidadeCompradora\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;linkSistemaOrigem\\\&quot;: \\\&quot;string\\\&quot;,  \\\&quot;justificativaPresencial\\\&quot;: \\\&quot;string\\\&quot;} (required)
     * @param  \SplFileObject $documento (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirCompra'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function incluirCompraRequest($cnpj, $titulo_documento, $tipo_documento_id, $compra, $documento, string $contentType = self::contentTypes['incluirCompra'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling incluirCompra'
            );
        }

        // verify the required parameter 'titulo_documento' is set
        if ($titulo_documento === null || (is_array($titulo_documento) && count($titulo_documento) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $titulo_documento when calling incluirCompra'
            );
        }
        if (strlen($titulo_documento) > 255) {
            throw new \InvalidArgumentException('invalid length for "$titulo_documento" when calling ContrataoApi.incluirCompra, must be smaller than or equal to 255.');
        }
        if (strlen($titulo_documento) < 0) {
            throw new \InvalidArgumentException('invalid length for "$titulo_documento" when calling ContrataoApi.incluirCompra, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'tipo_documento_id' is set
        if ($tipo_documento_id === null || (is_array($tipo_documento_id) && count($tipo_documento_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tipo_documento_id when calling incluirCompra'
            );
        }
        if ($tipo_documento_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$tipo_documento_id" when calling ContrataoApi.incluirCompra, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'compra' is set
        if ($compra === null || (is_array($compra) && count($compra) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $compra when calling incluirCompra'
            );
        }

        // verify the required parameter 'documento' is set
        if ($documento === null || (is_array($documento) && count($documento) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $documento when calling incluirCompra'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/compras';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($titulo_documento !== null) {
            $headerParams['Titulo-Documento'] = ObjectSerializer::toHeaderValue($titulo_documento);
        }
        // header params
        if ($tipo_documento_id !== null) {
            $headerParams['Tipo-Documento-Id'] = ObjectSerializer::toHeaderValue($tipo_documento_id);
        }

        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }

        // form params
        if ($compra !== null) {
            $multipart = true;
            $formParams['compra'] = [];
            $paramFiles = is_array($compra) ? $compra : [$compra];
            foreach ($paramFiles as $paramFile) {
                $formParams['compra'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($documento !== null) {
            $multipart = true;
            $formParams['documento'] = [];
            $paramFiles = is_array($documento) ? $documento : [$documento];
            foreach ($paramFiles as $paramFile) {
                $formParams['documento'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation incluirCompraItem
     *
     * Inserir Item de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  \OpenAPI\Client\Model\IncluirCompraItemDTO[] $incluir_compra_item_dto incluir_compra_item_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirCompraItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object[]
     */
    public function incluirCompraItem($cnpj, $ano, $sequencial, $incluir_compra_item_dto, string $contentType = self::contentTypes['incluirCompraItem'][0])
    {
        list($response) = $this->incluirCompraItemWithHttpInfo($cnpj, $ano, $sequencial, $incluir_compra_item_dto, $contentType);
        return $response;
    }

    /**
     * Operation incluirCompraItemWithHttpInfo
     *
     * Inserir Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\IncluirCompraItemDTO[] $incluir_compra_item_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirCompraItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function incluirCompraItemWithHttpInfo($cnpj, $ano, $sequencial, $incluir_compra_item_dto, string $contentType = self::contentTypes['incluirCompraItem'][0])
    {
        $request = $this->incluirCompraItemRequest($cnpj, $ano, $sequencial, $incluir_compra_item_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation incluirCompraItemAsync
     *
     * Inserir Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\IncluirCompraItemDTO[] $incluir_compra_item_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirCompraItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incluirCompraItemAsync($cnpj, $ano, $sequencial, $incluir_compra_item_dto, string $contentType = self::contentTypes['incluirCompraItem'][0])
    {
        return $this->incluirCompraItemAsyncWithHttpInfo($cnpj, $ano, $sequencial, $incluir_compra_item_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation incluirCompraItemAsyncWithHttpInfo
     *
     * Inserir Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\IncluirCompraItemDTO[] $incluir_compra_item_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirCompraItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incluirCompraItemAsyncWithHttpInfo($cnpj, $ano, $sequencial, $incluir_compra_item_dto, string $contentType = self::contentTypes['incluirCompraItem'][0])
    {
        $returnType = 'object[]';
        $request = $this->incluirCompraItemRequest($cnpj, $ano, $sequencial, $incluir_compra_item_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'incluirCompraItem'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\IncluirCompraItemDTO[] $incluir_compra_item_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirCompraItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function incluirCompraItemRequest($cnpj, $ano, $sequencial, $incluir_compra_item_dto, string $contentType = self::contentTypes['incluirCompraItem'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling incluirCompraItem'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling incluirCompraItem'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling incluirCompraItem'
            );
        }

        // verify the required parameter 'incluir_compra_item_dto' is set
        if ($incluir_compra_item_dto === null || (is_array($incluir_compra_item_dto) && count($incluir_compra_item_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $incluir_compra_item_dto when calling incluirCompraItem'
            );
        }
        if (count($incluir_compra_item_dto) > 2000) {
            throw new \InvalidArgumentException('invalid value for "$incluir_compra_item_dto" when calling ContrataoApi.incluirCompraItem, number of items must be less than or equal to 2000.');
        }
        if (count($incluir_compra_item_dto) < 1) {
            throw new \InvalidArgumentException('invalid value for "$incluir_compra_item_dto" when calling ContrataoApi.incluirCompraItem, number of items must be greater than or equal to 1.');
        }
        

        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}/itens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($incluir_compra_item_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($incluir_compra_item_dto));
            } else {
                $httpBody = $incluir_compra_item_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation incluirCompraItemResultado
     *
     * Inserir Resultado de Item de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $numero_item numero_item (required)
     * @param  \OpenAPI\Client\Model\IncluirCompraItemResultadoDTO $incluir_compra_item_resultado_dto incluir_compra_item_resultado_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirCompraItemResultado'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object
     */
    public function incluirCompraItemResultado($cnpj, $ano, $sequencial, $numero_item, $incluir_compra_item_resultado_dto, string $contentType = self::contentTypes['incluirCompraItemResultado'][0])
    {
        list($response) = $this->incluirCompraItemResultadoWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $incluir_compra_item_resultado_dto, $contentType);
        return $response;
    }

    /**
     * Operation incluirCompraItemResultadoWithHttpInfo
     *
     * Inserir Resultado de Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  \OpenAPI\Client\Model\IncluirCompraItemResultadoDTO $incluir_compra_item_resultado_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirCompraItemResultado'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function incluirCompraItemResultadoWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $incluir_compra_item_resultado_dto, string $contentType = self::contentTypes['incluirCompraItemResultado'][0])
    {
        $request = $this->incluirCompraItemResultadoRequest($cnpj, $ano, $sequencial, $numero_item, $incluir_compra_item_resultado_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation incluirCompraItemResultadoAsync
     *
     * Inserir Resultado de Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  \OpenAPI\Client\Model\IncluirCompraItemResultadoDTO $incluir_compra_item_resultado_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirCompraItemResultado'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incluirCompraItemResultadoAsync($cnpj, $ano, $sequencial, $numero_item, $incluir_compra_item_resultado_dto, string $contentType = self::contentTypes['incluirCompraItemResultado'][0])
    {
        return $this->incluirCompraItemResultadoAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $incluir_compra_item_resultado_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation incluirCompraItemResultadoAsyncWithHttpInfo
     *
     * Inserir Resultado de Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  \OpenAPI\Client\Model\IncluirCompraItemResultadoDTO $incluir_compra_item_resultado_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirCompraItemResultado'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function incluirCompraItemResultadoAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $incluir_compra_item_resultado_dto, string $contentType = self::contentTypes['incluirCompraItemResultado'][0])
    {
        $returnType = 'object';
        $request = $this->incluirCompraItemResultadoRequest($cnpj, $ano, $sequencial, $numero_item, $incluir_compra_item_resultado_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'incluirCompraItemResultado'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  \OpenAPI\Client\Model\IncluirCompraItemResultadoDTO $incluir_compra_item_resultado_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['incluirCompraItemResultado'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function incluirCompraItemResultadoRequest($cnpj, $ano, $sequencial, $numero_item, $incluir_compra_item_resultado_dto, string $contentType = self::contentTypes['incluirCompraItemResultado'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling incluirCompraItemResultado'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling incluirCompraItemResultado'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling incluirCompraItemResultado'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling ContrataoApi.incluirCompraItemResultado, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'numero_item' is set
        if ($numero_item === null || (is_array($numero_item) && count($numero_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numero_item when calling incluirCompraItemResultado'
            );
        }
        if ($numero_item < 1) {
            throw new \InvalidArgumentException('invalid value for "$numero_item" when calling ContrataoApi.incluirCompraItemResultado, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'incluir_compra_item_resultado_dto' is set
        if ($incluir_compra_item_resultado_dto === null || (is_array($incluir_compra_item_resultado_dto) && count($incluir_compra_item_resultado_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $incluir_compra_item_resultado_dto when calling incluirCompraItemResultado'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}/itens/{numeroItem}/resultados';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }
        // path params
        if ($numero_item !== null) {
            $resourcePath = str_replace(
                '{' . 'numeroItem' . '}',
                ObjectSerializer::toPathValue($numero_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($incluir_compra_item_resultado_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($incluir_compra_item_resultado_dto));
            } else {
                $httpBody = $incluir_compra_item_resultado_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inserirArquivo2
     *
     * Inserir Documento de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  string $titulo_documento titulo_documento (required)
     * @param  int $tipo_documento_id tipo_documento_id (required)
     * @param  \SplFileObject $arquivo arquivo (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirArquivo2'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object
     */
    public function inserirArquivo2($cnpj, $ano, $sequencial, $titulo_documento, $tipo_documento_id, $arquivo, string $contentType = self::contentTypes['inserirArquivo2'][0])
    {
        list($response) = $this->inserirArquivo2WithHttpInfo($cnpj, $ano, $sequencial, $titulo_documento, $tipo_documento_id, $arquivo, $contentType);
        return $response;
    }

    /**
     * Operation inserirArquivo2WithHttpInfo
     *
     * Inserir Documento de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $titulo_documento (required)
     * @param  int $tipo_documento_id (required)
     * @param  \SplFileObject $arquivo (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirArquivo2'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function inserirArquivo2WithHttpInfo($cnpj, $ano, $sequencial, $titulo_documento, $tipo_documento_id, $arquivo, string $contentType = self::contentTypes['inserirArquivo2'][0])
    {
        $request = $this->inserirArquivo2Request($cnpj, $ano, $sequencial, $titulo_documento, $tipo_documento_id, $arquivo, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inserirArquivo2Async
     *
     * Inserir Documento de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $titulo_documento (required)
     * @param  int $tipo_documento_id (required)
     * @param  \SplFileObject $arquivo (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirArquivo2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inserirArquivo2Async($cnpj, $ano, $sequencial, $titulo_documento, $tipo_documento_id, $arquivo, string $contentType = self::contentTypes['inserirArquivo2'][0])
    {
        return $this->inserirArquivo2AsyncWithHttpInfo($cnpj, $ano, $sequencial, $titulo_documento, $tipo_documento_id, $arquivo, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inserirArquivo2AsyncWithHttpInfo
     *
     * Inserir Documento de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $titulo_documento (required)
     * @param  int $tipo_documento_id (required)
     * @param  \SplFileObject $arquivo (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirArquivo2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inserirArquivo2AsyncWithHttpInfo($cnpj, $ano, $sequencial, $titulo_documento, $tipo_documento_id, $arquivo, string $contentType = self::contentTypes['inserirArquivo2'][0])
    {
        $returnType = 'object';
        $request = $this->inserirArquivo2Request($cnpj, $ano, $sequencial, $titulo_documento, $tipo_documento_id, $arquivo, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inserirArquivo2'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $titulo_documento (required)
     * @param  int $tipo_documento_id (required)
     * @param  \SplFileObject $arquivo (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirArquivo2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function inserirArquivo2Request($cnpj, $ano, $sequencial, $titulo_documento, $tipo_documento_id, $arquivo, string $contentType = self::contentTypes['inserirArquivo2'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling inserirArquivo2'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling inserirArquivo2'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling inserirArquivo2'
            );
        }

        // verify the required parameter 'titulo_documento' is set
        if ($titulo_documento === null || (is_array($titulo_documento) && count($titulo_documento) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $titulo_documento when calling inserirArquivo2'
            );
        }
        if (strlen($titulo_documento) > 255) {
            throw new \InvalidArgumentException('invalid length for "$titulo_documento" when calling ContrataoApi.inserirArquivo2, must be smaller than or equal to 255.');
        }
        if (strlen($titulo_documento) < 0) {
            throw new \InvalidArgumentException('invalid length for "$titulo_documento" when calling ContrataoApi.inserirArquivo2, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'tipo_documento_id' is set
        if ($tipo_documento_id === null || (is_array($tipo_documento_id) && count($tipo_documento_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tipo_documento_id when calling inserirArquivo2'
            );
        }

        // verify the required parameter 'arquivo' is set
        if ($arquivo === null || (is_array($arquivo) && count($arquivo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $arquivo when calling inserirArquivo2'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}/arquivos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($titulo_documento !== null) {
            $headerParams['Titulo-Documento'] = ObjectSerializer::toHeaderValue($titulo_documento);
        }
        // header params
        if ($tipo_documento_id !== null) {
            $headerParams['Tipo-Documento-Id'] = ObjectSerializer::toHeaderValue($tipo_documento_id);
        }

        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }

        // form params
        if ($arquivo !== null) {
            $multipart = true;
            $formParams['arquivo'] = [];
            $paramFiles = is_array($arquivo) ? $arquivo : [$arquivo];
            foreach ($paramFiles as $paramFile) {
                $formParams['arquivo'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inserirImagem
     *
     * Inserir Imagem de um Item de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $numero_item numero_item (required)
     * @param  string $texto_alternativo_imagem texto_alternativo_imagem (required)
     * @param  \SplFileObject $imagem imagem (required)
     * @param  string $titulo_imagem titulo_imagem (optional)
     * @param  string $legenda_imagem legenda_imagem (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirImagem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object
     */
    public function inserirImagem($cnpj, $ano, $sequencial, $numero_item, $texto_alternativo_imagem, $imagem, $titulo_imagem = null, $legenda_imagem = null, string $contentType = self::contentTypes['inserirImagem'][0])
    {
        list($response) = $this->inserirImagemWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $texto_alternativo_imagem, $imagem, $titulo_imagem, $legenda_imagem, $contentType);
        return $response;
    }

    /**
     * Operation inserirImagemWithHttpInfo
     *
     * Inserir Imagem de um Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  string $texto_alternativo_imagem (required)
     * @param  \SplFileObject $imagem (required)
     * @param  string $titulo_imagem (optional)
     * @param  string $legenda_imagem (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirImagem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function inserirImagemWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $texto_alternativo_imagem, $imagem, $titulo_imagem = null, $legenda_imagem = null, string $contentType = self::contentTypes['inserirImagem'][0])
    {
        $request = $this->inserirImagemRequest($cnpj, $ano, $sequencial, $numero_item, $texto_alternativo_imagem, $imagem, $titulo_imagem, $legenda_imagem, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inserirImagemAsync
     *
     * Inserir Imagem de um Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  string $texto_alternativo_imagem (required)
     * @param  \SplFileObject $imagem (required)
     * @param  string $titulo_imagem (optional)
     * @param  string $legenda_imagem (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirImagem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inserirImagemAsync($cnpj, $ano, $sequencial, $numero_item, $texto_alternativo_imagem, $imagem, $titulo_imagem = null, $legenda_imagem = null, string $contentType = self::contentTypes['inserirImagem'][0])
    {
        return $this->inserirImagemAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $texto_alternativo_imagem, $imagem, $titulo_imagem, $legenda_imagem, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inserirImagemAsyncWithHttpInfo
     *
     * Inserir Imagem de um Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  string $texto_alternativo_imagem (required)
     * @param  \SplFileObject $imagem (required)
     * @param  string $titulo_imagem (optional)
     * @param  string $legenda_imagem (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirImagem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inserirImagemAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $texto_alternativo_imagem, $imagem, $titulo_imagem = null, $legenda_imagem = null, string $contentType = self::contentTypes['inserirImagem'][0])
    {
        $returnType = 'object';
        $request = $this->inserirImagemRequest($cnpj, $ano, $sequencial, $numero_item, $texto_alternativo_imagem, $imagem, $titulo_imagem, $legenda_imagem, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inserirImagem'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  string $texto_alternativo_imagem (required)
     * @param  \SplFileObject $imagem (required)
     * @param  string $titulo_imagem (optional)
     * @param  string $legenda_imagem (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirImagem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function inserirImagemRequest($cnpj, $ano, $sequencial, $numero_item, $texto_alternativo_imagem, $imagem, $titulo_imagem = null, $legenda_imagem = null, string $contentType = self::contentTypes['inserirImagem'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling inserirImagem'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling inserirImagem'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling inserirImagem'
            );
        }

        // verify the required parameter 'numero_item' is set
        if ($numero_item === null || (is_array($numero_item) && count($numero_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numero_item when calling inserirImagem'
            );
        }

        // verify the required parameter 'texto_alternativo_imagem' is set
        if ($texto_alternativo_imagem === null || (is_array($texto_alternativo_imagem) && count($texto_alternativo_imagem) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $texto_alternativo_imagem when calling inserirImagem'
            );
        }

        // verify the required parameter 'imagem' is set
        if ($imagem === null || (is_array($imagem) && count($imagem) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $imagem when calling inserirImagem'
            );
        }




        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}/itens/{numeroItem}/imagem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($titulo_imagem !== null) {
            $headerParams['Titulo-Imagem'] = ObjectSerializer::toHeaderValue($titulo_imagem);
        }
        // header params
        if ($legenda_imagem !== null) {
            $headerParams['Legenda-Imagem'] = ObjectSerializer::toHeaderValue($legenda_imagem);
        }
        // header params
        if ($texto_alternativo_imagem !== null) {
            $headerParams['Texto-Alternativo-Imagem'] = ObjectSerializer::toHeaderValue($texto_alternativo_imagem);
        }

        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }
        // path params
        if ($numero_item !== null) {
            $resourcePath = str_replace(
                '{' . 'numeroItem' . '}',
                ObjectSerializer::toPathValue($numero_item),
                $resourcePath
            );
        }

        // form params
        if ($imagem !== null) {
            $multipart = true;
            $formParams['imagem'] = [];
            $paramFiles = is_array($imagem) ? $imagem : [$imagem];
            foreach ($paramFiles as $paramFile) {
                $formParams['imagem'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pesquisarCompraItem
     *
     * Consultar Todos os Itens de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $pagina pagina (optional)
     * @param  int $tamanho_pagina tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pesquisarCompraItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarCompraItemSigiloDTO[]
     */
    public function pesquisarCompraItem($cnpj, $ano, $sequencial, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['pesquisarCompraItem'][0])
    {
        list($response) = $this->pesquisarCompraItemWithHttpInfo($cnpj, $ano, $sequencial, $pagina, $tamanho_pagina, $contentType);
        return $response;
    }

    /**
     * Operation pesquisarCompraItemWithHttpInfo
     *
     * Consultar Todos os Itens de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pesquisarCompraItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarCompraItemSigiloDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function pesquisarCompraItemWithHttpInfo($cnpj, $ano, $sequencial, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['pesquisarCompraItem'][0])
    {
        $request = $this->pesquisarCompraItemRequest($cnpj, $ano, $sequencial, $pagina, $tamanho_pagina, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\RecuperarCompraItemSigiloDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RecuperarCompraItemSigiloDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RecuperarCompraItemSigiloDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RecuperarCompraItemSigiloDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RecuperarCompraItemSigiloDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pesquisarCompraItemAsync
     *
     * Consultar Todos os Itens de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pesquisarCompraItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pesquisarCompraItemAsync($cnpj, $ano, $sequencial, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['pesquisarCompraItem'][0])
    {
        return $this->pesquisarCompraItemAsyncWithHttpInfo($cnpj, $ano, $sequencial, $pagina, $tamanho_pagina, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pesquisarCompraItemAsyncWithHttpInfo
     *
     * Consultar Todos os Itens de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pesquisarCompraItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pesquisarCompraItemAsyncWithHttpInfo($cnpj, $ano, $sequencial, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['pesquisarCompraItem'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RecuperarCompraItemSigiloDTO[]';
        $request = $this->pesquisarCompraItemRequest($cnpj, $ano, $sequencial, $pagina, $tamanho_pagina, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pesquisarCompraItem'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pesquisarCompraItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pesquisarCompraItemRequest($cnpj, $ano, $sequencial, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['pesquisarCompraItem'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling pesquisarCompraItem'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling pesquisarCompraItem'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling pesquisarCompraItem'
            );
        }

        if ($pagina !== null && $pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$pagina" when calling ContrataoApi.pesquisarCompraItem, must be bigger than or equal to 1.');
        }
        
        if ($tamanho_pagina !== null && $tamanho_pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$tamanho_pagina" when calling ContrataoApi.pesquisarCompraItem, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}/itens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tamanho_pagina,
            'tamanhoPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recuperarArquivo2
     *
     * Baixar Documento de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $sequencial_documento sequencial_documento (required)
     * @param  bool $ignorar_exclusao ignorar_exclusao (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarArquivo2'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\SplFileObject
     */
    public function recuperarArquivo2($cnpj, $ano, $sequencial, $sequencial_documento, $ignorar_exclusao = null, string $contentType = self::contentTypes['recuperarArquivo2'][0])
    {
        list($response) = $this->recuperarArquivo2WithHttpInfo($cnpj, $ano, $sequencial, $sequencial_documento, $ignorar_exclusao, $contentType);
        return $response;
    }

    /**
     * Operation recuperarArquivo2WithHttpInfo
     *
     * Baixar Documento de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $sequencial_documento (required)
     * @param  bool $ignorar_exclusao (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarArquivo2'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function recuperarArquivo2WithHttpInfo($cnpj, $ano, $sequencial, $sequencial_documento, $ignorar_exclusao = null, string $contentType = self::contentTypes['recuperarArquivo2'][0])
    {
        $request = $this->recuperarArquivo2Request($cnpj, $ano, $sequencial, $sequencial_documento, $ignorar_exclusao, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recuperarArquivo2Async
     *
     * Baixar Documento de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $sequencial_documento (required)
     * @param  bool $ignorar_exclusao (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarArquivo2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarArquivo2Async($cnpj, $ano, $sequencial, $sequencial_documento, $ignorar_exclusao = null, string $contentType = self::contentTypes['recuperarArquivo2'][0])
    {
        return $this->recuperarArquivo2AsyncWithHttpInfo($cnpj, $ano, $sequencial, $sequencial_documento, $ignorar_exclusao, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recuperarArquivo2AsyncWithHttpInfo
     *
     * Baixar Documento de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $sequencial_documento (required)
     * @param  bool $ignorar_exclusao (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarArquivo2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarArquivo2AsyncWithHttpInfo($cnpj, $ano, $sequencial, $sequencial_documento, $ignorar_exclusao = null, string $contentType = self::contentTypes['recuperarArquivo2'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->recuperarArquivo2Request($cnpj, $ano, $sequencial, $sequencial_documento, $ignorar_exclusao, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recuperarArquivo2'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $sequencial_documento (required)
     * @param  bool $ignorar_exclusao (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarArquivo2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recuperarArquivo2Request($cnpj, $ano, $sequencial, $sequencial_documento, $ignorar_exclusao = null, string $contentType = self::contentTypes['recuperarArquivo2'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling recuperarArquivo2'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling recuperarArquivo2'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling recuperarArquivo2'
            );
        }

        // verify the required parameter 'sequencial_documento' is set
        if ($sequencial_documento === null || (is_array($sequencial_documento) && count($sequencial_documento) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_documento when calling recuperarArquivo2'
            );
        }



        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}/arquivos/{sequencialDocumento}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ignorar_exclusao,
            'ignorarExclusao', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_documento !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialDocumento' . '}',
                ObjectSerializer::toPathValue($sequencial_documento),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recuperarCompraDocumentoQuantidade
     *
     * Consultar Quantidade de Documentos de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarCompraDocumentoQuantidade'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|int
     */
    public function recuperarCompraDocumentoQuantidade($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['recuperarCompraDocumentoQuantidade'][0])
    {
        list($response) = $this->recuperarCompraDocumentoQuantidadeWithHttpInfo($cnpj, $ano, $sequencial, $contentType);
        return $response;
    }

    /**
     * Operation recuperarCompraDocumentoQuantidadeWithHttpInfo
     *
     * Consultar Quantidade de Documentos de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarCompraDocumentoQuantidade'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|int, HTTP status code, HTTP response headers (array of strings)
     */
    public function recuperarCompraDocumentoQuantidadeWithHttpInfo($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['recuperarCompraDocumentoQuantidade'][0])
    {
        $request = $this->recuperarCompraDocumentoQuantidadeRequest($cnpj, $ano, $sequencial, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recuperarCompraDocumentoQuantidadeAsync
     *
     * Consultar Quantidade de Documentos de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarCompraDocumentoQuantidade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarCompraDocumentoQuantidadeAsync($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['recuperarCompraDocumentoQuantidade'][0])
    {
        return $this->recuperarCompraDocumentoQuantidadeAsyncWithHttpInfo($cnpj, $ano, $sequencial, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recuperarCompraDocumentoQuantidadeAsyncWithHttpInfo
     *
     * Consultar Quantidade de Documentos de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarCompraDocumentoQuantidade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarCompraDocumentoQuantidadeAsyncWithHttpInfo($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['recuperarCompraDocumentoQuantidade'][0])
    {
        $returnType = 'int';
        $request = $this->recuperarCompraDocumentoQuantidadeRequest($cnpj, $ano, $sequencial, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recuperarCompraDocumentoQuantidade'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarCompraDocumentoQuantidade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recuperarCompraDocumentoQuantidadeRequest($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['recuperarCompraDocumentoQuantidade'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling recuperarCompraDocumentoQuantidade'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling recuperarCompraDocumentoQuantidade'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling recuperarCompraDocumentoQuantidade'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}/arquivos/quantidade';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recuperarCompraItem
     *
     * Consultar Item de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $numero_item numero_item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarCompraItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarCompraItemSigiloDTO
     */
    public function recuperarCompraItem($cnpj, $ano, $sequencial, $numero_item, string $contentType = self::contentTypes['recuperarCompraItem'][0])
    {
        list($response) = $this->recuperarCompraItemWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $contentType);
        return $response;
    }

    /**
     * Operation recuperarCompraItemWithHttpInfo
     *
     * Consultar Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarCompraItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarCompraItemSigiloDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function recuperarCompraItemWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, string $contentType = self::contentTypes['recuperarCompraItem'][0])
    {
        $request = $this->recuperarCompraItemRequest($cnpj, $ano, $sequencial, $numero_item, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\RecuperarCompraItemSigiloDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RecuperarCompraItemSigiloDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RecuperarCompraItemSigiloDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RecuperarCompraItemSigiloDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RecuperarCompraItemSigiloDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recuperarCompraItemAsync
     *
     * Consultar Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarCompraItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarCompraItemAsync($cnpj, $ano, $sequencial, $numero_item, string $contentType = self::contentTypes['recuperarCompraItem'][0])
    {
        return $this->recuperarCompraItemAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recuperarCompraItemAsyncWithHttpInfo
     *
     * Consultar Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarCompraItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarCompraItemAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, string $contentType = self::contentTypes['recuperarCompraItem'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RecuperarCompraItemSigiloDTO';
        $request = $this->recuperarCompraItemRequest($cnpj, $ano, $sequencial, $numero_item, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recuperarCompraItem'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarCompraItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recuperarCompraItemRequest($cnpj, $ano, $sequencial, $numero_item, string $contentType = self::contentTypes['recuperarCompraItem'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling recuperarCompraItem'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling recuperarCompraItem'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling recuperarCompraItem'
            );
        }

        // verify the required parameter 'numero_item' is set
        if ($numero_item === null || (is_array($numero_item) && count($numero_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numero_item when calling recuperarCompraItem'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}/itens/{numeroItem}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }
        // path params
        if ($numero_item !== null) {
            $resourcePath = str_replace(
                '{' . 'numeroItem' . '}',
                ObjectSerializer::toPathValue($numero_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recuperarCompraItemQuantidade
     *
     * Consultar Quantidade Item de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarCompraItemQuantidade'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|int
     */
    public function recuperarCompraItemQuantidade($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['recuperarCompraItemQuantidade'][0])
    {
        list($response) = $this->recuperarCompraItemQuantidadeWithHttpInfo($cnpj, $ano, $sequencial, $contentType);
        return $response;
    }

    /**
     * Operation recuperarCompraItemQuantidadeWithHttpInfo
     *
     * Consultar Quantidade Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarCompraItemQuantidade'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|int, HTTP status code, HTTP response headers (array of strings)
     */
    public function recuperarCompraItemQuantidadeWithHttpInfo($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['recuperarCompraItemQuantidade'][0])
    {
        $request = $this->recuperarCompraItemQuantidadeRequest($cnpj, $ano, $sequencial, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recuperarCompraItemQuantidadeAsync
     *
     * Consultar Quantidade Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarCompraItemQuantidade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarCompraItemQuantidadeAsync($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['recuperarCompraItemQuantidade'][0])
    {
        return $this->recuperarCompraItemQuantidadeAsyncWithHttpInfo($cnpj, $ano, $sequencial, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recuperarCompraItemQuantidadeAsyncWithHttpInfo
     *
     * Consultar Quantidade Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarCompraItemQuantidade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarCompraItemQuantidadeAsyncWithHttpInfo($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['recuperarCompraItemQuantidade'][0])
    {
        $returnType = 'int';
        $request = $this->recuperarCompraItemQuantidadeRequest($cnpj, $ano, $sequencial, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recuperarCompraItemQuantidade'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarCompraItemQuantidade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recuperarCompraItemQuantidadeRequest($cnpj, $ano, $sequencial, string $contentType = self::contentTypes['recuperarCompraItemQuantidade'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling recuperarCompraItemQuantidade'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling recuperarCompraItemQuantidade'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling recuperarCompraItemQuantidade'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}/itens/quantidade';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recuperarInformacoesDocumentosCompra
     *
     * Consultar Documentos de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $pagina pagina (optional)
     * @param  int $tamanho_pagina tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarInformacoesDocumentosCompra'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarDadosDocumentoCompraDTO[]
     */
    public function recuperarInformacoesDocumentosCompra($cnpj, $ano, $sequencial, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarInformacoesDocumentosCompra'][0])
    {
        list($response) = $this->recuperarInformacoesDocumentosCompraWithHttpInfo($cnpj, $ano, $sequencial, $pagina, $tamanho_pagina, $contentType);
        return $response;
    }

    /**
     * Operation recuperarInformacoesDocumentosCompraWithHttpInfo
     *
     * Consultar Documentos de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarInformacoesDocumentosCompra'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarDadosDocumentoCompraDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function recuperarInformacoesDocumentosCompraWithHttpInfo($cnpj, $ano, $sequencial, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarInformacoesDocumentosCompra'][0])
    {
        $request = $this->recuperarInformacoesDocumentosCompraRequest($cnpj, $ano, $sequencial, $pagina, $tamanho_pagina, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\RecuperarDadosDocumentoCompraDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RecuperarDadosDocumentoCompraDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RecuperarDadosDocumentoCompraDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RecuperarDadosDocumentoCompraDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RecuperarDadosDocumentoCompraDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recuperarInformacoesDocumentosCompraAsync
     *
     * Consultar Documentos de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarInformacoesDocumentosCompra'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarInformacoesDocumentosCompraAsync($cnpj, $ano, $sequencial, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarInformacoesDocumentosCompra'][0])
    {
        return $this->recuperarInformacoesDocumentosCompraAsyncWithHttpInfo($cnpj, $ano, $sequencial, $pagina, $tamanho_pagina, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recuperarInformacoesDocumentosCompraAsyncWithHttpInfo
     *
     * Consultar Documentos de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarInformacoesDocumentosCompra'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarInformacoesDocumentosCompraAsyncWithHttpInfo($cnpj, $ano, $sequencial, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarInformacoesDocumentosCompra'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RecuperarDadosDocumentoCompraDTO[]';
        $request = $this->recuperarInformacoesDocumentosCompraRequest($cnpj, $ano, $sequencial, $pagina, $tamanho_pagina, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recuperarInformacoesDocumentosCompra'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarInformacoesDocumentosCompra'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recuperarInformacoesDocumentosCompraRequest($cnpj, $ano, $sequencial, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarInformacoesDocumentosCompra'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling recuperarInformacoesDocumentosCompra'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling recuperarInformacoesDocumentosCompra'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling recuperarInformacoesDocumentosCompra'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling ContrataoApi.recuperarInformacoesDocumentosCompra, must be bigger than or equal to 1.');
        }
        
        if ($pagina !== null && $pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$pagina" when calling ContrataoApi.recuperarInformacoesDocumentosCompra, must be bigger than or equal to 1.');
        }
        
        if ($tamanho_pagina !== null && $tamanho_pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$tamanho_pagina" when calling ContrataoApi.recuperarInformacoesDocumentosCompra, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}/arquivos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tamanho_pagina,
            'tamanhoPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recuperarResultado
     *
     * Consultar Resultado de Item de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $numero_item numero_item (required)
     * @param  int $sequencial_resultado sequencial_resultado (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarResultado'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarCompraItemResultadoDTO
     */
    public function recuperarResultado($cnpj, $ano, $sequencial, $numero_item, $sequencial_resultado, string $contentType = self::contentTypes['recuperarResultado'][0])
    {
        list($response) = $this->recuperarResultadoWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $sequencial_resultado, $contentType);
        return $response;
    }

    /**
     * Operation recuperarResultadoWithHttpInfo
     *
     * Consultar Resultado de Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  int $sequencial_resultado (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarResultado'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarCompraItemResultadoDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function recuperarResultadoWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $sequencial_resultado, string $contentType = self::contentTypes['recuperarResultado'][0])
    {
        $request = $this->recuperarResultadoRequest($cnpj, $ano, $sequencial, $numero_item, $sequencial_resultado, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\RecuperarCompraItemResultadoDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RecuperarCompraItemResultadoDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RecuperarCompraItemResultadoDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RecuperarCompraItemResultadoDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RecuperarCompraItemResultadoDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recuperarResultadoAsync
     *
     * Consultar Resultado de Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  int $sequencial_resultado (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarResultado'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarResultadoAsync($cnpj, $ano, $sequencial, $numero_item, $sequencial_resultado, string $contentType = self::contentTypes['recuperarResultado'][0])
    {
        return $this->recuperarResultadoAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $sequencial_resultado, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recuperarResultadoAsyncWithHttpInfo
     *
     * Consultar Resultado de Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  int $sequencial_resultado (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarResultado'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarResultadoAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $sequencial_resultado, string $contentType = self::contentTypes['recuperarResultado'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RecuperarCompraItemResultadoDTO';
        $request = $this->recuperarResultadoRequest($cnpj, $ano, $sequencial, $numero_item, $sequencial_resultado, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recuperarResultado'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  int $sequencial_resultado (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarResultado'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recuperarResultadoRequest($cnpj, $ano, $sequencial, $numero_item, $sequencial_resultado, string $contentType = self::contentTypes['recuperarResultado'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling recuperarResultado'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling recuperarResultado'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling recuperarResultado'
            );
        }

        // verify the required parameter 'numero_item' is set
        if ($numero_item === null || (is_array($numero_item) && count($numero_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numero_item when calling recuperarResultado'
            );
        }

        // verify the required parameter 'sequencial_resultado' is set
        if ($sequencial_resultado === null || (is_array($sequencial_resultado) && count($sequencial_resultado) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_resultado when calling recuperarResultado'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}/itens/{numeroItem}/resultados/{sequencialResultado}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }
        // path params
        if ($numero_item !== null) {
            $resourcePath = str_replace(
                '{' . 'numeroItem' . '}',
                ObjectSerializer::toPathValue($numero_item),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_resultado !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialResultado' . '}',
                ObjectSerializer::toPathValue($sequencial_resultado),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recuperarResultados
     *
     * Consultar Resultados de Item de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $numero_item numero_item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarResultados'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarCompraItemResultadoDTO[]
     */
    public function recuperarResultados($cnpj, $ano, $sequencial, $numero_item, string $contentType = self::contentTypes['recuperarResultados'][0])
    {
        list($response) = $this->recuperarResultadosWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $contentType);
        return $response;
    }

    /**
     * Operation recuperarResultadosWithHttpInfo
     *
     * Consultar Resultados de Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarResultados'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarCompraItemResultadoDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function recuperarResultadosWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, string $contentType = self::contentTypes['recuperarResultados'][0])
    {
        $request = $this->recuperarResultadosRequest($cnpj, $ano, $sequencial, $numero_item, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\RecuperarCompraItemResultadoDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RecuperarCompraItemResultadoDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RecuperarCompraItemResultadoDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RecuperarCompraItemResultadoDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RecuperarCompraItemResultadoDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recuperarResultadosAsync
     *
     * Consultar Resultados de Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarResultados'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarResultadosAsync($cnpj, $ano, $sequencial, $numero_item, string $contentType = self::contentTypes['recuperarResultados'][0])
    {
        return $this->recuperarResultadosAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recuperarResultadosAsyncWithHttpInfo
     *
     * Consultar Resultados de Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarResultados'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarResultadosAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, string $contentType = self::contentTypes['recuperarResultados'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RecuperarCompraItemResultadoDTO[]';
        $request = $this->recuperarResultadosRequest($cnpj, $ano, $sequencial, $numero_item, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recuperarResultados'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarResultados'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recuperarResultadosRequest($cnpj, $ano, $sequencial, $numero_item, string $contentType = self::contentTypes['recuperarResultados'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling recuperarResultados'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling recuperarResultados'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling recuperarResultados'
            );
        }

        // verify the required parameter 'numero_item' is set
        if ($numero_item === null || (is_array($numero_item) && count($numero_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numero_item when calling recuperarResultados'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}/itens/{numeroItem}/resultados';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }
        // path params
        if ($numero_item !== null) {
            $resourcePath = str_replace(
                '{' . 'numeroItem' . '}',
                ObjectSerializer::toPathValue($numero_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removerCompra
     *
     * Excluir Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerCompra'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removerCompra($cnpj, $ano, $sequencial, $exclusao_dto = null, string $contentType = self::contentTypes['removerCompra'][0])
    {
        $this->removerCompraWithHttpInfo($cnpj, $ano, $sequencial, $exclusao_dto, $contentType);
    }

    /**
     * Operation removerCompraWithHttpInfo
     *
     * Excluir Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerCompra'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removerCompraWithHttpInfo($cnpj, $ano, $sequencial, $exclusao_dto = null, string $contentType = self::contentTypes['removerCompra'][0])
    {
        $request = $this->removerCompraRequest($cnpj, $ano, $sequencial, $exclusao_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removerCompraAsync
     *
     * Excluir Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerCompra'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removerCompraAsync($cnpj, $ano, $sequencial, $exclusao_dto = null, string $contentType = self::contentTypes['removerCompra'][0])
    {
        return $this->removerCompraAsyncWithHttpInfo($cnpj, $ano, $sequencial, $exclusao_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removerCompraAsyncWithHttpInfo
     *
     * Excluir Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerCompra'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removerCompraAsyncWithHttpInfo($cnpj, $ano, $sequencial, $exclusao_dto = null, string $contentType = self::contentTypes['removerCompra'][0])
    {
        $returnType = '';
        $request = $this->removerCompraRequest($cnpj, $ano, $sequencial, $exclusao_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removerCompra'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerCompra'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removerCompraRequest($cnpj, $ano, $sequencial, $exclusao_dto = null, string $contentType = self::contentTypes['removerCompra'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling removerCompra'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling removerCompra'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling removerCompra'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling ContrataoApi.removerCompra, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($exclusao_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($exclusao_dto));
            } else {
                $httpBody = $exclusao_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removerDocumentoCompra
     *
     * Excluir Documento de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $sequencial_documento sequencial_documento (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerDocumentoCompra'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removerDocumentoCompra($cnpj, $ano, $sequencial, $sequencial_documento, $exclusao_dto = null, string $contentType = self::contentTypes['removerDocumentoCompra'][0])
    {
        $this->removerDocumentoCompraWithHttpInfo($cnpj, $ano, $sequencial, $sequencial_documento, $exclusao_dto, $contentType);
    }

    /**
     * Operation removerDocumentoCompraWithHttpInfo
     *
     * Excluir Documento de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $sequencial_documento (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerDocumentoCompra'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removerDocumentoCompraWithHttpInfo($cnpj, $ano, $sequencial, $sequencial_documento, $exclusao_dto = null, string $contentType = self::contentTypes['removerDocumentoCompra'][0])
    {
        $request = $this->removerDocumentoCompraRequest($cnpj, $ano, $sequencial, $sequencial_documento, $exclusao_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removerDocumentoCompraAsync
     *
     * Excluir Documento de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $sequencial_documento (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerDocumentoCompra'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removerDocumentoCompraAsync($cnpj, $ano, $sequencial, $sequencial_documento, $exclusao_dto = null, string $contentType = self::contentTypes['removerDocumentoCompra'][0])
    {
        return $this->removerDocumentoCompraAsyncWithHttpInfo($cnpj, $ano, $sequencial, $sequencial_documento, $exclusao_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removerDocumentoCompraAsyncWithHttpInfo
     *
     * Excluir Documento de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $sequencial_documento (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerDocumentoCompra'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removerDocumentoCompraAsyncWithHttpInfo($cnpj, $ano, $sequencial, $sequencial_documento, $exclusao_dto = null, string $contentType = self::contentTypes['removerDocumentoCompra'][0])
    {
        $returnType = '';
        $request = $this->removerDocumentoCompraRequest($cnpj, $ano, $sequencial, $sequencial_documento, $exclusao_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removerDocumentoCompra'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $sequencial_documento (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerDocumentoCompra'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removerDocumentoCompraRequest($cnpj, $ano, $sequencial, $sequencial_documento, $exclusao_dto = null, string $contentType = self::contentTypes['removerDocumentoCompra'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling removerDocumentoCompra'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling removerDocumentoCompra'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling removerDocumentoCompra'
            );
        }

        // verify the required parameter 'sequencial_documento' is set
        if ($sequencial_documento === null || (is_array($sequencial_documento) && count($sequencial_documento) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_documento when calling removerDocumentoCompra'
            );
        }



        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}/arquivos/{sequencialDocumento}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_documento !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialDocumento' . '}',
                ObjectSerializer::toPathValue($sequencial_documento),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($exclusao_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($exclusao_dto));
            } else {
                $httpBody = $exclusao_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removerImagem
     *
     * Remover Imagem de um Item de uma Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $numero_item numero_item (required)
     * @param  int $sequencial_imagem sequencial_imagem (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerImagem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removerImagem($cnpj, $ano, $sequencial, $numero_item, $sequencial_imagem, $exclusao_dto = null, string $contentType = self::contentTypes['removerImagem'][0])
    {
        $this->removerImagemWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $sequencial_imagem, $exclusao_dto, $contentType);
    }

    /**
     * Operation removerImagemWithHttpInfo
     *
     * Remover Imagem de um Item de uma Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  int $sequencial_imagem (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerImagem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removerImagemWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $sequencial_imagem, $exclusao_dto = null, string $contentType = self::contentTypes['removerImagem'][0])
    {
        $request = $this->removerImagemRequest($cnpj, $ano, $sequencial, $numero_item, $sequencial_imagem, $exclusao_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removerImagemAsync
     *
     * Remover Imagem de um Item de uma Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  int $sequencial_imagem (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerImagem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removerImagemAsync($cnpj, $ano, $sequencial, $numero_item, $sequencial_imagem, $exclusao_dto = null, string $contentType = self::contentTypes['removerImagem'][0])
    {
        return $this->removerImagemAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $sequencial_imagem, $exclusao_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removerImagemAsyncWithHttpInfo
     *
     * Remover Imagem de um Item de uma Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  int $sequencial_imagem (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerImagem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removerImagemAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $sequencial_imagem, $exclusao_dto = null, string $contentType = self::contentTypes['removerImagem'][0])
    {
        $returnType = '';
        $request = $this->removerImagemRequest($cnpj, $ano, $sequencial, $numero_item, $sequencial_imagem, $exclusao_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removerImagem'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  int $sequencial_imagem (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removerImagem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removerImagemRequest($cnpj, $ano, $sequencial, $numero_item, $sequencial_imagem, $exclusao_dto = null, string $contentType = self::contentTypes['removerImagem'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling removerImagem'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling removerImagem'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling removerImagem'
            );
        }

        // verify the required parameter 'numero_item' is set
        if ($numero_item === null || (is_array($numero_item) && count($numero_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numero_item when calling removerImagem'
            );
        }

        // verify the required parameter 'sequencial_imagem' is set
        if ($sequencial_imagem === null || (is_array($sequencial_imagem) && count($sequencial_imagem) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_imagem when calling removerImagem'
            );
        }



        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}/itens/{numeroItem}/imagem/{sequencialImagem}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }
        // path params
        if ($numero_item !== null) {
            $resourcePath = str_replace(
                '{' . 'numeroItem' . '}',
                ObjectSerializer::toPathValue($numero_item),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_imagem !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialImagem' . '}',
                ObjectSerializer::toPathValue($sequencial_imagem),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($exclusao_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($exclusao_dto));
            } else {
                $httpBody = $exclusao_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retificarCompra
     *
     * Retificar Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  \OpenAPI\Client\Model\AlterarCompraDTO $alterar_compra_dto alterar_compra_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarCompra'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function retificarCompra($cnpj, $ano, $sequencial, $alterar_compra_dto, string $contentType = self::contentTypes['retificarCompra'][0])
    {
        $this->retificarCompraWithHttpInfo($cnpj, $ano, $sequencial, $alterar_compra_dto, $contentType);
    }

    /**
     * Operation retificarCompraWithHttpInfo
     *
     * Retificar Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\AlterarCompraDTO $alterar_compra_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarCompra'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function retificarCompraWithHttpInfo($cnpj, $ano, $sequencial, $alterar_compra_dto, string $contentType = self::contentTypes['retificarCompra'][0])
    {
        $request = $this->retificarCompraRequest($cnpj, $ano, $sequencial, $alterar_compra_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retificarCompraAsync
     *
     * Retificar Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\AlterarCompraDTO $alterar_compra_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarCompra'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retificarCompraAsync($cnpj, $ano, $sequencial, $alterar_compra_dto, string $contentType = self::contentTypes['retificarCompra'][0])
    {
        return $this->retificarCompraAsyncWithHttpInfo($cnpj, $ano, $sequencial, $alterar_compra_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retificarCompraAsyncWithHttpInfo
     *
     * Retificar Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\AlterarCompraDTO $alterar_compra_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarCompra'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retificarCompraAsyncWithHttpInfo($cnpj, $ano, $sequencial, $alterar_compra_dto, string $contentType = self::contentTypes['retificarCompra'][0])
    {
        $returnType = '';
        $request = $this->retificarCompraRequest($cnpj, $ano, $sequencial, $alterar_compra_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retificarCompra'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\AlterarCompraDTO $alterar_compra_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarCompra'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retificarCompraRequest($cnpj, $ano, $sequencial, $alterar_compra_dto, string $contentType = self::contentTypes['retificarCompra'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling retificarCompra'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling retificarCompra'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling retificarCompra'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling ContrataoApi.retificarCompra, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'alterar_compra_dto' is set
        if ($alterar_compra_dto === null || (is_array($alterar_compra_dto) && count($alterar_compra_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alterar_compra_dto when calling retificarCompra'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($alterar_compra_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($alterar_compra_dto));
            } else {
                $httpBody = $alterar_compra_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retificarCompraItem
     *
     * Retificar Item de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $numero_item numero_item (required)
     * @param  \OpenAPI\Client\Model\AlterarCompraItemDTO $alterar_compra_item_dto alterar_compra_item_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarCompraItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object
     */
    public function retificarCompraItem($cnpj, $ano, $sequencial, $numero_item, $alterar_compra_item_dto, string $contentType = self::contentTypes['retificarCompraItem'][0])
    {
        list($response) = $this->retificarCompraItemWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $alterar_compra_item_dto, $contentType);
        return $response;
    }

    /**
     * Operation retificarCompraItemWithHttpInfo
     *
     * Retificar Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  \OpenAPI\Client\Model\AlterarCompraItemDTO $alterar_compra_item_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarCompraItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function retificarCompraItemWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $alterar_compra_item_dto, string $contentType = self::contentTypes['retificarCompraItem'][0])
    {
        $request = $this->retificarCompraItemRequest($cnpj, $ano, $sequencial, $numero_item, $alterar_compra_item_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retificarCompraItemAsync
     *
     * Retificar Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  \OpenAPI\Client\Model\AlterarCompraItemDTO $alterar_compra_item_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarCompraItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retificarCompraItemAsync($cnpj, $ano, $sequencial, $numero_item, $alterar_compra_item_dto, string $contentType = self::contentTypes['retificarCompraItem'][0])
    {
        return $this->retificarCompraItemAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $alterar_compra_item_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retificarCompraItemAsyncWithHttpInfo
     *
     * Retificar Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  \OpenAPI\Client\Model\AlterarCompraItemDTO $alterar_compra_item_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarCompraItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retificarCompraItemAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $alterar_compra_item_dto, string $contentType = self::contentTypes['retificarCompraItem'][0])
    {
        $returnType = 'object';
        $request = $this->retificarCompraItemRequest($cnpj, $ano, $sequencial, $numero_item, $alterar_compra_item_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retificarCompraItem'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  \OpenAPI\Client\Model\AlterarCompraItemDTO $alterar_compra_item_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarCompraItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retificarCompraItemRequest($cnpj, $ano, $sequencial, $numero_item, $alterar_compra_item_dto, string $contentType = self::contentTypes['retificarCompraItem'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling retificarCompraItem'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling retificarCompraItem'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling retificarCompraItem'
            );
        }

        // verify the required parameter 'numero_item' is set
        if ($numero_item === null || (is_array($numero_item) && count($numero_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numero_item when calling retificarCompraItem'
            );
        }

        // verify the required parameter 'alterar_compra_item_dto' is set
        if ($alterar_compra_item_dto === null || (is_array($alterar_compra_item_dto) && count($alterar_compra_item_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alterar_compra_item_dto when calling retificarCompraItem'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}/itens/{numeroItem}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }
        // path params
        if ($numero_item !== null) {
            $resourcePath = str_replace(
                '{' . 'numeroItem' . '}',
                ObjectSerializer::toPathValue($numero_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($alterar_compra_item_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($alterar_compra_item_dto));
            } else {
                $httpBody = $alterar_compra_item_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retificarCompraItemResultado
     *
     * Retificar Resultado de Item de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $numero_item numero_item (required)
     * @param  int $sequencial_resultado sequencial_resultado (required)
     * @param  \OpenAPI\Client\Model\AlterarCompraItemResultadoDTO $alterar_compra_item_resultado_dto alterar_compra_item_resultado_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarCompraItemResultado'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object
     */
    public function retificarCompraItemResultado($cnpj, $ano, $sequencial, $numero_item, $sequencial_resultado, $alterar_compra_item_resultado_dto, string $contentType = self::contentTypes['retificarCompraItemResultado'][0])
    {
        list($response) = $this->retificarCompraItemResultadoWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $sequencial_resultado, $alterar_compra_item_resultado_dto, $contentType);
        return $response;
    }

    /**
     * Operation retificarCompraItemResultadoWithHttpInfo
     *
     * Retificar Resultado de Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  int $sequencial_resultado (required)
     * @param  \OpenAPI\Client\Model\AlterarCompraItemResultadoDTO $alterar_compra_item_resultado_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarCompraItemResultado'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function retificarCompraItemResultadoWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $sequencial_resultado, $alterar_compra_item_resultado_dto, string $contentType = self::contentTypes['retificarCompraItemResultado'][0])
    {
        $request = $this->retificarCompraItemResultadoRequest($cnpj, $ano, $sequencial, $numero_item, $sequencial_resultado, $alterar_compra_item_resultado_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retificarCompraItemResultadoAsync
     *
     * Retificar Resultado de Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  int $sequencial_resultado (required)
     * @param  \OpenAPI\Client\Model\AlterarCompraItemResultadoDTO $alterar_compra_item_resultado_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarCompraItemResultado'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retificarCompraItemResultadoAsync($cnpj, $ano, $sequencial, $numero_item, $sequencial_resultado, $alterar_compra_item_resultado_dto, string $contentType = self::contentTypes['retificarCompraItemResultado'][0])
    {
        return $this->retificarCompraItemResultadoAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $sequencial_resultado, $alterar_compra_item_resultado_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retificarCompraItemResultadoAsyncWithHttpInfo
     *
     * Retificar Resultado de Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  int $sequencial_resultado (required)
     * @param  \OpenAPI\Client\Model\AlterarCompraItemResultadoDTO $alterar_compra_item_resultado_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarCompraItemResultado'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retificarCompraItemResultadoAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $sequencial_resultado, $alterar_compra_item_resultado_dto, string $contentType = self::contentTypes['retificarCompraItemResultado'][0])
    {
        $returnType = 'object';
        $request = $this->retificarCompraItemResultadoRequest($cnpj, $ano, $sequencial, $numero_item, $sequencial_resultado, $alterar_compra_item_resultado_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retificarCompraItemResultado'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  int $sequencial_resultado (required)
     * @param  \OpenAPI\Client\Model\AlterarCompraItemResultadoDTO $alterar_compra_item_resultado_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarCompraItemResultado'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retificarCompraItemResultadoRequest($cnpj, $ano, $sequencial, $numero_item, $sequencial_resultado, $alterar_compra_item_resultado_dto, string $contentType = self::contentTypes['retificarCompraItemResultado'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling retificarCompraItemResultado'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling retificarCompraItemResultado'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling retificarCompraItemResultado'
            );
        }

        // verify the required parameter 'numero_item' is set
        if ($numero_item === null || (is_array($numero_item) && count($numero_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numero_item when calling retificarCompraItemResultado'
            );
        }

        // verify the required parameter 'sequencial_resultado' is set
        if ($sequencial_resultado === null || (is_array($sequencial_resultado) && count($sequencial_resultado) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_resultado when calling retificarCompraItemResultado'
            );
        }

        // verify the required parameter 'alterar_compra_item_resultado_dto' is set
        if ($alterar_compra_item_resultado_dto === null || (is_array($alterar_compra_item_resultado_dto) && count($alterar_compra_item_resultado_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alterar_compra_item_resultado_dto when calling retificarCompraItemResultado'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}/itens/{numeroItem}/resultados/{sequencialResultado}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }
        // path params
        if ($numero_item !== null) {
            $resourcePath = str_replace(
                '{' . 'numeroItem' . '}',
                ObjectSerializer::toPathValue($numero_item),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_resultado !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialResultado' . '}',
                ObjectSerializer::toPathValue($sequencial_resultado),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($alterar_compra_item_resultado_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($alterar_compra_item_resultado_dto));
            } else {
                $httpBody = $alterar_compra_item_resultado_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retificarParcialmenteCompra
     *
     * Retificar parcialmente uma Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  \OpenAPI\Client\Model\AlterarCompraParcialDTO $alterar_compra_parcial_dto alterar_compra_parcial_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarParcialmenteCompra'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function retificarParcialmenteCompra($cnpj, $ano, $sequencial, $alterar_compra_parcial_dto, string $contentType = self::contentTypes['retificarParcialmenteCompra'][0])
    {
        $this->retificarParcialmenteCompraWithHttpInfo($cnpj, $ano, $sequencial, $alterar_compra_parcial_dto, $contentType);
    }

    /**
     * Operation retificarParcialmenteCompraWithHttpInfo
     *
     * Retificar parcialmente uma Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\AlterarCompraParcialDTO $alterar_compra_parcial_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarParcialmenteCompra'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function retificarParcialmenteCompraWithHttpInfo($cnpj, $ano, $sequencial, $alterar_compra_parcial_dto, string $contentType = self::contentTypes['retificarParcialmenteCompra'][0])
    {
        $request = $this->retificarParcialmenteCompraRequest($cnpj, $ano, $sequencial, $alterar_compra_parcial_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retificarParcialmenteCompraAsync
     *
     * Retificar parcialmente uma Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\AlterarCompraParcialDTO $alterar_compra_parcial_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarParcialmenteCompra'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retificarParcialmenteCompraAsync($cnpj, $ano, $sequencial, $alterar_compra_parcial_dto, string $contentType = self::contentTypes['retificarParcialmenteCompra'][0])
    {
        return $this->retificarParcialmenteCompraAsyncWithHttpInfo($cnpj, $ano, $sequencial, $alterar_compra_parcial_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retificarParcialmenteCompraAsyncWithHttpInfo
     *
     * Retificar parcialmente uma Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\AlterarCompraParcialDTO $alterar_compra_parcial_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarParcialmenteCompra'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retificarParcialmenteCompraAsyncWithHttpInfo($cnpj, $ano, $sequencial, $alterar_compra_parcial_dto, string $contentType = self::contentTypes['retificarParcialmenteCompra'][0])
    {
        $returnType = '';
        $request = $this->retificarParcialmenteCompraRequest($cnpj, $ano, $sequencial, $alterar_compra_parcial_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retificarParcialmenteCompra'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  \OpenAPI\Client\Model\AlterarCompraParcialDTO $alterar_compra_parcial_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarParcialmenteCompra'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retificarParcialmenteCompraRequest($cnpj, $ano, $sequencial, $alterar_compra_parcial_dto, string $contentType = self::contentTypes['retificarParcialmenteCompra'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling retificarParcialmenteCompra'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling retificarParcialmenteCompra'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling retificarParcialmenteCompra'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling ContrataoApi.retificarParcialmenteCompra, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'alterar_compra_parcial_dto' is set
        if ($alterar_compra_parcial_dto === null || (is_array($alterar_compra_parcial_dto) && count($alterar_compra_parcial_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alterar_compra_parcial_dto when calling retificarParcialmenteCompra'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($alterar_compra_parcial_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($alterar_compra_parcial_dto));
            } else {
                $httpBody = $alterar_compra_parcial_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retificarParcialmenteCompraItem
     *
     * Retificar Parcialmente um Item de Contratação
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $numero_item numero_item (required)
     * @param  \OpenAPI\Client\Model\AlterarCompraItemParcialDTO $alterar_compra_item_parcial_dto alterar_compra_item_parcial_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarParcialmenteCompraItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function retificarParcialmenteCompraItem($cnpj, $ano, $sequencial, $numero_item, $alterar_compra_item_parcial_dto, string $contentType = self::contentTypes['retificarParcialmenteCompraItem'][0])
    {
        $this->retificarParcialmenteCompraItemWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $alterar_compra_item_parcial_dto, $contentType);
    }

    /**
     * Operation retificarParcialmenteCompraItemWithHttpInfo
     *
     * Retificar Parcialmente um Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  \OpenAPI\Client\Model\AlterarCompraItemParcialDTO $alterar_compra_item_parcial_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarParcialmenteCompraItem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function retificarParcialmenteCompraItemWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $alterar_compra_item_parcial_dto, string $contentType = self::contentTypes['retificarParcialmenteCompraItem'][0])
    {
        $request = $this->retificarParcialmenteCompraItemRequest($cnpj, $ano, $sequencial, $numero_item, $alterar_compra_item_parcial_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retificarParcialmenteCompraItemAsync
     *
     * Retificar Parcialmente um Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  \OpenAPI\Client\Model\AlterarCompraItemParcialDTO $alterar_compra_item_parcial_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarParcialmenteCompraItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retificarParcialmenteCompraItemAsync($cnpj, $ano, $sequencial, $numero_item, $alterar_compra_item_parcial_dto, string $contentType = self::contentTypes['retificarParcialmenteCompraItem'][0])
    {
        return $this->retificarParcialmenteCompraItemAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $alterar_compra_item_parcial_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retificarParcialmenteCompraItemAsyncWithHttpInfo
     *
     * Retificar Parcialmente um Item de Contratação
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  \OpenAPI\Client\Model\AlterarCompraItemParcialDTO $alterar_compra_item_parcial_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarParcialmenteCompraItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retificarParcialmenteCompraItemAsyncWithHttpInfo($cnpj, $ano, $sequencial, $numero_item, $alterar_compra_item_parcial_dto, string $contentType = self::contentTypes['retificarParcialmenteCompraItem'][0])
    {
        $returnType = '';
        $request = $this->retificarParcialmenteCompraItemRequest($cnpj, $ano, $sequencial, $numero_item, $alterar_compra_item_parcial_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retificarParcialmenteCompraItem'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $numero_item (required)
     * @param  \OpenAPI\Client\Model\AlterarCompraItemParcialDTO $alterar_compra_item_parcial_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarParcialmenteCompraItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retificarParcialmenteCompraItemRequest($cnpj, $ano, $sequencial, $numero_item, $alterar_compra_item_parcial_dto, string $contentType = self::contentTypes['retificarParcialmenteCompraItem'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling retificarParcialmenteCompraItem'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling retificarParcialmenteCompraItem'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling retificarParcialmenteCompraItem'
            );
        }

        // verify the required parameter 'numero_item' is set
        if ($numero_item === null || (is_array($numero_item) && count($numero_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numero_item when calling retificarParcialmenteCompraItem'
            );
        }

        // verify the required parameter 'alterar_compra_item_parcial_dto' is set
        if ($alterar_compra_item_parcial_dto === null || (is_array($alterar_compra_item_parcial_dto) && count($alterar_compra_item_parcial_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alterar_compra_item_parcial_dto when calling retificarParcialmenteCompraItem'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}/itens/{numeroItem}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }
        // path params
        if ($numero_item !== null) {
            $resourcePath = str_replace(
                '{' . 'numeroItem' . '}',
                ObjectSerializer::toPathValue($numero_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($alterar_compra_item_parcial_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($alterar_compra_item_parcial_dto));
            } else {
                $httpBody = $alterar_compra_item_parcial_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
