<?php
/**
 * AtaApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API PNCP
 *
 * API REST de serviços do Portal Nacional de Contratações Públicas (PNCP)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: css.serpro@serpro.gov.br
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * AtaApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AtaApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'consultarHistoricoAta' => [
            'application/json',
        ],
        'consultarHistoricoAtaQuantidade' => [
            'application/json',
        ],
        'deleteAta' => [
            'application/json',
        ],
        'deleteDocumentoAta' => [
            'application/json',
        ],
        'inserirArquivo3' => [
            'multipart/form-data',
        ],
        'inserirAta' => [
            'application/json',
        ],
        'recuperarArquivo3' => [
            'application/json',
        ],
        'recuperarAtaDocumentoQuantidade' => [
            'application/json',
        ],
        'recuperarAtaRegistoPreco' => [
            'application/json',
        ],
        'recuperarAtasPorFiltros' => [
            'application/json',
        ],
        'recuperarInformacoesDocumentosAta' => [
            'application/json',
        ],
        'retificarAta' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation consultarHistoricoAta
     *
     * Consultar Histórico de Ata
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $sequencial_ata sequencial_ata (required)
     * @param  int $pagina pagina (optional)
     * @param  int $tamanho_pagina tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarHistoricoAta'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarHistoricoAtaDTO[]
     */
    public function consultarHistoricoAta($cnpj, $ano, $sequencial, $sequencial_ata, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['consultarHistoricoAta'][0])
    {
        list($response) = $this->consultarHistoricoAtaWithHttpInfo($cnpj, $ano, $sequencial, $sequencial_ata, $pagina, $tamanho_pagina, $contentType);
        return $response;
    }

    /**
     * Operation consultarHistoricoAtaWithHttpInfo
     *
     * Consultar Histórico de Ata
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $sequencial_ata (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarHistoricoAta'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarHistoricoAtaDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarHistoricoAtaWithHttpInfo($cnpj, $ano, $sequencial, $sequencial_ata, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['consultarHistoricoAta'][0])
    {
        $request = $this->consultarHistoricoAtaRequest($cnpj, $ano, $sequencial, $sequencial_ata, $pagina, $tamanho_pagina, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\RecuperarHistoricoAtaDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RecuperarHistoricoAtaDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RecuperarHistoricoAtaDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RecuperarHistoricoAtaDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RecuperarHistoricoAtaDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarHistoricoAtaAsync
     *
     * Consultar Histórico de Ata
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $sequencial_ata (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarHistoricoAta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarHistoricoAtaAsync($cnpj, $ano, $sequencial, $sequencial_ata, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['consultarHistoricoAta'][0])
    {
        return $this->consultarHistoricoAtaAsyncWithHttpInfo($cnpj, $ano, $sequencial, $sequencial_ata, $pagina, $tamanho_pagina, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarHistoricoAtaAsyncWithHttpInfo
     *
     * Consultar Histórico de Ata
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $sequencial_ata (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarHistoricoAta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarHistoricoAtaAsyncWithHttpInfo($cnpj, $ano, $sequencial, $sequencial_ata, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['consultarHistoricoAta'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RecuperarHistoricoAtaDTO[]';
        $request = $this->consultarHistoricoAtaRequest($cnpj, $ano, $sequencial, $sequencial_ata, $pagina, $tamanho_pagina, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarHistoricoAta'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $sequencial_ata (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarHistoricoAta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarHistoricoAtaRequest($cnpj, $ano, $sequencial, $sequencial_ata, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['consultarHistoricoAta'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling consultarHistoricoAta'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling consultarHistoricoAta'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling consultarHistoricoAta'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling AtaApi.consultarHistoricoAta, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'sequencial_ata' is set
        if ($sequencial_ata === null || (is_array($sequencial_ata) && count($sequencial_ata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_ata when calling consultarHistoricoAta'
            );
        }
        if ($sequencial_ata < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial_ata" when calling AtaApi.consultarHistoricoAta, must be bigger than or equal to 1.');
        }
        
        if ($pagina !== null && $pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$pagina" when calling AtaApi.consultarHistoricoAta, must be bigger than or equal to 1.');
        }
        
        if ($tamanho_pagina !== null && $tamanho_pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$tamanho_pagina" when calling AtaApi.consultarHistoricoAta, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}/atas/{sequencialAta}/historico';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tamanho_pagina,
            'tamanhoPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_ata !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialAta' . '}',
                ObjectSerializer::toPathValue($sequencial_ata),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consultarHistoricoAtaQuantidade
     *
     * Consultar Quantidade Histórico de Ata
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano ano (required)
     * @param  int $sequencial sequencial (required)
     * @param  int $sequencial_ata sequencial_ata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarHistoricoAtaQuantidade'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|int
     */
    public function consultarHistoricoAtaQuantidade($cnpj, $ano, $sequencial, $sequencial_ata, string $contentType = self::contentTypes['consultarHistoricoAtaQuantidade'][0])
    {
        list($response) = $this->consultarHistoricoAtaQuantidadeWithHttpInfo($cnpj, $ano, $sequencial, $sequencial_ata, $contentType);
        return $response;
    }

    /**
     * Operation consultarHistoricoAtaQuantidadeWithHttpInfo
     *
     * Consultar Quantidade Histórico de Ata
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $sequencial_ata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarHistoricoAtaQuantidade'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|int, HTTP status code, HTTP response headers (array of strings)
     */
    public function consultarHistoricoAtaQuantidadeWithHttpInfo($cnpj, $ano, $sequencial, $sequencial_ata, string $contentType = self::contentTypes['consultarHistoricoAtaQuantidade'][0])
    {
        $request = $this->consultarHistoricoAtaQuantidadeRequest($cnpj, $ano, $sequencial, $sequencial_ata, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consultarHistoricoAtaQuantidadeAsync
     *
     * Consultar Quantidade Histórico de Ata
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $sequencial_ata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarHistoricoAtaQuantidade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarHistoricoAtaQuantidadeAsync($cnpj, $ano, $sequencial, $sequencial_ata, string $contentType = self::contentTypes['consultarHistoricoAtaQuantidade'][0])
    {
        return $this->consultarHistoricoAtaQuantidadeAsyncWithHttpInfo($cnpj, $ano, $sequencial, $sequencial_ata, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consultarHistoricoAtaQuantidadeAsyncWithHttpInfo
     *
     * Consultar Quantidade Histórico de Ata
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $sequencial_ata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarHistoricoAtaQuantidade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consultarHistoricoAtaQuantidadeAsyncWithHttpInfo($cnpj, $ano, $sequencial, $sequencial_ata, string $contentType = self::contentTypes['consultarHistoricoAtaQuantidade'][0])
    {
        $returnType = 'int';
        $request = $this->consultarHistoricoAtaQuantidadeRequest($cnpj, $ano, $sequencial, $sequencial_ata, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consultarHistoricoAtaQuantidade'
     *
     * @param  string $cnpj (required)
     * @param  int $ano (required)
     * @param  int $sequencial (required)
     * @param  int $sequencial_ata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['consultarHistoricoAtaQuantidade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function consultarHistoricoAtaQuantidadeRequest($cnpj, $ano, $sequencial, $sequencial_ata, string $contentType = self::contentTypes['consultarHistoricoAtaQuantidade'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling consultarHistoricoAtaQuantidade'
            );
        }

        // verify the required parameter 'ano' is set
        if ($ano === null || (is_array($ano) && count($ano) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano when calling consultarHistoricoAtaQuantidade'
            );
        }

        // verify the required parameter 'sequencial' is set
        if ($sequencial === null || (is_array($sequencial) && count($sequencial) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial when calling consultarHistoricoAtaQuantidade'
            );
        }
        if ($sequencial < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial" when calling AtaApi.consultarHistoricoAtaQuantidade, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'sequencial_ata' is set
        if ($sequencial_ata === null || (is_array($sequencial_ata) && count($sequencial_ata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_ata when calling consultarHistoricoAtaQuantidade'
            );
        }
        if ($sequencial_ata < 1) {
            throw new \InvalidArgumentException('invalid value for "$sequencial_ata" when calling AtaApi.consultarHistoricoAtaQuantidade, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v1/orgaos/{cnpj}/compras/{ano}/{sequencial}/atas/{sequencialAta}/historico/quantidade';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano !== null) {
            $resourcePath = str_replace(
                '{' . 'ano' . '}',
                ObjectSerializer::toPathValue($ano),
                $resourcePath
            );
        }
        // path params
        if ($sequencial !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencial' . '}',
                ObjectSerializer::toPathValue($sequencial),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_ata !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialAta' . '}',
                ObjectSerializer::toPathValue($sequencial_ata),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAta
     *
     * Excluir Ata de Registro de Preço
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano_compra ano_compra (required)
     * @param  int $sequencial_compra sequencial_compra (required)
     * @param  int $sequencial_ata sequencial_ata (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAta'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAta($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $exclusao_dto = null, string $contentType = self::contentTypes['deleteAta'][0])
    {
        $this->deleteAtaWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $exclusao_dto, $contentType);
    }

    /**
     * Operation deleteAtaWithHttpInfo
     *
     * Excluir Ata de Registro de Preço
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAta'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAtaWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $exclusao_dto = null, string $contentType = self::contentTypes['deleteAta'][0])
    {
        $request = $this->deleteAtaRequest($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $exclusao_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAtaAsync
     *
     * Excluir Ata de Registro de Preço
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAtaAsync($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $exclusao_dto = null, string $contentType = self::contentTypes['deleteAta'][0])
    {
        return $this->deleteAtaAsyncWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $exclusao_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAtaAsyncWithHttpInfo
     *
     * Excluir Ata de Registro de Preço
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAtaAsyncWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $exclusao_dto = null, string $contentType = self::contentTypes['deleteAta'][0])
    {
        $returnType = '';
        $request = $this->deleteAtaRequest($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $exclusao_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAta'
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAtaRequest($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $exclusao_dto = null, string $contentType = self::contentTypes['deleteAta'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling deleteAta'
            );
        }

        // verify the required parameter 'ano_compra' is set
        if ($ano_compra === null || (is_array($ano_compra) && count($ano_compra) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano_compra when calling deleteAta'
            );
        }

        // verify the required parameter 'sequencial_compra' is set
        if ($sequencial_compra === null || (is_array($sequencial_compra) && count($sequencial_compra) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_compra when calling deleteAta'
            );
        }

        // verify the required parameter 'sequencial_ata' is set
        if ($sequencial_ata === null || (is_array($sequencial_ata) && count($sequencial_ata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_ata when calling deleteAta'
            );
        }



        $resourcePath = '/v1/orgaos/{cnpj}/compras/{anoCompra}/{sequencialCompra}/atas/{sequencialAta}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano_compra !== null) {
            $resourcePath = str_replace(
                '{' . 'anoCompra' . '}',
                ObjectSerializer::toPathValue($ano_compra),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_compra !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialCompra' . '}',
                ObjectSerializer::toPathValue($sequencial_compra),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_ata !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialAta' . '}',
                ObjectSerializer::toPathValue($sequencial_ata),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($exclusao_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($exclusao_dto));
            } else {
                $httpBody = $exclusao_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDocumentoAta
     *
     * Excluir Documento de Ata de Registro de Preço
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano_compra ano_compra (required)
     * @param  int $sequencial_compra sequencial_compra (required)
     * @param  int $sequencial_ata sequencial_ata (required)
     * @param  int $sequencial_documento sequencial_documento (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocumentoAta'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object
     */
    public function deleteDocumentoAta($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $sequencial_documento, $exclusao_dto = null, string $contentType = self::contentTypes['deleteDocumentoAta'][0])
    {
        list($response) = $this->deleteDocumentoAtaWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $sequencial_documento, $exclusao_dto, $contentType);
        return $response;
    }

    /**
     * Operation deleteDocumentoAtaWithHttpInfo
     *
     * Excluir Documento de Ata de Registro de Preço
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  int $sequencial_documento (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocumentoAta'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDocumentoAtaWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $sequencial_documento, $exclusao_dto = null, string $contentType = self::contentTypes['deleteDocumentoAta'][0])
    {
        $request = $this->deleteDocumentoAtaRequest($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $sequencial_documento, $exclusao_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDocumentoAtaAsync
     *
     * Excluir Documento de Ata de Registro de Preço
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  int $sequencial_documento (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocumentoAta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDocumentoAtaAsync($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $sequencial_documento, $exclusao_dto = null, string $contentType = self::contentTypes['deleteDocumentoAta'][0])
    {
        return $this->deleteDocumentoAtaAsyncWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $sequencial_documento, $exclusao_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDocumentoAtaAsyncWithHttpInfo
     *
     * Excluir Documento de Ata de Registro de Preço
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  int $sequencial_documento (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocumentoAta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDocumentoAtaAsyncWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $sequencial_documento, $exclusao_dto = null, string $contentType = self::contentTypes['deleteDocumentoAta'][0])
    {
        $returnType = 'object';
        $request = $this->deleteDocumentoAtaRequest($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $sequencial_documento, $exclusao_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDocumentoAta'
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  int $sequencial_documento (required)
     * @param  \OpenAPI\Client\Model\ExclusaoDTO $exclusao_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocumentoAta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDocumentoAtaRequest($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $sequencial_documento, $exclusao_dto = null, string $contentType = self::contentTypes['deleteDocumentoAta'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling deleteDocumentoAta'
            );
        }
        if (strlen($cnpj) > 14) {
            throw new \InvalidArgumentException('invalid length for "$cnpj" when calling AtaApi.deleteDocumentoAta, must be smaller than or equal to 14.');
        }
        if (strlen($cnpj) < 14) {
            throw new \InvalidArgumentException('invalid length for "$cnpj" when calling AtaApi.deleteDocumentoAta, must be bigger than or equal to 14.');
        }
        
        // verify the required parameter 'ano_compra' is set
        if ($ano_compra === null || (is_array($ano_compra) && count($ano_compra) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano_compra when calling deleteDocumentoAta'
            );
        }

        // verify the required parameter 'sequencial_compra' is set
        if ($sequencial_compra === null || (is_array($sequencial_compra) && count($sequencial_compra) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_compra when calling deleteDocumentoAta'
            );
        }

        // verify the required parameter 'sequencial_ata' is set
        if ($sequencial_ata === null || (is_array($sequencial_ata) && count($sequencial_ata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_ata when calling deleteDocumentoAta'
            );
        }

        // verify the required parameter 'sequencial_documento' is set
        if ($sequencial_documento === null || (is_array($sequencial_documento) && count($sequencial_documento) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_documento when calling deleteDocumentoAta'
            );
        }



        $resourcePath = '/v1/orgaos/{cnpj}/compras/{anoCompra}/{sequencialCompra}/atas/{sequencialAta}/arquivos/{sequencialDocumento}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano_compra !== null) {
            $resourcePath = str_replace(
                '{' . 'anoCompra' . '}',
                ObjectSerializer::toPathValue($ano_compra),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_compra !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialCompra' . '}',
                ObjectSerializer::toPathValue($sequencial_compra),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_ata !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialAta' . '}',
                ObjectSerializer::toPathValue($sequencial_ata),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_documento !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialDocumento' . '}',
                ObjectSerializer::toPathValue($sequencial_documento),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($exclusao_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($exclusao_dto));
            } else {
                $httpBody = $exclusao_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inserirArquivo3
     *
     * Inserir Documento em Ata de Registro de Preço
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano_compra ano_compra (required)
     * @param  int $sequencial_compra sequencial_compra (required)
     * @param  int $sequencial_ata sequencial_ata (required)
     * @param  string $titulo_documento titulo_documento (required)
     * @param  string $tipo_documento tipo_documento (required)
     * @param  \SplFileObject $arquivo arquivo (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirArquivo3'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object
     */
    public function inserirArquivo3($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $titulo_documento, $tipo_documento, $arquivo, string $contentType = self::contentTypes['inserirArquivo3'][0])
    {
        list($response) = $this->inserirArquivo3WithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $titulo_documento, $tipo_documento, $arquivo, $contentType);
        return $response;
    }

    /**
     * Operation inserirArquivo3WithHttpInfo
     *
     * Inserir Documento em Ata de Registro de Preço
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  string $titulo_documento (required)
     * @param  string $tipo_documento (required)
     * @param  \SplFileObject $arquivo (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirArquivo3'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function inserirArquivo3WithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $titulo_documento, $tipo_documento, $arquivo, string $contentType = self::contentTypes['inserirArquivo3'][0])
    {
        $request = $this->inserirArquivo3Request($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $titulo_documento, $tipo_documento, $arquivo, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inserirArquivo3Async
     *
     * Inserir Documento em Ata de Registro de Preço
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  string $titulo_documento (required)
     * @param  string $tipo_documento (required)
     * @param  \SplFileObject $arquivo (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirArquivo3'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inserirArquivo3Async($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $titulo_documento, $tipo_documento, $arquivo, string $contentType = self::contentTypes['inserirArquivo3'][0])
    {
        return $this->inserirArquivo3AsyncWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $titulo_documento, $tipo_documento, $arquivo, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inserirArquivo3AsyncWithHttpInfo
     *
     * Inserir Documento em Ata de Registro de Preço
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  string $titulo_documento (required)
     * @param  string $tipo_documento (required)
     * @param  \SplFileObject $arquivo (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirArquivo3'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inserirArquivo3AsyncWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $titulo_documento, $tipo_documento, $arquivo, string $contentType = self::contentTypes['inserirArquivo3'][0])
    {
        $returnType = 'object';
        $request = $this->inserirArquivo3Request($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $titulo_documento, $tipo_documento, $arquivo, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inserirArquivo3'
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  string $titulo_documento (required)
     * @param  string $tipo_documento (required)
     * @param  \SplFileObject $arquivo (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirArquivo3'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function inserirArquivo3Request($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $titulo_documento, $tipo_documento, $arquivo, string $contentType = self::contentTypes['inserirArquivo3'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling inserirArquivo3'
            );
        }
        if (strlen($cnpj) > 14) {
            throw new \InvalidArgumentException('invalid length for "$cnpj" when calling AtaApi.inserirArquivo3, must be smaller than or equal to 14.');
        }
        if (strlen($cnpj) < 14) {
            throw new \InvalidArgumentException('invalid length for "$cnpj" when calling AtaApi.inserirArquivo3, must be bigger than or equal to 14.');
        }
        
        // verify the required parameter 'ano_compra' is set
        if ($ano_compra === null || (is_array($ano_compra) && count($ano_compra) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano_compra when calling inserirArquivo3'
            );
        }

        // verify the required parameter 'sequencial_compra' is set
        if ($sequencial_compra === null || (is_array($sequencial_compra) && count($sequencial_compra) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_compra when calling inserirArquivo3'
            );
        }

        // verify the required parameter 'sequencial_ata' is set
        if ($sequencial_ata === null || (is_array($sequencial_ata) && count($sequencial_ata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_ata when calling inserirArquivo3'
            );
        }

        // verify the required parameter 'titulo_documento' is set
        if ($titulo_documento === null || (is_array($titulo_documento) && count($titulo_documento) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $titulo_documento when calling inserirArquivo3'
            );
        }
        if (strlen($titulo_documento) > 255) {
            throw new \InvalidArgumentException('invalid length for "$titulo_documento" when calling AtaApi.inserirArquivo3, must be smaller than or equal to 255.');
        }
        if (strlen($titulo_documento) < 0) {
            throw new \InvalidArgumentException('invalid length for "$titulo_documento" when calling AtaApi.inserirArquivo3, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'tipo_documento' is set
        if ($tipo_documento === null || (is_array($tipo_documento) && count($tipo_documento) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tipo_documento when calling inserirArquivo3'
            );
        }

        // verify the required parameter 'arquivo' is set
        if ($arquivo === null || (is_array($arquivo) && count($arquivo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $arquivo when calling inserirArquivo3'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/compras/{anoCompra}/{sequencialCompra}/atas/{sequencialAta}/arquivos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($titulo_documento !== null) {
            $headerParams['Titulo-Documento'] = ObjectSerializer::toHeaderValue($titulo_documento);
        }
        // header params
        if ($tipo_documento !== null) {
            $headerParams['Tipo-Documento'] = ObjectSerializer::toHeaderValue($tipo_documento);
        }

        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano_compra !== null) {
            $resourcePath = str_replace(
                '{' . 'anoCompra' . '}',
                ObjectSerializer::toPathValue($ano_compra),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_compra !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialCompra' . '}',
                ObjectSerializer::toPathValue($sequencial_compra),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_ata !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialAta' . '}',
                ObjectSerializer::toPathValue($sequencial_ata),
                $resourcePath
            );
        }

        // form params
        if ($arquivo !== null) {
            $multipart = true;
            $formParams['arquivo'] = [];
            $paramFiles = is_array($arquivo) ? $arquivo : [$arquivo];
            foreach ($paramFiles as $paramFile) {
                $formParams['arquivo'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inserirAta
     *
     * Inserir Ata de Registro de Preço
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano_compra ano_compra (required)
     * @param  int $sequencial_compra sequencial_compra (required)
     * @param  \OpenAPI\Client\Model\AtaRegistroPrecoInclusaoDTO $ata_registro_preco_inclusao_dto ata_registro_preco_inclusao_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirAta'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\AtaRegistroPreco
     */
    public function inserirAta($cnpj, $ano_compra, $sequencial_compra, $ata_registro_preco_inclusao_dto, string $contentType = self::contentTypes['inserirAta'][0])
    {
        list($response) = $this->inserirAtaWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $ata_registro_preco_inclusao_dto, $contentType);
        return $response;
    }

    /**
     * Operation inserirAtaWithHttpInfo
     *
     * Inserir Ata de Registro de Preço
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  \OpenAPI\Client\Model\AtaRegistroPrecoInclusaoDTO $ata_registro_preco_inclusao_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirAta'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\AtaRegistroPreco, HTTP status code, HTTP response headers (array of strings)
     */
    public function inserirAtaWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $ata_registro_preco_inclusao_dto, string $contentType = self::contentTypes['inserirAta'][0])
    {
        $request = $this->inserirAtaRequest($cnpj, $ano_compra, $sequencial_compra, $ata_registro_preco_inclusao_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\AtaRegistroPreco' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AtaRegistroPreco' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AtaRegistroPreco', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AtaRegistroPreco';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AtaRegistroPreco',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inserirAtaAsync
     *
     * Inserir Ata de Registro de Preço
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  \OpenAPI\Client\Model\AtaRegistroPrecoInclusaoDTO $ata_registro_preco_inclusao_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirAta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inserirAtaAsync($cnpj, $ano_compra, $sequencial_compra, $ata_registro_preco_inclusao_dto, string $contentType = self::contentTypes['inserirAta'][0])
    {
        return $this->inserirAtaAsyncWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $ata_registro_preco_inclusao_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inserirAtaAsyncWithHttpInfo
     *
     * Inserir Ata de Registro de Preço
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  \OpenAPI\Client\Model\AtaRegistroPrecoInclusaoDTO $ata_registro_preco_inclusao_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirAta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inserirAtaAsyncWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $ata_registro_preco_inclusao_dto, string $contentType = self::contentTypes['inserirAta'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AtaRegistroPreco';
        $request = $this->inserirAtaRequest($cnpj, $ano_compra, $sequencial_compra, $ata_registro_preco_inclusao_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inserirAta'
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  \OpenAPI\Client\Model\AtaRegistroPrecoInclusaoDTO $ata_registro_preco_inclusao_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inserirAta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function inserirAtaRequest($cnpj, $ano_compra, $sequencial_compra, $ata_registro_preco_inclusao_dto, string $contentType = self::contentTypes['inserirAta'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling inserirAta'
            );
        }

        // verify the required parameter 'ano_compra' is set
        if ($ano_compra === null || (is_array($ano_compra) && count($ano_compra) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano_compra when calling inserirAta'
            );
        }

        // verify the required parameter 'sequencial_compra' is set
        if ($sequencial_compra === null || (is_array($sequencial_compra) && count($sequencial_compra) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_compra when calling inserirAta'
            );
        }

        // verify the required parameter 'ata_registro_preco_inclusao_dto' is set
        if ($ata_registro_preco_inclusao_dto === null || (is_array($ata_registro_preco_inclusao_dto) && count($ata_registro_preco_inclusao_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ata_registro_preco_inclusao_dto when calling inserirAta'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/compras/{anoCompra}/{sequencialCompra}/atas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano_compra !== null) {
            $resourcePath = str_replace(
                '{' . 'anoCompra' . '}',
                ObjectSerializer::toPathValue($ano_compra),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_compra !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialCompra' . '}',
                ObjectSerializer::toPathValue($sequencial_compra),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ata_registro_preco_inclusao_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ata_registro_preco_inclusao_dto));
            } else {
                $httpBody = $ata_registro_preco_inclusao_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recuperarArquivo3
     *
     * Recuperar Documento de Ata de Registro de Preço
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano_compra ano_compra (required)
     * @param  int $sequencial_compra sequencial_compra (required)
     * @param  int $sequencial_ata sequencial_ata (required)
     * @param  int $sequencial_documento sequencial_documento (required)
     * @param  bool $ignorar_exclusao ignorar_exclusao (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarArquivo3'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\SplFileObject
     */
    public function recuperarArquivo3($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $sequencial_documento, $ignorar_exclusao = null, string $contentType = self::contentTypes['recuperarArquivo3'][0])
    {
        list($response) = $this->recuperarArquivo3WithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $sequencial_documento, $ignorar_exclusao, $contentType);
        return $response;
    }

    /**
     * Operation recuperarArquivo3WithHttpInfo
     *
     * Recuperar Documento de Ata de Registro de Preço
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  int $sequencial_documento (required)
     * @param  bool $ignorar_exclusao (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarArquivo3'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function recuperarArquivo3WithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $sequencial_documento, $ignorar_exclusao = null, string $contentType = self::contentTypes['recuperarArquivo3'][0])
    {
        $request = $this->recuperarArquivo3Request($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $sequencial_documento, $ignorar_exclusao, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recuperarArquivo3Async
     *
     * Recuperar Documento de Ata de Registro de Preço
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  int $sequencial_documento (required)
     * @param  bool $ignorar_exclusao (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarArquivo3'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarArquivo3Async($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $sequencial_documento, $ignorar_exclusao = null, string $contentType = self::contentTypes['recuperarArquivo3'][0])
    {
        return $this->recuperarArquivo3AsyncWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $sequencial_documento, $ignorar_exclusao, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recuperarArquivo3AsyncWithHttpInfo
     *
     * Recuperar Documento de Ata de Registro de Preço
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  int $sequencial_documento (required)
     * @param  bool $ignorar_exclusao (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarArquivo3'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarArquivo3AsyncWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $sequencial_documento, $ignorar_exclusao = null, string $contentType = self::contentTypes['recuperarArquivo3'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->recuperarArquivo3Request($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $sequencial_documento, $ignorar_exclusao, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recuperarArquivo3'
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  int $sequencial_documento (required)
     * @param  bool $ignorar_exclusao (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarArquivo3'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recuperarArquivo3Request($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $sequencial_documento, $ignorar_exclusao = null, string $contentType = self::contentTypes['recuperarArquivo3'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling recuperarArquivo3'
            );
        }
        if (strlen($cnpj) > 14) {
            throw new \InvalidArgumentException('invalid length for "$cnpj" when calling AtaApi.recuperarArquivo3, must be smaller than or equal to 14.');
        }
        if (strlen($cnpj) < 14) {
            throw new \InvalidArgumentException('invalid length for "$cnpj" when calling AtaApi.recuperarArquivo3, must be bigger than or equal to 14.');
        }
        
        // verify the required parameter 'ano_compra' is set
        if ($ano_compra === null || (is_array($ano_compra) && count($ano_compra) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano_compra when calling recuperarArquivo3'
            );
        }

        // verify the required parameter 'sequencial_compra' is set
        if ($sequencial_compra === null || (is_array($sequencial_compra) && count($sequencial_compra) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_compra when calling recuperarArquivo3'
            );
        }

        // verify the required parameter 'sequencial_ata' is set
        if ($sequencial_ata === null || (is_array($sequencial_ata) && count($sequencial_ata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_ata when calling recuperarArquivo3'
            );
        }

        // verify the required parameter 'sequencial_documento' is set
        if ($sequencial_documento === null || (is_array($sequencial_documento) && count($sequencial_documento) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_documento when calling recuperarArquivo3'
            );
        }



        $resourcePath = '/v1/orgaos/{cnpj}/compras/{anoCompra}/{sequencialCompra}/atas/{sequencialAta}/arquivos/{sequencialDocumento}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ignorar_exclusao,
            'ignorarExclusao', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano_compra !== null) {
            $resourcePath = str_replace(
                '{' . 'anoCompra' . '}',
                ObjectSerializer::toPathValue($ano_compra),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_compra !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialCompra' . '}',
                ObjectSerializer::toPathValue($sequencial_compra),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_ata !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialAta' . '}',
                ObjectSerializer::toPathValue($sequencial_ata),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_documento !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialDocumento' . '}',
                ObjectSerializer::toPathValue($sequencial_documento),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recuperarAtaDocumentoQuantidade
     *
     * Consultar Quantidade de Documentos de Ata
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano_compra ano_compra (required)
     * @param  int $sequencial_compra sequencial_compra (required)
     * @param  int $sequencial_ata sequencial_ata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarAtaDocumentoQuantidade'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|int
     */
    public function recuperarAtaDocumentoQuantidade($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, string $contentType = self::contentTypes['recuperarAtaDocumentoQuantidade'][0])
    {
        list($response) = $this->recuperarAtaDocumentoQuantidadeWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $contentType);
        return $response;
    }

    /**
     * Operation recuperarAtaDocumentoQuantidadeWithHttpInfo
     *
     * Consultar Quantidade de Documentos de Ata
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarAtaDocumentoQuantidade'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|int, HTTP status code, HTTP response headers (array of strings)
     */
    public function recuperarAtaDocumentoQuantidadeWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, string $contentType = self::contentTypes['recuperarAtaDocumentoQuantidade'][0])
    {
        $request = $this->recuperarAtaDocumentoQuantidadeRequest($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recuperarAtaDocumentoQuantidadeAsync
     *
     * Consultar Quantidade de Documentos de Ata
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarAtaDocumentoQuantidade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarAtaDocumentoQuantidadeAsync($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, string $contentType = self::contentTypes['recuperarAtaDocumentoQuantidade'][0])
    {
        return $this->recuperarAtaDocumentoQuantidadeAsyncWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recuperarAtaDocumentoQuantidadeAsyncWithHttpInfo
     *
     * Consultar Quantidade de Documentos de Ata
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarAtaDocumentoQuantidade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarAtaDocumentoQuantidadeAsyncWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, string $contentType = self::contentTypes['recuperarAtaDocumentoQuantidade'][0])
    {
        $returnType = 'int';
        $request = $this->recuperarAtaDocumentoQuantidadeRequest($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recuperarAtaDocumentoQuantidade'
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarAtaDocumentoQuantidade'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recuperarAtaDocumentoQuantidadeRequest($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, string $contentType = self::contentTypes['recuperarAtaDocumentoQuantidade'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling recuperarAtaDocumentoQuantidade'
            );
        }

        // verify the required parameter 'ano_compra' is set
        if ($ano_compra === null || (is_array($ano_compra) && count($ano_compra) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano_compra when calling recuperarAtaDocumentoQuantidade'
            );
        }

        // verify the required parameter 'sequencial_compra' is set
        if ($sequencial_compra === null || (is_array($sequencial_compra) && count($sequencial_compra) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_compra when calling recuperarAtaDocumentoQuantidade'
            );
        }

        // verify the required parameter 'sequencial_ata' is set
        if ($sequencial_ata === null || (is_array($sequencial_ata) && count($sequencial_ata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_ata when calling recuperarAtaDocumentoQuantidade'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/compras/{anoCompra}/{sequencialCompra}/atas/{sequencialAta}/arquivos/quantidade';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano_compra !== null) {
            $resourcePath = str_replace(
                '{' . 'anoCompra' . '}',
                ObjectSerializer::toPathValue($ano_compra),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_compra !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialCompra' . '}',
                ObjectSerializer::toPathValue($sequencial_compra),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_ata !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialAta' . '}',
                ObjectSerializer::toPathValue($sequencial_ata),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recuperarAtaRegistoPreco
     *
     * Consultar Ata de Registro de Preço
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano_compra ano_compra (required)
     * @param  int $sequencial_compra sequencial_compra (required)
     * @param  int $sequencial_ata sequencial_ata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarAtaRegistoPreco'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarAtaRegistroPrecoDTO
     */
    public function recuperarAtaRegistoPreco($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, string $contentType = self::contentTypes['recuperarAtaRegistoPreco'][0])
    {
        list($response) = $this->recuperarAtaRegistoPrecoWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $contentType);
        return $response;
    }

    /**
     * Operation recuperarAtaRegistoPrecoWithHttpInfo
     *
     * Consultar Ata de Registro de Preço
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarAtaRegistoPreco'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarAtaRegistroPrecoDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function recuperarAtaRegistoPrecoWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, string $contentType = self::contentTypes['recuperarAtaRegistoPreco'][0])
    {
        $request = $this->recuperarAtaRegistoPrecoRequest($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\RecuperarAtaRegistroPrecoDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RecuperarAtaRegistroPrecoDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RecuperarAtaRegistroPrecoDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RecuperarAtaRegistroPrecoDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RecuperarAtaRegistroPrecoDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recuperarAtaRegistoPrecoAsync
     *
     * Consultar Ata de Registro de Preço
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarAtaRegistoPreco'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarAtaRegistoPrecoAsync($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, string $contentType = self::contentTypes['recuperarAtaRegistoPreco'][0])
    {
        return $this->recuperarAtaRegistoPrecoAsyncWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recuperarAtaRegistoPrecoAsyncWithHttpInfo
     *
     * Consultar Ata de Registro de Preço
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarAtaRegistoPreco'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarAtaRegistoPrecoAsyncWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, string $contentType = self::contentTypes['recuperarAtaRegistoPreco'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RecuperarAtaRegistroPrecoDTO';
        $request = $this->recuperarAtaRegistoPrecoRequest($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recuperarAtaRegistoPreco'
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarAtaRegistoPreco'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recuperarAtaRegistoPrecoRequest($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, string $contentType = self::contentTypes['recuperarAtaRegistoPreco'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling recuperarAtaRegistoPreco'
            );
        }

        // verify the required parameter 'ano_compra' is set
        if ($ano_compra === null || (is_array($ano_compra) && count($ano_compra) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano_compra when calling recuperarAtaRegistoPreco'
            );
        }

        // verify the required parameter 'sequencial_compra' is set
        if ($sequencial_compra === null || (is_array($sequencial_compra) && count($sequencial_compra) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_compra when calling recuperarAtaRegistoPreco'
            );
        }

        // verify the required parameter 'sequencial_ata' is set
        if ($sequencial_ata === null || (is_array($sequencial_ata) && count($sequencial_ata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_ata when calling recuperarAtaRegistoPreco'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/compras/{anoCompra}/{sequencialCompra}/atas/{sequencialAta}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano_compra !== null) {
            $resourcePath = str_replace(
                '{' . 'anoCompra' . '}',
                ObjectSerializer::toPathValue($ano_compra),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_compra !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialCompra' . '}',
                ObjectSerializer::toPathValue($sequencial_compra),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_ata !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialAta' . '}',
                ObjectSerializer::toPathValue($sequencial_ata),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recuperarAtasPorFiltros
     *
     * Consultar Atas de Registro de Preço por Compra
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano_compra ano_compra (required)
     * @param  int $sequencial_compra sequencial_compra (required)
     * @param  int $pagina pagina (optional)
     * @param  int $tamanho_pagina tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarAtasPorFiltros'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\PaginaRetornoAtaRegistroPrecoDTO
     */
    public function recuperarAtasPorFiltros($cnpj, $ano_compra, $sequencial_compra, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarAtasPorFiltros'][0])
    {
        list($response) = $this->recuperarAtasPorFiltrosWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $pagina, $tamanho_pagina, $contentType);
        return $response;
    }

    /**
     * Operation recuperarAtasPorFiltrosWithHttpInfo
     *
     * Consultar Atas de Registro de Preço por Compra
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarAtasPorFiltros'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\PaginaRetornoAtaRegistroPrecoDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function recuperarAtasPorFiltrosWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarAtasPorFiltros'][0])
    {
        $request = $this->recuperarAtasPorFiltrosRequest($cnpj, $ano_compra, $sequencial_compra, $pagina, $tamanho_pagina, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\PaginaRetornoAtaRegistroPrecoDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PaginaRetornoAtaRegistroPrecoDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PaginaRetornoAtaRegistroPrecoDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PaginaRetornoAtaRegistroPrecoDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PaginaRetornoAtaRegistroPrecoDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recuperarAtasPorFiltrosAsync
     *
     * Consultar Atas de Registro de Preço por Compra
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarAtasPorFiltros'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarAtasPorFiltrosAsync($cnpj, $ano_compra, $sequencial_compra, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarAtasPorFiltros'][0])
    {
        return $this->recuperarAtasPorFiltrosAsyncWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $pagina, $tamanho_pagina, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recuperarAtasPorFiltrosAsyncWithHttpInfo
     *
     * Consultar Atas de Registro de Preço por Compra
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarAtasPorFiltros'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarAtasPorFiltrosAsyncWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarAtasPorFiltros'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PaginaRetornoAtaRegistroPrecoDTO';
        $request = $this->recuperarAtasPorFiltrosRequest($cnpj, $ano_compra, $sequencial_compra, $pagina, $tamanho_pagina, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recuperarAtasPorFiltros'
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarAtasPorFiltros'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recuperarAtasPorFiltrosRequest($cnpj, $ano_compra, $sequencial_compra, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarAtasPorFiltros'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling recuperarAtasPorFiltros'
            );
        }

        // verify the required parameter 'ano_compra' is set
        if ($ano_compra === null || (is_array($ano_compra) && count($ano_compra) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano_compra when calling recuperarAtasPorFiltros'
            );
        }

        // verify the required parameter 'sequencial_compra' is set
        if ($sequencial_compra === null || (is_array($sequencial_compra) && count($sequencial_compra) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_compra when calling recuperarAtasPorFiltros'
            );
        }

        if ($pagina !== null && $pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$pagina" when calling AtaApi.recuperarAtasPorFiltros, must be bigger than or equal to 1.');
        }
        
        if ($tamanho_pagina !== null && $tamanho_pagina < 10) {
            throw new \InvalidArgumentException('invalid value for "$tamanho_pagina" when calling AtaApi.recuperarAtasPorFiltros, must be bigger than or equal to 10.');
        }
        

        $resourcePath = '/v1/orgaos/{cnpj}/compras/{anoCompra}/{sequencialCompra}/atas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tamanho_pagina,
            'tamanhoPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano_compra !== null) {
            $resourcePath = str_replace(
                '{' . 'anoCompra' . '}',
                ObjectSerializer::toPathValue($ano_compra),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_compra !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialCompra' . '}',
                ObjectSerializer::toPathValue($sequencial_compra),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recuperarInformacoesDocumentosAta
     *
     * Consultar Dados de Todos os Documentos de uma Ata de Registro de Preço
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano_compra ano_compra (required)
     * @param  int $sequencial_compra sequencial_compra (required)
     * @param  int $sequencial_ata sequencial_ata (required)
     * @param  int $pagina pagina (optional)
     * @param  int $tamanho_pagina tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarInformacoesDocumentosAta'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarDadosDocumentoAtaDTO[]
     */
    public function recuperarInformacoesDocumentosAta($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarInformacoesDocumentosAta'][0])
    {
        list($response) = $this->recuperarInformacoesDocumentosAtaWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $pagina, $tamanho_pagina, $contentType);
        return $response;
    }

    /**
     * Operation recuperarInformacoesDocumentosAtaWithHttpInfo
     *
     * Consultar Dados de Todos os Documentos de uma Ata de Registro de Preço
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarInformacoesDocumentosAta'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\RecuperarDadosDocumentoAtaDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function recuperarInformacoesDocumentosAtaWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarInformacoesDocumentosAta'][0])
    {
        $request = $this->recuperarInformacoesDocumentosAtaRequest($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $pagina, $tamanho_pagina, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\RecuperarDadosDocumentoAtaDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RecuperarDadosDocumentoAtaDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RecuperarDadosDocumentoAtaDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RecuperarDadosDocumentoAtaDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RecuperarDadosDocumentoAtaDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recuperarInformacoesDocumentosAtaAsync
     *
     * Consultar Dados de Todos os Documentos de uma Ata de Registro de Preço
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarInformacoesDocumentosAta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarInformacoesDocumentosAtaAsync($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarInformacoesDocumentosAta'][0])
    {
        return $this->recuperarInformacoesDocumentosAtaAsyncWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $pagina, $tamanho_pagina, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recuperarInformacoesDocumentosAtaAsyncWithHttpInfo
     *
     * Consultar Dados de Todos os Documentos de uma Ata de Registro de Preço
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarInformacoesDocumentosAta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recuperarInformacoesDocumentosAtaAsyncWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarInformacoesDocumentosAta'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RecuperarDadosDocumentoAtaDTO[]';
        $request = $this->recuperarInformacoesDocumentosAtaRequest($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $pagina, $tamanho_pagina, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recuperarInformacoesDocumentosAta'
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  int $pagina (optional)
     * @param  int $tamanho_pagina (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recuperarInformacoesDocumentosAta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recuperarInformacoesDocumentosAtaRequest($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $pagina = null, $tamanho_pagina = null, string $contentType = self::contentTypes['recuperarInformacoesDocumentosAta'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling recuperarInformacoesDocumentosAta'
            );
        }
        if (strlen($cnpj) > 14) {
            throw new \InvalidArgumentException('invalid length for "$cnpj" when calling AtaApi.recuperarInformacoesDocumentosAta, must be smaller than or equal to 14.');
        }
        if (strlen($cnpj) < 14) {
            throw new \InvalidArgumentException('invalid length for "$cnpj" when calling AtaApi.recuperarInformacoesDocumentosAta, must be bigger than or equal to 14.');
        }
        
        // verify the required parameter 'ano_compra' is set
        if ($ano_compra === null || (is_array($ano_compra) && count($ano_compra) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano_compra when calling recuperarInformacoesDocumentosAta'
            );
        }

        // verify the required parameter 'sequencial_compra' is set
        if ($sequencial_compra === null || (is_array($sequencial_compra) && count($sequencial_compra) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_compra when calling recuperarInformacoesDocumentosAta'
            );
        }

        // verify the required parameter 'sequencial_ata' is set
        if ($sequencial_ata === null || (is_array($sequencial_ata) && count($sequencial_ata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_ata when calling recuperarInformacoesDocumentosAta'
            );
        }

        if ($pagina !== null && $pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$pagina" when calling AtaApi.recuperarInformacoesDocumentosAta, must be bigger than or equal to 1.');
        }
        
        if ($tamanho_pagina !== null && $tamanho_pagina < 1) {
            throw new \InvalidArgumentException('invalid value for "$tamanho_pagina" when calling AtaApi.recuperarInformacoesDocumentosAta, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v1/orgaos/{cnpj}/compras/{anoCompra}/{sequencialCompra}/atas/{sequencialAta}/arquivos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pagina,
            'pagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tamanho_pagina,
            'tamanhoPagina', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano_compra !== null) {
            $resourcePath = str_replace(
                '{' . 'anoCompra' . '}',
                ObjectSerializer::toPathValue($ano_compra),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_compra !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialCompra' . '}',
                ObjectSerializer::toPathValue($sequencial_compra),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_ata !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialAta' . '}',
                ObjectSerializer::toPathValue($sequencial_ata),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retificarAta
     *
     * Retificar Ata de Registro de Preço
     *
     * @param  string $cnpj cnpj (required)
     * @param  int $ano_compra ano_compra (required)
     * @param  int $sequencial_compra sequencial_compra (required)
     * @param  int $sequencial_ata sequencial_ata (required)
     * @param  \OpenAPI\Client\Model\AtaRegistroPrecoAlteracaoDTO $ata_registro_preco_alteracao_dto ata_registro_preco_alteracao_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarAta'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\AtaRegistroPrecoDTO
     */
    public function retificarAta($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $ata_registro_preco_alteracao_dto, string $contentType = self::contentTypes['retificarAta'][0])
    {
        list($response) = $this->retificarAtaWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $ata_registro_preco_alteracao_dto, $contentType);
        return $response;
    }

    /**
     * Operation retificarAtaWithHttpInfo
     *
     * Retificar Ata de Registro de Preço
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  \OpenAPI\Client\Model\AtaRegistroPrecoAlteracaoDTO $ata_registro_preco_alteracao_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarAta'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Get400Response|array<string,string>|array<string,string>|string|string|\OpenAPI\Client\Model\AtaRegistroPrecoDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function retificarAtaWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $ata_registro_preco_alteracao_dto, string $contentType = self::contentTypes['retificarAta'][0])
    {
        $request = $this->retificarAtaRequest($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $ata_registro_preco_alteracao_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\Get400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Get400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Get400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 204:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\AtaRegistroPrecoDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AtaRegistroPrecoDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AtaRegistroPrecoDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AtaRegistroPrecoDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Get400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AtaRegistroPrecoDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retificarAtaAsync
     *
     * Retificar Ata de Registro de Preço
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  \OpenAPI\Client\Model\AtaRegistroPrecoAlteracaoDTO $ata_registro_preco_alteracao_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarAta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retificarAtaAsync($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $ata_registro_preco_alteracao_dto, string $contentType = self::contentTypes['retificarAta'][0])
    {
        return $this->retificarAtaAsyncWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $ata_registro_preco_alteracao_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retificarAtaAsyncWithHttpInfo
     *
     * Retificar Ata de Registro de Preço
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  \OpenAPI\Client\Model\AtaRegistroPrecoAlteracaoDTO $ata_registro_preco_alteracao_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarAta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retificarAtaAsyncWithHttpInfo($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $ata_registro_preco_alteracao_dto, string $contentType = self::contentTypes['retificarAta'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AtaRegistroPrecoDTO';
        $request = $this->retificarAtaRequest($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $ata_registro_preco_alteracao_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retificarAta'
     *
     * @param  string $cnpj (required)
     * @param  int $ano_compra (required)
     * @param  int $sequencial_compra (required)
     * @param  int $sequencial_ata (required)
     * @param  \OpenAPI\Client\Model\AtaRegistroPrecoAlteracaoDTO $ata_registro_preco_alteracao_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retificarAta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retificarAtaRequest($cnpj, $ano_compra, $sequencial_compra, $sequencial_ata, $ata_registro_preco_alteracao_dto, string $contentType = self::contentTypes['retificarAta'][0])
    {

        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling retificarAta'
            );
        }

        // verify the required parameter 'ano_compra' is set
        if ($ano_compra === null || (is_array($ano_compra) && count($ano_compra) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ano_compra when calling retificarAta'
            );
        }

        // verify the required parameter 'sequencial_compra' is set
        if ($sequencial_compra === null || (is_array($sequencial_compra) && count($sequencial_compra) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_compra when calling retificarAta'
            );
        }

        // verify the required parameter 'sequencial_ata' is set
        if ($sequencial_ata === null || (is_array($sequencial_ata) && count($sequencial_ata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sequencial_ata when calling retificarAta'
            );
        }

        // verify the required parameter 'ata_registro_preco_alteracao_dto' is set
        if ($ata_registro_preco_alteracao_dto === null || (is_array($ata_registro_preco_alteracao_dto) && count($ata_registro_preco_alteracao_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ata_registro_preco_alteracao_dto when calling retificarAta'
            );
        }


        $resourcePath = '/v1/orgaos/{cnpj}/compras/{anoCompra}/{sequencialCompra}/atas/{sequencialAta}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($cnpj !== null) {
            $resourcePath = str_replace(
                '{' . 'cnpj' . '}',
                ObjectSerializer::toPathValue($cnpj),
                $resourcePath
            );
        }
        // path params
        if ($ano_compra !== null) {
            $resourcePath = str_replace(
                '{' . 'anoCompra' . '}',
                ObjectSerializer::toPathValue($ano_compra),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_compra !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialCompra' . '}',
                ObjectSerializer::toPathValue($sequencial_compra),
                $resourcePath
            );
        }
        // path params
        if ($sequencial_ata !== null) {
            $resourcePath = str_replace(
                '{' . 'sequencialAta' . '}',
                ObjectSerializer::toPathValue($sequencial_ata),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ata_registro_preco_alteracao_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($ata_registro_preco_alteracao_dto));
            } else {
                $httpBody = $ata_registro_preco_alteracao_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
