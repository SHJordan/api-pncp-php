<?php
/**
 * IncluirPlanoContratacaoItemDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API PNCP
 *
 * API REST de serviços do Portal Nacional de Contratações Públicas (PNCP)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: css.serpro@serpro.gov.br
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * IncluirPlanoContratacaoItemDTO Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IncluirPlanoContratacaoItemDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IncluirPlanoContratacaoItemDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'numero_item' => 'int',
        'categoria_item_pca' => 'string',
        'descricao' => 'string',
        'unidade_fornecimento' => 'string',
        'quantidade' => 'float',
        'valor_unitario' => 'float',
        'valor_total' => 'float',
        'valor_orcamento_exercicio' => 'float',
        'unidade_requisitante' => 'string',
        'data_desejada' => '\DateTime',
        'grupo_contratacao_codigo' => 'string',
        'grupo_contratacao_nome' => 'string',
        'catalogo' => 'string',
        'classificacao_catalogo' => 'string',
        'codigo_item' => 'string',
        'classificacao_superior_codigo' => 'string',
        'classificacao_superior_nome' => 'string',
        'pdm_codigo' => 'string',
        'pdm_descricao' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'numero_item' => 'int32',
        'categoria_item_pca' => null,
        'descricao' => null,
        'unidade_fornecimento' => null,
        'quantidade' => null,
        'valor_unitario' => null,
        'valor_total' => null,
        'valor_orcamento_exercicio' => null,
        'unidade_requisitante' => null,
        'data_desejada' => 'date',
        'grupo_contratacao_codigo' => null,
        'grupo_contratacao_nome' => null,
        'catalogo' => null,
        'classificacao_catalogo' => null,
        'codigo_item' => null,
        'classificacao_superior_codigo' => null,
        'classificacao_superior_nome' => null,
        'pdm_codigo' => null,
        'pdm_descricao' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'numero_item' => false,
		'categoria_item_pca' => false,
		'descricao' => false,
		'unidade_fornecimento' => false,
		'quantidade' => false,
		'valor_unitario' => false,
		'valor_total' => false,
		'valor_orcamento_exercicio' => false,
		'unidade_requisitante' => false,
		'data_desejada' => false,
		'grupo_contratacao_codigo' => false,
		'grupo_contratacao_nome' => false,
		'catalogo' => false,
		'classificacao_catalogo' => false,
		'codigo_item' => false,
		'classificacao_superior_codigo' => false,
		'classificacao_superior_nome' => false,
		'pdm_codigo' => false,
		'pdm_descricao' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'numero_item' => 'numeroItem',
        'categoria_item_pca' => 'categoriaItemPca',
        'descricao' => 'descricao',
        'unidade_fornecimento' => 'unidadeFornecimento',
        'quantidade' => 'quantidade',
        'valor_unitario' => 'valorUnitario',
        'valor_total' => 'valorTotal',
        'valor_orcamento_exercicio' => 'valorOrcamentoExercicio',
        'unidade_requisitante' => 'unidadeRequisitante',
        'data_desejada' => 'dataDesejada',
        'grupo_contratacao_codigo' => 'grupoContratacaoCodigo',
        'grupo_contratacao_nome' => 'grupoContratacaoNome',
        'catalogo' => 'catalogo',
        'classificacao_catalogo' => 'classificacaoCatalogo',
        'codigo_item' => 'codigoItem',
        'classificacao_superior_codigo' => 'classificacaoSuperiorCodigo',
        'classificacao_superior_nome' => 'classificacaoSuperiorNome',
        'pdm_codigo' => 'pdmCodigo',
        'pdm_descricao' => 'pdmDescricao'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'numero_item' => 'setNumeroItem',
        'categoria_item_pca' => 'setCategoriaItemPca',
        'descricao' => 'setDescricao',
        'unidade_fornecimento' => 'setUnidadeFornecimento',
        'quantidade' => 'setQuantidade',
        'valor_unitario' => 'setValorUnitario',
        'valor_total' => 'setValorTotal',
        'valor_orcamento_exercicio' => 'setValorOrcamentoExercicio',
        'unidade_requisitante' => 'setUnidadeRequisitante',
        'data_desejada' => 'setDataDesejada',
        'grupo_contratacao_codigo' => 'setGrupoContratacaoCodigo',
        'grupo_contratacao_nome' => 'setGrupoContratacaoNome',
        'catalogo' => 'setCatalogo',
        'classificacao_catalogo' => 'setClassificacaoCatalogo',
        'codigo_item' => 'setCodigoItem',
        'classificacao_superior_codigo' => 'setClassificacaoSuperiorCodigo',
        'classificacao_superior_nome' => 'setClassificacaoSuperiorNome',
        'pdm_codigo' => 'setPdmCodigo',
        'pdm_descricao' => 'setPdmDescricao'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'numero_item' => 'getNumeroItem',
        'categoria_item_pca' => 'getCategoriaItemPca',
        'descricao' => 'getDescricao',
        'unidade_fornecimento' => 'getUnidadeFornecimento',
        'quantidade' => 'getQuantidade',
        'valor_unitario' => 'getValorUnitario',
        'valor_total' => 'getValorTotal',
        'valor_orcamento_exercicio' => 'getValorOrcamentoExercicio',
        'unidade_requisitante' => 'getUnidadeRequisitante',
        'data_desejada' => 'getDataDesejada',
        'grupo_contratacao_codigo' => 'getGrupoContratacaoCodigo',
        'grupo_contratacao_nome' => 'getGrupoContratacaoNome',
        'catalogo' => 'getCatalogo',
        'classificacao_catalogo' => 'getClassificacaoCatalogo',
        'codigo_item' => 'getCodigoItem',
        'classificacao_superior_codigo' => 'getClassificacaoSuperiorCodigo',
        'classificacao_superior_nome' => 'getClassificacaoSuperiorNome',
        'pdm_codigo' => 'getPdmCodigo',
        'pdm_descricao' => 'getPdmDescricao'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CATEGORIA_ITEM_PCA__1 = '1';
    public const CATEGORIA_ITEM_PCA__2 = '2';
    public const CATEGORIA_ITEM_PCA__3 = '3';
    public const CATEGORIA_ITEM_PCA__4 = '4';
    public const CATEGORIA_ITEM_PCA__5 = '5';
    public const CATEGORIA_ITEM_PCA__6 = '6';
    public const CATEGORIA_ITEM_PCA__7 = '7';
    public const CATEGORIA_ITEM_PCA__8 = '8';
    public const CATALOGO__1 = '1';
    public const CATALOGO__2 = '2';
    public const CLASSIFICACAO_CATALOGO__1 = '1';
    public const CLASSIFICACAO_CATALOGO__2 = '2';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCategoriaItemPcaAllowableValues()
    {
        return [
            self::CATEGORIA_ITEM_PCA__1,
            self::CATEGORIA_ITEM_PCA__2,
            self::CATEGORIA_ITEM_PCA__3,
            self::CATEGORIA_ITEM_PCA__4,
            self::CATEGORIA_ITEM_PCA__5,
            self::CATEGORIA_ITEM_PCA__6,
            self::CATEGORIA_ITEM_PCA__7,
            self::CATEGORIA_ITEM_PCA__8,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCatalogoAllowableValues()
    {
        return [
            self::CATALOGO__1,
            self::CATALOGO__2,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClassificacaoCatalogoAllowableValues()
    {
        return [
            self::CLASSIFICACAO_CATALOGO__1,
            self::CLASSIFICACAO_CATALOGO__2,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('numero_item', $data ?? [], null);
        $this->setIfExists('categoria_item_pca', $data ?? [], null);
        $this->setIfExists('descricao', $data ?? [], null);
        $this->setIfExists('unidade_fornecimento', $data ?? [], null);
        $this->setIfExists('quantidade', $data ?? [], null);
        $this->setIfExists('valor_unitario', $data ?? [], null);
        $this->setIfExists('valor_total', $data ?? [], null);
        $this->setIfExists('valor_orcamento_exercicio', $data ?? [], null);
        $this->setIfExists('unidade_requisitante', $data ?? [], null);
        $this->setIfExists('data_desejada', $data ?? [], null);
        $this->setIfExists('grupo_contratacao_codigo', $data ?? [], null);
        $this->setIfExists('grupo_contratacao_nome', $data ?? [], null);
        $this->setIfExists('catalogo', $data ?? [], null);
        $this->setIfExists('classificacao_catalogo', $data ?? [], null);
        $this->setIfExists('codigo_item', $data ?? [], null);
        $this->setIfExists('classificacao_superior_codigo', $data ?? [], null);
        $this->setIfExists('classificacao_superior_nome', $data ?? [], null);
        $this->setIfExists('pdm_codigo', $data ?? [], null);
        $this->setIfExists('pdm_descricao', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['numero_item'] === null) {
            $invalidProperties[] = "'numero_item' can't be null";
        }
        if ($this->container['categoria_item_pca'] === null) {
            $invalidProperties[] = "'categoria_item_pca' can't be null";
        }
        $allowedValues = $this->getCategoriaItemPcaAllowableValues();
        if (!is_null($this->container['categoria_item_pca']) && !in_array($this->container['categoria_item_pca'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'categoria_item_pca', must be one of '%s'",
                $this->container['categoria_item_pca'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['descricao']) && (mb_strlen($this->container['descricao']) > 2048)) {
            $invalidProperties[] = "invalid value for 'descricao', the character length must be smaller than or equal to 2048.";
        }

        if (!is_null($this->container['descricao']) && (mb_strlen($this->container['descricao']) < 0)) {
            $invalidProperties[] = "invalid value for 'descricao', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['unidade_fornecimento'] === null) {
            $invalidProperties[] = "'unidade_fornecimento' can't be null";
        }
        if ((mb_strlen($this->container['unidade_fornecimento']) > 255)) {
            $invalidProperties[] = "invalid value for 'unidade_fornecimento', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['unidade_fornecimento']) < 0)) {
            $invalidProperties[] = "invalid value for 'unidade_fornecimento', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['quantidade'] === null) {
            $invalidProperties[] = "'quantidade' can't be null";
        }
        if (($this->container['quantidade'] < 0)) {
            $invalidProperties[] = "invalid value for 'quantidade', must be bigger than or equal to 0.";
        }

        if ($this->container['valor_unitario'] === null) {
            $invalidProperties[] = "'valor_unitario' can't be null";
        }
        if (($this->container['valor_unitario'] < 0)) {
            $invalidProperties[] = "invalid value for 'valor_unitario', must be bigger than or equal to 0.";
        }

        if ($this->container['valor_total'] === null) {
            $invalidProperties[] = "'valor_total' can't be null";
        }
        if (($this->container['valor_total'] < 0)) {
            $invalidProperties[] = "invalid value for 'valor_total', must be bigger than or equal to 0.";
        }

        if ($this->container['valor_orcamento_exercicio'] === null) {
            $invalidProperties[] = "'valor_orcamento_exercicio' can't be null";
        }
        if (($this->container['valor_orcamento_exercicio'] < 0)) {
            $invalidProperties[] = "invalid value for 'valor_orcamento_exercicio', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['unidade_requisitante']) && (mb_strlen($this->container['unidade_requisitante']) > 255)) {
            $invalidProperties[] = "invalid value for 'unidade_requisitante', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['unidade_requisitante']) && (mb_strlen($this->container['unidade_requisitante']) < 0)) {
            $invalidProperties[] = "invalid value for 'unidade_requisitante', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['data_desejada'] === null) {
            $invalidProperties[] = "'data_desejada' can't be null";
        }
        if (!is_null($this->container['grupo_contratacao_codigo']) && (mb_strlen($this->container['grupo_contratacao_codigo']) > 100)) {
            $invalidProperties[] = "invalid value for 'grupo_contratacao_codigo', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['grupo_contratacao_codigo']) && (mb_strlen($this->container['grupo_contratacao_codigo']) < 0)) {
            $invalidProperties[] = "invalid value for 'grupo_contratacao_codigo', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['grupo_contratacao_nome']) && (mb_strlen($this->container['grupo_contratacao_nome']) > 255)) {
            $invalidProperties[] = "invalid value for 'grupo_contratacao_nome', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['grupo_contratacao_nome']) && (mb_strlen($this->container['grupo_contratacao_nome']) < 0)) {
            $invalidProperties[] = "invalid value for 'grupo_contratacao_nome', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['catalogo'] === null) {
            $invalidProperties[] = "'catalogo' can't be null";
        }
        $allowedValues = $this->getCatalogoAllowableValues();
        if (!is_null($this->container['catalogo']) && !in_array($this->container['catalogo'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'catalogo', must be one of '%s'",
                $this->container['catalogo'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['classificacao_catalogo'] === null) {
            $invalidProperties[] = "'classificacao_catalogo' can't be null";
        }
        $allowedValues = $this->getClassificacaoCatalogoAllowableValues();
        if (!is_null($this->container['classificacao_catalogo']) && !in_array($this->container['classificacao_catalogo'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'classificacao_catalogo', must be one of '%s'",
                $this->container['classificacao_catalogo'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['codigo_item']) && (mb_strlen($this->container['codigo_item']) > 100)) {
            $invalidProperties[] = "invalid value for 'codigo_item', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['codigo_item']) && (mb_strlen($this->container['codigo_item']) < 0)) {
            $invalidProperties[] = "invalid value for 'codigo_item', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['classificacao_superior_codigo'] === null) {
            $invalidProperties[] = "'classificacao_superior_codigo' can't be null";
        }
        if ((mb_strlen($this->container['classificacao_superior_codigo']) > 100)) {
            $invalidProperties[] = "invalid value for 'classificacao_superior_codigo', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['classificacao_superior_codigo']) < 0)) {
            $invalidProperties[] = "invalid value for 'classificacao_superior_codigo', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['classificacao_superior_nome'] === null) {
            $invalidProperties[] = "'classificacao_superior_nome' can't be null";
        }
        if ((mb_strlen($this->container['classificacao_superior_nome']) > 255)) {
            $invalidProperties[] = "invalid value for 'classificacao_superior_nome', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['classificacao_superior_nome']) < 0)) {
            $invalidProperties[] = "invalid value for 'classificacao_superior_nome', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['pdm_codigo']) && (mb_strlen($this->container['pdm_codigo']) > 100)) {
            $invalidProperties[] = "invalid value for 'pdm_codigo', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['pdm_codigo']) && (mb_strlen($this->container['pdm_codigo']) < 0)) {
            $invalidProperties[] = "invalid value for 'pdm_codigo', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['pdm_descricao']) && (mb_strlen($this->container['pdm_descricao']) > 255)) {
            $invalidProperties[] = "invalid value for 'pdm_descricao', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['pdm_descricao']) && (mb_strlen($this->container['pdm_descricao']) < 0)) {
            $invalidProperties[] = "invalid value for 'pdm_descricao', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets numero_item
     *
     * @return int
     */
    public function getNumeroItem()
    {
        return $this->container['numero_item'];
    }

    /**
     * Sets numero_item
     *
     * @param int $numero_item numero_item
     *
     * @return self
     */
    public function setNumeroItem($numero_item)
    {
        if (is_null($numero_item)) {
            throw new \InvalidArgumentException('non-nullable numero_item cannot be null');
        }
        $this->container['numero_item'] = $numero_item;

        return $this;
    }

    /**
     * Gets categoria_item_pca
     *
     * @return string
     */
    public function getCategoriaItemPca()
    {
        return $this->container['categoria_item_pca'];
    }

    /**
     * Sets categoria_item_pca
     *
     * @param string $categoria_item_pca categoria_item_pca
     *
     * @return self
     */
    public function setCategoriaItemPca($categoria_item_pca)
    {
        if (is_null($categoria_item_pca)) {
            throw new \InvalidArgumentException('non-nullable categoria_item_pca cannot be null');
        }
        $allowedValues = $this->getCategoriaItemPcaAllowableValues();
        if (!in_array($categoria_item_pca, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'categoria_item_pca', must be one of '%s'",
                    $categoria_item_pca,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['categoria_item_pca'] = $categoria_item_pca;

        return $this;
    }

    /**
     * Gets descricao
     *
     * @return string|null
     */
    public function getDescricao()
    {
        return $this->container['descricao'];
    }

    /**
     * Sets descricao
     *
     * @param string|null $descricao descricao
     *
     * @return self
     */
    public function setDescricao($descricao)
    {
        if (is_null($descricao)) {
            throw new \InvalidArgumentException('non-nullable descricao cannot be null');
        }
        if ((mb_strlen($descricao) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $descricao when calling IncluirPlanoContratacaoItemDTO., must be smaller than or equal to 2048.');
        }
        if ((mb_strlen($descricao) < 0)) {
            throw new \InvalidArgumentException('invalid length for $descricao when calling IncluirPlanoContratacaoItemDTO., must be bigger than or equal to 0.');
        }

        $this->container['descricao'] = $descricao;

        return $this;
    }

    /**
     * Gets unidade_fornecimento
     *
     * @return string
     */
    public function getUnidadeFornecimento()
    {
        return $this->container['unidade_fornecimento'];
    }

    /**
     * Sets unidade_fornecimento
     *
     * @param string $unidade_fornecimento unidade_fornecimento
     *
     * @return self
     */
    public function setUnidadeFornecimento($unidade_fornecimento)
    {
        if (is_null($unidade_fornecimento)) {
            throw new \InvalidArgumentException('non-nullable unidade_fornecimento cannot be null');
        }
        if ((mb_strlen($unidade_fornecimento) > 255)) {
            throw new \InvalidArgumentException('invalid length for $unidade_fornecimento when calling IncluirPlanoContratacaoItemDTO., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($unidade_fornecimento) < 0)) {
            throw new \InvalidArgumentException('invalid length for $unidade_fornecimento when calling IncluirPlanoContratacaoItemDTO., must be bigger than or equal to 0.');
        }

        $this->container['unidade_fornecimento'] = $unidade_fornecimento;

        return $this;
    }

    /**
     * Gets quantidade
     *
     * @return float
     */
    public function getQuantidade()
    {
        return $this->container['quantidade'];
    }

    /**
     * Sets quantidade
     *
     * @param float $quantidade quantidade
     *
     * @return self
     */
    public function setQuantidade($quantidade)
    {
        if (is_null($quantidade)) {
            throw new \InvalidArgumentException('non-nullable quantidade cannot be null');
        }

        if (($quantidade < 0)) {
            throw new \InvalidArgumentException('invalid value for $quantidade when calling IncluirPlanoContratacaoItemDTO., must be bigger than or equal to 0.');
        }

        $this->container['quantidade'] = $quantidade;

        return $this;
    }

    /**
     * Gets valor_unitario
     *
     * @return float
     */
    public function getValorUnitario()
    {
        return $this->container['valor_unitario'];
    }

    /**
     * Sets valor_unitario
     *
     * @param float $valor_unitario valor_unitario
     *
     * @return self
     */
    public function setValorUnitario($valor_unitario)
    {
        if (is_null($valor_unitario)) {
            throw new \InvalidArgumentException('non-nullable valor_unitario cannot be null');
        }

        if (($valor_unitario < 0)) {
            throw new \InvalidArgumentException('invalid value for $valor_unitario when calling IncluirPlanoContratacaoItemDTO., must be bigger than or equal to 0.');
        }

        $this->container['valor_unitario'] = $valor_unitario;

        return $this;
    }

    /**
     * Gets valor_total
     *
     * @return float
     */
    public function getValorTotal()
    {
        return $this->container['valor_total'];
    }

    /**
     * Sets valor_total
     *
     * @param float $valor_total valor_total
     *
     * @return self
     */
    public function setValorTotal($valor_total)
    {
        if (is_null($valor_total)) {
            throw new \InvalidArgumentException('non-nullable valor_total cannot be null');
        }

        if (($valor_total < 0)) {
            throw new \InvalidArgumentException('invalid value for $valor_total when calling IncluirPlanoContratacaoItemDTO., must be bigger than or equal to 0.');
        }

        $this->container['valor_total'] = $valor_total;

        return $this;
    }

    /**
     * Gets valor_orcamento_exercicio
     *
     * @return float
     */
    public function getValorOrcamentoExercicio()
    {
        return $this->container['valor_orcamento_exercicio'];
    }

    /**
     * Sets valor_orcamento_exercicio
     *
     * @param float $valor_orcamento_exercicio valor_orcamento_exercicio
     *
     * @return self
     */
    public function setValorOrcamentoExercicio($valor_orcamento_exercicio)
    {
        if (is_null($valor_orcamento_exercicio)) {
            throw new \InvalidArgumentException('non-nullable valor_orcamento_exercicio cannot be null');
        }

        if (($valor_orcamento_exercicio < 0)) {
            throw new \InvalidArgumentException('invalid value for $valor_orcamento_exercicio when calling IncluirPlanoContratacaoItemDTO., must be bigger than or equal to 0.');
        }

        $this->container['valor_orcamento_exercicio'] = $valor_orcamento_exercicio;

        return $this;
    }

    /**
     * Gets unidade_requisitante
     *
     * @return string|null
     */
    public function getUnidadeRequisitante()
    {
        return $this->container['unidade_requisitante'];
    }

    /**
     * Sets unidade_requisitante
     *
     * @param string|null $unidade_requisitante unidade_requisitante
     *
     * @return self
     */
    public function setUnidadeRequisitante($unidade_requisitante)
    {
        if (is_null($unidade_requisitante)) {
            throw new \InvalidArgumentException('non-nullable unidade_requisitante cannot be null');
        }
        if ((mb_strlen($unidade_requisitante) > 255)) {
            throw new \InvalidArgumentException('invalid length for $unidade_requisitante when calling IncluirPlanoContratacaoItemDTO., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($unidade_requisitante) < 0)) {
            throw new \InvalidArgumentException('invalid length for $unidade_requisitante when calling IncluirPlanoContratacaoItemDTO., must be bigger than or equal to 0.');
        }

        $this->container['unidade_requisitante'] = $unidade_requisitante;

        return $this;
    }

    /**
     * Gets data_desejada
     *
     * @return \DateTime
     */
    public function getDataDesejada()
    {
        return $this->container['data_desejada'];
    }

    /**
     * Sets data_desejada
     *
     * @param \DateTime $data_desejada data_desejada
     *
     * @return self
     */
    public function setDataDesejada($data_desejada)
    {
        if (is_null($data_desejada)) {
            throw new \InvalidArgumentException('non-nullable data_desejada cannot be null');
        }
        $this->container['data_desejada'] = $data_desejada;

        return $this;
    }

    /**
     * Gets grupo_contratacao_codigo
     *
     * @return string|null
     */
    public function getGrupoContratacaoCodigo()
    {
        return $this->container['grupo_contratacao_codigo'];
    }

    /**
     * Sets grupo_contratacao_codigo
     *
     * @param string|null $grupo_contratacao_codigo grupo_contratacao_codigo
     *
     * @return self
     */
    public function setGrupoContratacaoCodigo($grupo_contratacao_codigo)
    {
        if (is_null($grupo_contratacao_codigo)) {
            throw new \InvalidArgumentException('non-nullable grupo_contratacao_codigo cannot be null');
        }
        if ((mb_strlen($grupo_contratacao_codigo) > 100)) {
            throw new \InvalidArgumentException('invalid length for $grupo_contratacao_codigo when calling IncluirPlanoContratacaoItemDTO., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($grupo_contratacao_codigo) < 0)) {
            throw new \InvalidArgumentException('invalid length for $grupo_contratacao_codigo when calling IncluirPlanoContratacaoItemDTO., must be bigger than or equal to 0.');
        }

        $this->container['grupo_contratacao_codigo'] = $grupo_contratacao_codigo;

        return $this;
    }

    /**
     * Gets grupo_contratacao_nome
     *
     * @return string|null
     */
    public function getGrupoContratacaoNome()
    {
        return $this->container['grupo_contratacao_nome'];
    }

    /**
     * Sets grupo_contratacao_nome
     *
     * @param string|null $grupo_contratacao_nome grupo_contratacao_nome
     *
     * @return self
     */
    public function setGrupoContratacaoNome($grupo_contratacao_nome)
    {
        if (is_null($grupo_contratacao_nome)) {
            throw new \InvalidArgumentException('non-nullable grupo_contratacao_nome cannot be null');
        }
        if ((mb_strlen($grupo_contratacao_nome) > 255)) {
            throw new \InvalidArgumentException('invalid length for $grupo_contratacao_nome when calling IncluirPlanoContratacaoItemDTO., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($grupo_contratacao_nome) < 0)) {
            throw new \InvalidArgumentException('invalid length for $grupo_contratacao_nome when calling IncluirPlanoContratacaoItemDTO., must be bigger than or equal to 0.');
        }

        $this->container['grupo_contratacao_nome'] = $grupo_contratacao_nome;

        return $this;
    }

    /**
     * Gets catalogo
     *
     * @return string
     */
    public function getCatalogo()
    {
        return $this->container['catalogo'];
    }

    /**
     * Sets catalogo
     *
     * @param string $catalogo catalogo
     *
     * @return self
     */
    public function setCatalogo($catalogo)
    {
        if (is_null($catalogo)) {
            throw new \InvalidArgumentException('non-nullable catalogo cannot be null');
        }
        $allowedValues = $this->getCatalogoAllowableValues();
        if (!in_array($catalogo, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'catalogo', must be one of '%s'",
                    $catalogo,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['catalogo'] = $catalogo;

        return $this;
    }

    /**
     * Gets classificacao_catalogo
     *
     * @return string
     */
    public function getClassificacaoCatalogo()
    {
        return $this->container['classificacao_catalogo'];
    }

    /**
     * Sets classificacao_catalogo
     *
     * @param string $classificacao_catalogo classificacao_catalogo
     *
     * @return self
     */
    public function setClassificacaoCatalogo($classificacao_catalogo)
    {
        if (is_null($classificacao_catalogo)) {
            throw new \InvalidArgumentException('non-nullable classificacao_catalogo cannot be null');
        }
        $allowedValues = $this->getClassificacaoCatalogoAllowableValues();
        if (!in_array($classificacao_catalogo, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'classificacao_catalogo', must be one of '%s'",
                    $classificacao_catalogo,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['classificacao_catalogo'] = $classificacao_catalogo;

        return $this;
    }

    /**
     * Gets codigo_item
     *
     * @return string|null
     */
    public function getCodigoItem()
    {
        return $this->container['codigo_item'];
    }

    /**
     * Sets codigo_item
     *
     * @param string|null $codigo_item codigo_item
     *
     * @return self
     */
    public function setCodigoItem($codigo_item)
    {
        if (is_null($codigo_item)) {
            throw new \InvalidArgumentException('non-nullable codigo_item cannot be null');
        }
        if ((mb_strlen($codigo_item) > 100)) {
            throw new \InvalidArgumentException('invalid length for $codigo_item when calling IncluirPlanoContratacaoItemDTO., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($codigo_item) < 0)) {
            throw new \InvalidArgumentException('invalid length for $codigo_item when calling IncluirPlanoContratacaoItemDTO., must be bigger than or equal to 0.');
        }

        $this->container['codigo_item'] = $codigo_item;

        return $this;
    }

    /**
     * Gets classificacao_superior_codigo
     *
     * @return string
     */
    public function getClassificacaoSuperiorCodigo()
    {
        return $this->container['classificacao_superior_codigo'];
    }

    /**
     * Sets classificacao_superior_codigo
     *
     * @param string $classificacao_superior_codigo classificacao_superior_codigo
     *
     * @return self
     */
    public function setClassificacaoSuperiorCodigo($classificacao_superior_codigo)
    {
        if (is_null($classificacao_superior_codigo)) {
            throw new \InvalidArgumentException('non-nullable classificacao_superior_codigo cannot be null');
        }
        if ((mb_strlen($classificacao_superior_codigo) > 100)) {
            throw new \InvalidArgumentException('invalid length for $classificacao_superior_codigo when calling IncluirPlanoContratacaoItemDTO., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($classificacao_superior_codigo) < 0)) {
            throw new \InvalidArgumentException('invalid length for $classificacao_superior_codigo when calling IncluirPlanoContratacaoItemDTO., must be bigger than or equal to 0.');
        }

        $this->container['classificacao_superior_codigo'] = $classificacao_superior_codigo;

        return $this;
    }

    /**
     * Gets classificacao_superior_nome
     *
     * @return string
     */
    public function getClassificacaoSuperiorNome()
    {
        return $this->container['classificacao_superior_nome'];
    }

    /**
     * Sets classificacao_superior_nome
     *
     * @param string $classificacao_superior_nome classificacao_superior_nome
     *
     * @return self
     */
    public function setClassificacaoSuperiorNome($classificacao_superior_nome)
    {
        if (is_null($classificacao_superior_nome)) {
            throw new \InvalidArgumentException('non-nullable classificacao_superior_nome cannot be null');
        }
        if ((mb_strlen($classificacao_superior_nome) > 255)) {
            throw new \InvalidArgumentException('invalid length for $classificacao_superior_nome when calling IncluirPlanoContratacaoItemDTO., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($classificacao_superior_nome) < 0)) {
            throw new \InvalidArgumentException('invalid length for $classificacao_superior_nome when calling IncluirPlanoContratacaoItemDTO., must be bigger than or equal to 0.');
        }

        $this->container['classificacao_superior_nome'] = $classificacao_superior_nome;

        return $this;
    }

    /**
     * Gets pdm_codigo
     *
     * @return string|null
     */
    public function getPdmCodigo()
    {
        return $this->container['pdm_codigo'];
    }

    /**
     * Sets pdm_codigo
     *
     * @param string|null $pdm_codigo pdm_codigo
     *
     * @return self
     */
    public function setPdmCodigo($pdm_codigo)
    {
        if (is_null($pdm_codigo)) {
            throw new \InvalidArgumentException('non-nullable pdm_codigo cannot be null');
        }
        if ((mb_strlen($pdm_codigo) > 100)) {
            throw new \InvalidArgumentException('invalid length for $pdm_codigo when calling IncluirPlanoContratacaoItemDTO., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($pdm_codigo) < 0)) {
            throw new \InvalidArgumentException('invalid length for $pdm_codigo when calling IncluirPlanoContratacaoItemDTO., must be bigger than or equal to 0.');
        }

        $this->container['pdm_codigo'] = $pdm_codigo;

        return $this;
    }

    /**
     * Gets pdm_descricao
     *
     * @return string|null
     */
    public function getPdmDescricao()
    {
        return $this->container['pdm_descricao'];
    }

    /**
     * Sets pdm_descricao
     *
     * @param string|null $pdm_descricao pdm_descricao
     *
     * @return self
     */
    public function setPdmDescricao($pdm_descricao)
    {
        if (is_null($pdm_descricao)) {
            throw new \InvalidArgumentException('non-nullable pdm_descricao cannot be null');
        }
        if ((mb_strlen($pdm_descricao) > 255)) {
            throw new \InvalidArgumentException('invalid length for $pdm_descricao when calling IncluirPlanoContratacaoItemDTO., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($pdm_descricao) < 0)) {
            throw new \InvalidArgumentException('invalid length for $pdm_descricao when calling IncluirPlanoContratacaoItemDTO., must be bigger than or equal to 0.');
        }

        $this->container['pdm_descricao'] = $pdm_descricao;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


