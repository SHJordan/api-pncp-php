<?php
/**
 * IncluirCredenciamentoDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API PNCP
 *
 * API REST de serviços do Portal Nacional de Contratações Públicas (PNCP)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: css.serpro@serpro.gov.br
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * IncluirCredenciamentoDTO Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IncluirCredenciamentoDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IncluirCredenciamentoDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'termos_declaracao_aceite' => 'bool',
        'cnpj' => 'string',
        'nome_razao_social' => 'string',
        'email' => 'string',
        'url_sistema' => 'string',
        'nome_sistema' => 'string',
        'responsavel_cadastro_email' => 'string',
        'responsavel_cadastro_telefone' => 'string',
        'esfera_federal' => 'bool',
        'esfera_estadual' => 'bool',
        'esfera_municipal' => 'bool',
        'esfera_distrital' => 'bool',
        'disponibiliza_artefato_licitacao' => 'bool',
        'edital_credenciamento' => 'bool',
        'urledital_credenciamento' => 'string',
        'aviso_contratacao_direta' => 'bool',
        'url_aviso_contratacao_direta' => 'string',
        'edital_licitacao' => 'bool',
        'url_edital_licitacao' => 'string',
        'ata' => 'bool',
        'url_ata' => 'string',
        'contrato' => 'bool',
        'url_contrato' => 'string',
        'credenciamentos_responsaveis' => '\OpenAPI\Client\Model\IncluirCredenciamentoResponsavelDTO[]',
        'credenciamento_uf' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'termos_declaracao_aceite' => null,
        'cnpj' => null,
        'nome_razao_social' => null,
        'email' => null,
        'url_sistema' => null,
        'nome_sistema' => null,
        'responsavel_cadastro_email' => null,
        'responsavel_cadastro_telefone' => null,
        'esfera_federal' => null,
        'esfera_estadual' => null,
        'esfera_municipal' => null,
        'esfera_distrital' => null,
        'disponibiliza_artefato_licitacao' => null,
        'edital_credenciamento' => null,
        'urledital_credenciamento' => null,
        'aviso_contratacao_direta' => null,
        'url_aviso_contratacao_direta' => null,
        'edital_licitacao' => null,
        'url_edital_licitacao' => null,
        'ata' => null,
        'url_ata' => null,
        'contrato' => null,
        'url_contrato' => null,
        'credenciamentos_responsaveis' => null,
        'credenciamento_uf' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'termos_declaracao_aceite' => false,
		'cnpj' => false,
		'nome_razao_social' => false,
		'email' => false,
		'url_sistema' => false,
		'nome_sistema' => false,
		'responsavel_cadastro_email' => false,
		'responsavel_cadastro_telefone' => false,
		'esfera_federal' => false,
		'esfera_estadual' => false,
		'esfera_municipal' => false,
		'esfera_distrital' => false,
		'disponibiliza_artefato_licitacao' => false,
		'edital_credenciamento' => false,
		'urledital_credenciamento' => false,
		'aviso_contratacao_direta' => false,
		'url_aviso_contratacao_direta' => false,
		'edital_licitacao' => false,
		'url_edital_licitacao' => false,
		'ata' => false,
		'url_ata' => false,
		'contrato' => false,
		'url_contrato' => false,
		'credenciamentos_responsaveis' => false,
		'credenciamento_uf' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'termos_declaracao_aceite' => 'termosDeclaracaoAceite',
        'cnpj' => 'cnpj',
        'nome_razao_social' => 'nomeRazaoSocial',
        'email' => 'email',
        'url_sistema' => 'urlSistema',
        'nome_sistema' => 'nomeSistema',
        'responsavel_cadastro_email' => 'responsavelCadastroEmail',
        'responsavel_cadastro_telefone' => 'responsavelCadastroTelefone',
        'esfera_federal' => 'esferaFederal',
        'esfera_estadual' => 'esferaEstadual',
        'esfera_municipal' => 'esferaMunicipal',
        'esfera_distrital' => 'esferaDistrital',
        'disponibiliza_artefato_licitacao' => 'disponibilizaArtefatoLicitacao',
        'edital_credenciamento' => 'editalCredenciamento',
        'urledital_credenciamento' => 'urleditalCredenciamento',
        'aviso_contratacao_direta' => 'avisoContratacaoDireta',
        'url_aviso_contratacao_direta' => 'urlAvisoContratacaoDireta',
        'edital_licitacao' => 'editalLicitacao',
        'url_edital_licitacao' => 'urlEditalLicitacao',
        'ata' => 'ata',
        'url_ata' => 'urlAta',
        'contrato' => 'contrato',
        'url_contrato' => 'urlContrato',
        'credenciamentos_responsaveis' => 'credenciamentosResponsaveis',
        'credenciamento_uf' => 'credenciamentoUF'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'termos_declaracao_aceite' => 'setTermosDeclaracaoAceite',
        'cnpj' => 'setCnpj',
        'nome_razao_social' => 'setNomeRazaoSocial',
        'email' => 'setEmail',
        'url_sistema' => 'setUrlSistema',
        'nome_sistema' => 'setNomeSistema',
        'responsavel_cadastro_email' => 'setResponsavelCadastroEmail',
        'responsavel_cadastro_telefone' => 'setResponsavelCadastroTelefone',
        'esfera_federal' => 'setEsferaFederal',
        'esfera_estadual' => 'setEsferaEstadual',
        'esfera_municipal' => 'setEsferaMunicipal',
        'esfera_distrital' => 'setEsferaDistrital',
        'disponibiliza_artefato_licitacao' => 'setDisponibilizaArtefatoLicitacao',
        'edital_credenciamento' => 'setEditalCredenciamento',
        'urledital_credenciamento' => 'setUrleditalCredenciamento',
        'aviso_contratacao_direta' => 'setAvisoContratacaoDireta',
        'url_aviso_contratacao_direta' => 'setUrlAvisoContratacaoDireta',
        'edital_licitacao' => 'setEditalLicitacao',
        'url_edital_licitacao' => 'setUrlEditalLicitacao',
        'ata' => 'setAta',
        'url_ata' => 'setUrlAta',
        'contrato' => 'setContrato',
        'url_contrato' => 'setUrlContrato',
        'credenciamentos_responsaveis' => 'setCredenciamentosResponsaveis',
        'credenciamento_uf' => 'setCredenciamentoUf'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'termos_declaracao_aceite' => 'getTermosDeclaracaoAceite',
        'cnpj' => 'getCnpj',
        'nome_razao_social' => 'getNomeRazaoSocial',
        'email' => 'getEmail',
        'url_sistema' => 'getUrlSistema',
        'nome_sistema' => 'getNomeSistema',
        'responsavel_cadastro_email' => 'getResponsavelCadastroEmail',
        'responsavel_cadastro_telefone' => 'getResponsavelCadastroTelefone',
        'esfera_federal' => 'getEsferaFederal',
        'esfera_estadual' => 'getEsferaEstadual',
        'esfera_municipal' => 'getEsferaMunicipal',
        'esfera_distrital' => 'getEsferaDistrital',
        'disponibiliza_artefato_licitacao' => 'getDisponibilizaArtefatoLicitacao',
        'edital_credenciamento' => 'getEditalCredenciamento',
        'urledital_credenciamento' => 'getUrleditalCredenciamento',
        'aviso_contratacao_direta' => 'getAvisoContratacaoDireta',
        'url_aviso_contratacao_direta' => 'getUrlAvisoContratacaoDireta',
        'edital_licitacao' => 'getEditalLicitacao',
        'url_edital_licitacao' => 'getUrlEditalLicitacao',
        'ata' => 'getAta',
        'url_ata' => 'getUrlAta',
        'contrato' => 'getContrato',
        'url_contrato' => 'getUrlContrato',
        'credenciamentos_responsaveis' => 'getCredenciamentosResponsaveis',
        'credenciamento_uf' => 'getCredenciamentoUf'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('termos_declaracao_aceite', $data ?? [], null);
        $this->setIfExists('cnpj', $data ?? [], null);
        $this->setIfExists('nome_razao_social', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('url_sistema', $data ?? [], null);
        $this->setIfExists('nome_sistema', $data ?? [], null);
        $this->setIfExists('responsavel_cadastro_email', $data ?? [], null);
        $this->setIfExists('responsavel_cadastro_telefone', $data ?? [], null);
        $this->setIfExists('esfera_federal', $data ?? [], null);
        $this->setIfExists('esfera_estadual', $data ?? [], null);
        $this->setIfExists('esfera_municipal', $data ?? [], null);
        $this->setIfExists('esfera_distrital', $data ?? [], null);
        $this->setIfExists('disponibiliza_artefato_licitacao', $data ?? [], null);
        $this->setIfExists('edital_credenciamento', $data ?? [], null);
        $this->setIfExists('urledital_credenciamento', $data ?? [], null);
        $this->setIfExists('aviso_contratacao_direta', $data ?? [], null);
        $this->setIfExists('url_aviso_contratacao_direta', $data ?? [], null);
        $this->setIfExists('edital_licitacao', $data ?? [], null);
        $this->setIfExists('url_edital_licitacao', $data ?? [], null);
        $this->setIfExists('ata', $data ?? [], null);
        $this->setIfExists('url_ata', $data ?? [], null);
        $this->setIfExists('contrato', $data ?? [], null);
        $this->setIfExists('url_contrato', $data ?? [], null);
        $this->setIfExists('credenciamentos_responsaveis', $data ?? [], null);
        $this->setIfExists('credenciamento_uf', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['termos_declaracao_aceite'] === null) {
            $invalidProperties[] = "'termos_declaracao_aceite' can't be null";
        }
        if ($this->container['cnpj'] === null) {
            $invalidProperties[] = "'cnpj' can't be null";
        }
        if ($this->container['nome_razao_social'] === null) {
            $invalidProperties[] = "'nome_razao_social' can't be null";
        }
        if ((mb_strlen($this->container['nome_razao_social']) > 255)) {
            $invalidProperties[] = "invalid value for 'nome_razao_social', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['nome_razao_social']) < 0)) {
            $invalidProperties[] = "invalid value for 'nome_razao_social', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ((mb_strlen($this->container['email']) > 255)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['email']) < 0)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['url_sistema'] === null) {
            $invalidProperties[] = "'url_sistema' can't be null";
        }
        if ((mb_strlen($this->container['url_sistema']) > 512)) {
            $invalidProperties[] = "invalid value for 'url_sistema', the character length must be smaller than or equal to 512.";
        }

        if ((mb_strlen($this->container['url_sistema']) < 0)) {
            $invalidProperties[] = "invalid value for 'url_sistema', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['nome_sistema'] === null) {
            $invalidProperties[] = "'nome_sistema' can't be null";
        }
        if ((mb_strlen($this->container['nome_sistema']) > 255)) {
            $invalidProperties[] = "invalid value for 'nome_sistema', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['nome_sistema']) < 0)) {
            $invalidProperties[] = "invalid value for 'nome_sistema', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['responsavel_cadastro_email'] === null) {
            $invalidProperties[] = "'responsavel_cadastro_email' can't be null";
        }
        if ((mb_strlen($this->container['responsavel_cadastro_email']) > 255)) {
            $invalidProperties[] = "invalid value for 'responsavel_cadastro_email', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['responsavel_cadastro_email']) < 0)) {
            $invalidProperties[] = "invalid value for 'responsavel_cadastro_email', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['responsavel_cadastro_telefone'] === null) {
            $invalidProperties[] = "'responsavel_cadastro_telefone' can't be null";
        }
        if ((mb_strlen($this->container['responsavel_cadastro_telefone']) > 30)) {
            $invalidProperties[] = "invalid value for 'responsavel_cadastro_telefone', the character length must be smaller than or equal to 30.";
        }

        if ((mb_strlen($this->container['responsavel_cadastro_telefone']) < 0)) {
            $invalidProperties[] = "invalid value for 'responsavel_cadastro_telefone', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['esfera_federal'] === null) {
            $invalidProperties[] = "'esfera_federal' can't be null";
        }
        if ($this->container['esfera_estadual'] === null) {
            $invalidProperties[] = "'esfera_estadual' can't be null";
        }
        if ($this->container['esfera_municipal'] === null) {
            $invalidProperties[] = "'esfera_municipal' can't be null";
        }
        if ($this->container['esfera_distrital'] === null) {
            $invalidProperties[] = "'esfera_distrital' can't be null";
        }
        if ($this->container['disponibiliza_artefato_licitacao'] === null) {
            $invalidProperties[] = "'disponibiliza_artefato_licitacao' can't be null";
        }
        if (!is_null($this->container['urledital_credenciamento']) && (mb_strlen($this->container['urledital_credenciamento']) > 512)) {
            $invalidProperties[] = "invalid value for 'urledital_credenciamento', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['urledital_credenciamento']) && (mb_strlen($this->container['urledital_credenciamento']) < 0)) {
            $invalidProperties[] = "invalid value for 'urledital_credenciamento', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['url_aviso_contratacao_direta']) && (mb_strlen($this->container['url_aviso_contratacao_direta']) > 512)) {
            $invalidProperties[] = "invalid value for 'url_aviso_contratacao_direta', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['url_aviso_contratacao_direta']) && (mb_strlen($this->container['url_aviso_contratacao_direta']) < 0)) {
            $invalidProperties[] = "invalid value for 'url_aviso_contratacao_direta', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['url_edital_licitacao']) && (mb_strlen($this->container['url_edital_licitacao']) > 512)) {
            $invalidProperties[] = "invalid value for 'url_edital_licitacao', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['url_edital_licitacao']) && (mb_strlen($this->container['url_edital_licitacao']) < 0)) {
            $invalidProperties[] = "invalid value for 'url_edital_licitacao', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['url_ata']) && (mb_strlen($this->container['url_ata']) > 512)) {
            $invalidProperties[] = "invalid value for 'url_ata', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['url_ata']) && (mb_strlen($this->container['url_ata']) < 0)) {
            $invalidProperties[] = "invalid value for 'url_ata', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['url_contrato']) && (mb_strlen($this->container['url_contrato']) > 512)) {
            $invalidProperties[] = "invalid value for 'url_contrato', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['url_contrato']) && (mb_strlen($this->container['url_contrato']) < 0)) {
            $invalidProperties[] = "invalid value for 'url_contrato', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['credenciamentos_responsaveis'] === null) {
            $invalidProperties[] = "'credenciamentos_responsaveis' can't be null";
        }
        if ($this->container['credenciamento_uf'] === null) {
            $invalidProperties[] = "'credenciamento_uf' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets termos_declaracao_aceite
     *
     * @return bool
     */
    public function getTermosDeclaracaoAceite()
    {
        return $this->container['termos_declaracao_aceite'];
    }

    /**
     * Sets termos_declaracao_aceite
     *
     * @param bool $termos_declaracao_aceite termos_declaracao_aceite
     *
     * @return self
     */
    public function setTermosDeclaracaoAceite($termos_declaracao_aceite)
    {
        if (is_null($termos_declaracao_aceite)) {
            throw new \InvalidArgumentException('non-nullable termos_declaracao_aceite cannot be null');
        }
        $this->container['termos_declaracao_aceite'] = $termos_declaracao_aceite;

        return $this;
    }

    /**
     * Gets cnpj
     *
     * @return string
     */
    public function getCnpj()
    {
        return $this->container['cnpj'];
    }

    /**
     * Sets cnpj
     *
     * @param string $cnpj cnpj
     *
     * @return self
     */
    public function setCnpj($cnpj)
    {
        if (is_null($cnpj)) {
            throw new \InvalidArgumentException('non-nullable cnpj cannot be null');
        }
        $this->container['cnpj'] = $cnpj;

        return $this;
    }

    /**
     * Gets nome_razao_social
     *
     * @return string
     */
    public function getNomeRazaoSocial()
    {
        return $this->container['nome_razao_social'];
    }

    /**
     * Sets nome_razao_social
     *
     * @param string $nome_razao_social nome_razao_social
     *
     * @return self
     */
    public function setNomeRazaoSocial($nome_razao_social)
    {
        if (is_null($nome_razao_social)) {
            throw new \InvalidArgumentException('non-nullable nome_razao_social cannot be null');
        }
        if ((mb_strlen($nome_razao_social) > 255)) {
            throw new \InvalidArgumentException('invalid length for $nome_razao_social when calling IncluirCredenciamentoDTO., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($nome_razao_social) < 0)) {
            throw new \InvalidArgumentException('invalid length for $nome_razao_social when calling IncluirCredenciamentoDTO., must be bigger than or equal to 0.');
        }

        $this->container['nome_razao_social'] = $nome_razao_social;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        if ((mb_strlen($email) > 255)) {
            throw new \InvalidArgumentException('invalid length for $email when calling IncluirCredenciamentoDTO., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($email) < 0)) {
            throw new \InvalidArgumentException('invalid length for $email when calling IncluirCredenciamentoDTO., must be bigger than or equal to 0.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets url_sistema
     *
     * @return string
     */
    public function getUrlSistema()
    {
        return $this->container['url_sistema'];
    }

    /**
     * Sets url_sistema
     *
     * @param string $url_sistema url_sistema
     *
     * @return self
     */
    public function setUrlSistema($url_sistema)
    {
        if (is_null($url_sistema)) {
            throw new \InvalidArgumentException('non-nullable url_sistema cannot be null');
        }
        if ((mb_strlen($url_sistema) > 512)) {
            throw new \InvalidArgumentException('invalid length for $url_sistema when calling IncluirCredenciamentoDTO., must be smaller than or equal to 512.');
        }
        if ((mb_strlen($url_sistema) < 0)) {
            throw new \InvalidArgumentException('invalid length for $url_sistema when calling IncluirCredenciamentoDTO., must be bigger than or equal to 0.');
        }

        $this->container['url_sistema'] = $url_sistema;

        return $this;
    }

    /**
     * Gets nome_sistema
     *
     * @return string
     */
    public function getNomeSistema()
    {
        return $this->container['nome_sistema'];
    }

    /**
     * Sets nome_sistema
     *
     * @param string $nome_sistema nome_sistema
     *
     * @return self
     */
    public function setNomeSistema($nome_sistema)
    {
        if (is_null($nome_sistema)) {
            throw new \InvalidArgumentException('non-nullable nome_sistema cannot be null');
        }
        if ((mb_strlen($nome_sistema) > 255)) {
            throw new \InvalidArgumentException('invalid length for $nome_sistema when calling IncluirCredenciamentoDTO., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($nome_sistema) < 0)) {
            throw new \InvalidArgumentException('invalid length for $nome_sistema when calling IncluirCredenciamentoDTO., must be bigger than or equal to 0.');
        }

        $this->container['nome_sistema'] = $nome_sistema;

        return $this;
    }

    /**
     * Gets responsavel_cadastro_email
     *
     * @return string
     */
    public function getResponsavelCadastroEmail()
    {
        return $this->container['responsavel_cadastro_email'];
    }

    /**
     * Sets responsavel_cadastro_email
     *
     * @param string $responsavel_cadastro_email responsavel_cadastro_email
     *
     * @return self
     */
    public function setResponsavelCadastroEmail($responsavel_cadastro_email)
    {
        if (is_null($responsavel_cadastro_email)) {
            throw new \InvalidArgumentException('non-nullable responsavel_cadastro_email cannot be null');
        }
        if ((mb_strlen($responsavel_cadastro_email) > 255)) {
            throw new \InvalidArgumentException('invalid length for $responsavel_cadastro_email when calling IncluirCredenciamentoDTO., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($responsavel_cadastro_email) < 0)) {
            throw new \InvalidArgumentException('invalid length for $responsavel_cadastro_email when calling IncluirCredenciamentoDTO., must be bigger than or equal to 0.');
        }

        $this->container['responsavel_cadastro_email'] = $responsavel_cadastro_email;

        return $this;
    }

    /**
     * Gets responsavel_cadastro_telefone
     *
     * @return string
     */
    public function getResponsavelCadastroTelefone()
    {
        return $this->container['responsavel_cadastro_telefone'];
    }

    /**
     * Sets responsavel_cadastro_telefone
     *
     * @param string $responsavel_cadastro_telefone responsavel_cadastro_telefone
     *
     * @return self
     */
    public function setResponsavelCadastroTelefone($responsavel_cadastro_telefone)
    {
        if (is_null($responsavel_cadastro_telefone)) {
            throw new \InvalidArgumentException('non-nullable responsavel_cadastro_telefone cannot be null');
        }
        if ((mb_strlen($responsavel_cadastro_telefone) > 30)) {
            throw new \InvalidArgumentException('invalid length for $responsavel_cadastro_telefone when calling IncluirCredenciamentoDTO., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($responsavel_cadastro_telefone) < 0)) {
            throw new \InvalidArgumentException('invalid length for $responsavel_cadastro_telefone when calling IncluirCredenciamentoDTO., must be bigger than or equal to 0.');
        }

        $this->container['responsavel_cadastro_telefone'] = $responsavel_cadastro_telefone;

        return $this;
    }

    /**
     * Gets esfera_federal
     *
     * @return bool
     */
    public function getEsferaFederal()
    {
        return $this->container['esfera_federal'];
    }

    /**
     * Sets esfera_federal
     *
     * @param bool $esfera_federal esfera_federal
     *
     * @return self
     */
    public function setEsferaFederal($esfera_federal)
    {
        if (is_null($esfera_federal)) {
            throw new \InvalidArgumentException('non-nullable esfera_federal cannot be null');
        }
        $this->container['esfera_federal'] = $esfera_federal;

        return $this;
    }

    /**
     * Gets esfera_estadual
     *
     * @return bool
     */
    public function getEsferaEstadual()
    {
        return $this->container['esfera_estadual'];
    }

    /**
     * Sets esfera_estadual
     *
     * @param bool $esfera_estadual esfera_estadual
     *
     * @return self
     */
    public function setEsferaEstadual($esfera_estadual)
    {
        if (is_null($esfera_estadual)) {
            throw new \InvalidArgumentException('non-nullable esfera_estadual cannot be null');
        }
        $this->container['esfera_estadual'] = $esfera_estadual;

        return $this;
    }

    /**
     * Gets esfera_municipal
     *
     * @return bool
     */
    public function getEsferaMunicipal()
    {
        return $this->container['esfera_municipal'];
    }

    /**
     * Sets esfera_municipal
     *
     * @param bool $esfera_municipal esfera_municipal
     *
     * @return self
     */
    public function setEsferaMunicipal($esfera_municipal)
    {
        if (is_null($esfera_municipal)) {
            throw new \InvalidArgumentException('non-nullable esfera_municipal cannot be null');
        }
        $this->container['esfera_municipal'] = $esfera_municipal;

        return $this;
    }

    /**
     * Gets esfera_distrital
     *
     * @return bool
     */
    public function getEsferaDistrital()
    {
        return $this->container['esfera_distrital'];
    }

    /**
     * Sets esfera_distrital
     *
     * @param bool $esfera_distrital esfera_distrital
     *
     * @return self
     */
    public function setEsferaDistrital($esfera_distrital)
    {
        if (is_null($esfera_distrital)) {
            throw new \InvalidArgumentException('non-nullable esfera_distrital cannot be null');
        }
        $this->container['esfera_distrital'] = $esfera_distrital;

        return $this;
    }

    /**
     * Gets disponibiliza_artefato_licitacao
     *
     * @return bool
     */
    public function getDisponibilizaArtefatoLicitacao()
    {
        return $this->container['disponibiliza_artefato_licitacao'];
    }

    /**
     * Sets disponibiliza_artefato_licitacao
     *
     * @param bool $disponibiliza_artefato_licitacao disponibiliza_artefato_licitacao
     *
     * @return self
     */
    public function setDisponibilizaArtefatoLicitacao($disponibiliza_artefato_licitacao)
    {
        if (is_null($disponibiliza_artefato_licitacao)) {
            throw new \InvalidArgumentException('non-nullable disponibiliza_artefato_licitacao cannot be null');
        }
        $this->container['disponibiliza_artefato_licitacao'] = $disponibiliza_artefato_licitacao;

        return $this;
    }

    /**
     * Gets edital_credenciamento
     *
     * @return bool|null
     */
    public function getEditalCredenciamento()
    {
        return $this->container['edital_credenciamento'];
    }

    /**
     * Sets edital_credenciamento
     *
     * @param bool|null $edital_credenciamento edital_credenciamento
     *
     * @return self
     */
    public function setEditalCredenciamento($edital_credenciamento)
    {
        if (is_null($edital_credenciamento)) {
            throw new \InvalidArgumentException('non-nullable edital_credenciamento cannot be null');
        }
        $this->container['edital_credenciamento'] = $edital_credenciamento;

        return $this;
    }

    /**
     * Gets urledital_credenciamento
     *
     * @return string|null
     */
    public function getUrleditalCredenciamento()
    {
        return $this->container['urledital_credenciamento'];
    }

    /**
     * Sets urledital_credenciamento
     *
     * @param string|null $urledital_credenciamento urledital_credenciamento
     *
     * @return self
     */
    public function setUrleditalCredenciamento($urledital_credenciamento)
    {
        if (is_null($urledital_credenciamento)) {
            throw new \InvalidArgumentException('non-nullable urledital_credenciamento cannot be null');
        }
        if ((mb_strlen($urledital_credenciamento) > 512)) {
            throw new \InvalidArgumentException('invalid length for $urledital_credenciamento when calling IncluirCredenciamentoDTO., must be smaller than or equal to 512.');
        }
        if ((mb_strlen($urledital_credenciamento) < 0)) {
            throw new \InvalidArgumentException('invalid length for $urledital_credenciamento when calling IncluirCredenciamentoDTO., must be bigger than or equal to 0.');
        }

        $this->container['urledital_credenciamento'] = $urledital_credenciamento;

        return $this;
    }

    /**
     * Gets aviso_contratacao_direta
     *
     * @return bool|null
     */
    public function getAvisoContratacaoDireta()
    {
        return $this->container['aviso_contratacao_direta'];
    }

    /**
     * Sets aviso_contratacao_direta
     *
     * @param bool|null $aviso_contratacao_direta aviso_contratacao_direta
     *
     * @return self
     */
    public function setAvisoContratacaoDireta($aviso_contratacao_direta)
    {
        if (is_null($aviso_contratacao_direta)) {
            throw new \InvalidArgumentException('non-nullable aviso_contratacao_direta cannot be null');
        }
        $this->container['aviso_contratacao_direta'] = $aviso_contratacao_direta;

        return $this;
    }

    /**
     * Gets url_aviso_contratacao_direta
     *
     * @return string|null
     */
    public function getUrlAvisoContratacaoDireta()
    {
        return $this->container['url_aviso_contratacao_direta'];
    }

    /**
     * Sets url_aviso_contratacao_direta
     *
     * @param string|null $url_aviso_contratacao_direta url_aviso_contratacao_direta
     *
     * @return self
     */
    public function setUrlAvisoContratacaoDireta($url_aviso_contratacao_direta)
    {
        if (is_null($url_aviso_contratacao_direta)) {
            throw new \InvalidArgumentException('non-nullable url_aviso_contratacao_direta cannot be null');
        }
        if ((mb_strlen($url_aviso_contratacao_direta) > 512)) {
            throw new \InvalidArgumentException('invalid length for $url_aviso_contratacao_direta when calling IncluirCredenciamentoDTO., must be smaller than or equal to 512.');
        }
        if ((mb_strlen($url_aviso_contratacao_direta) < 0)) {
            throw new \InvalidArgumentException('invalid length for $url_aviso_contratacao_direta when calling IncluirCredenciamentoDTO., must be bigger than or equal to 0.');
        }

        $this->container['url_aviso_contratacao_direta'] = $url_aviso_contratacao_direta;

        return $this;
    }

    /**
     * Gets edital_licitacao
     *
     * @return bool|null
     */
    public function getEditalLicitacao()
    {
        return $this->container['edital_licitacao'];
    }

    /**
     * Sets edital_licitacao
     *
     * @param bool|null $edital_licitacao edital_licitacao
     *
     * @return self
     */
    public function setEditalLicitacao($edital_licitacao)
    {
        if (is_null($edital_licitacao)) {
            throw new \InvalidArgumentException('non-nullable edital_licitacao cannot be null');
        }
        $this->container['edital_licitacao'] = $edital_licitacao;

        return $this;
    }

    /**
     * Gets url_edital_licitacao
     *
     * @return string|null
     */
    public function getUrlEditalLicitacao()
    {
        return $this->container['url_edital_licitacao'];
    }

    /**
     * Sets url_edital_licitacao
     *
     * @param string|null $url_edital_licitacao url_edital_licitacao
     *
     * @return self
     */
    public function setUrlEditalLicitacao($url_edital_licitacao)
    {
        if (is_null($url_edital_licitacao)) {
            throw new \InvalidArgumentException('non-nullable url_edital_licitacao cannot be null');
        }
        if ((mb_strlen($url_edital_licitacao) > 512)) {
            throw new \InvalidArgumentException('invalid length for $url_edital_licitacao when calling IncluirCredenciamentoDTO., must be smaller than or equal to 512.');
        }
        if ((mb_strlen($url_edital_licitacao) < 0)) {
            throw new \InvalidArgumentException('invalid length for $url_edital_licitacao when calling IncluirCredenciamentoDTO., must be bigger than or equal to 0.');
        }

        $this->container['url_edital_licitacao'] = $url_edital_licitacao;

        return $this;
    }

    /**
     * Gets ata
     *
     * @return bool|null
     */
    public function getAta()
    {
        return $this->container['ata'];
    }

    /**
     * Sets ata
     *
     * @param bool|null $ata ata
     *
     * @return self
     */
    public function setAta($ata)
    {
        if (is_null($ata)) {
            throw new \InvalidArgumentException('non-nullable ata cannot be null');
        }
        $this->container['ata'] = $ata;

        return $this;
    }

    /**
     * Gets url_ata
     *
     * @return string|null
     */
    public function getUrlAta()
    {
        return $this->container['url_ata'];
    }

    /**
     * Sets url_ata
     *
     * @param string|null $url_ata url_ata
     *
     * @return self
     */
    public function setUrlAta($url_ata)
    {
        if (is_null($url_ata)) {
            throw new \InvalidArgumentException('non-nullable url_ata cannot be null');
        }
        if ((mb_strlen($url_ata) > 512)) {
            throw new \InvalidArgumentException('invalid length for $url_ata when calling IncluirCredenciamentoDTO., must be smaller than or equal to 512.');
        }
        if ((mb_strlen($url_ata) < 0)) {
            throw new \InvalidArgumentException('invalid length for $url_ata when calling IncluirCredenciamentoDTO., must be bigger than or equal to 0.');
        }

        $this->container['url_ata'] = $url_ata;

        return $this;
    }

    /**
     * Gets contrato
     *
     * @return bool|null
     */
    public function getContrato()
    {
        return $this->container['contrato'];
    }

    /**
     * Sets contrato
     *
     * @param bool|null $contrato contrato
     *
     * @return self
     */
    public function setContrato($contrato)
    {
        if (is_null($contrato)) {
            throw new \InvalidArgumentException('non-nullable contrato cannot be null');
        }
        $this->container['contrato'] = $contrato;

        return $this;
    }

    /**
     * Gets url_contrato
     *
     * @return string|null
     */
    public function getUrlContrato()
    {
        return $this->container['url_contrato'];
    }

    /**
     * Sets url_contrato
     *
     * @param string|null $url_contrato url_contrato
     *
     * @return self
     */
    public function setUrlContrato($url_contrato)
    {
        if (is_null($url_contrato)) {
            throw new \InvalidArgumentException('non-nullable url_contrato cannot be null');
        }
        if ((mb_strlen($url_contrato) > 512)) {
            throw new \InvalidArgumentException('invalid length for $url_contrato when calling IncluirCredenciamentoDTO., must be smaller than or equal to 512.');
        }
        if ((mb_strlen($url_contrato) < 0)) {
            throw new \InvalidArgumentException('invalid length for $url_contrato when calling IncluirCredenciamentoDTO., must be bigger than or equal to 0.');
        }

        $this->container['url_contrato'] = $url_contrato;

        return $this;
    }

    /**
     * Gets credenciamentos_responsaveis
     *
     * @return \OpenAPI\Client\Model\IncluirCredenciamentoResponsavelDTO[]
     */
    public function getCredenciamentosResponsaveis()
    {
        return $this->container['credenciamentos_responsaveis'];
    }

    /**
     * Sets credenciamentos_responsaveis
     *
     * @param \OpenAPI\Client\Model\IncluirCredenciamentoResponsavelDTO[] $credenciamentos_responsaveis credenciamentos_responsaveis
     *
     * @return self
     */
    public function setCredenciamentosResponsaveis($credenciamentos_responsaveis)
    {
        if (is_null($credenciamentos_responsaveis)) {
            throw new \InvalidArgumentException('non-nullable credenciamentos_responsaveis cannot be null');
        }
        $this->container['credenciamentos_responsaveis'] = $credenciamentos_responsaveis;

        return $this;
    }

    /**
     * Gets credenciamento_uf
     *
     * @return string[]
     */
    public function getCredenciamentoUf()
    {
        return $this->container['credenciamento_uf'];
    }

    /**
     * Sets credenciamento_uf
     *
     * @param string[] $credenciamento_uf credenciamento_uf
     *
     * @return self
     */
    public function setCredenciamentoUf($credenciamento_uf)
    {
        if (is_null($credenciamento_uf)) {
            throw new \InvalidArgumentException('non-nullable credenciamento_uf cannot be null');
        }
        $this->container['credenciamento_uf'] = $credenciamento_uf;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


