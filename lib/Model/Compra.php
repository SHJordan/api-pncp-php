<?php
/**
 * Compra
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API PNCP
 *
 * API REST de serviços do Portal Nacional de Contratações Públicas (PNCP)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: css.serpro@serpro.gov.br
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Compra Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Compra implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Compra';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'modalidade' => 'string',
        'numero_compra' => 'string',
        'ano_compra' => 'int',
        'processo' => 'string',
        'tipo_instrumento_convocatorio' => 'string',
        'situacao_compra' => 'string',
        'objeto_compra' => 'string',
        'informacao_complementar' => 'string',
        'srp' => 'bool',
        'data_abertura_proposta' => '\DateTime',
        'data_encerramento_proposta' => '\DateTime',
        'data_publicacao_pncp' => '\DateTime',
        'data_inclusao' => '\DateTime',
        'data_atualizacao' => '\DateTime',
        'sequencial_compra' => 'int',
        'lista_itens_descricao' => 'string',
        'orgao_entidade' => '\OpenAPI\Client\Model\OrgaoEntidade',
        'unidade_orgao' => '\OpenAPI\Client\Model\UnidadeOrgao',
        'orgao_sub_rogado' => '\OpenAPI\Client\Model\OrgaoEntidade',
        'unidade_sub_rogada' => '\OpenAPI\Client\Model\UnidadeOrgao',
        'amparo_legal' => '\OpenAPI\Client\Model\AmparoLegal',
        'modo_disputa' => 'string',
        'link_sistema_origem' => 'string',
        'excluido' => 'bool',
        'atributo_controle' => 'int',
        'justificativa_presencial' => 'string',
        'existe_resultado' => 'bool',
        'numero_controle' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'modalidade' => null,
        'numero_compra' => null,
        'ano_compra' => 'int32',
        'processo' => null,
        'tipo_instrumento_convocatorio' => null,
        'situacao_compra' => null,
        'objeto_compra' => null,
        'informacao_complementar' => null,
        'srp' => null,
        'data_abertura_proposta' => 'date-time',
        'data_encerramento_proposta' => 'date-time',
        'data_publicacao_pncp' => 'date-time',
        'data_inclusao' => 'date-time',
        'data_atualizacao' => 'date-time',
        'sequencial_compra' => 'int32',
        'lista_itens_descricao' => null,
        'orgao_entidade' => null,
        'unidade_orgao' => null,
        'orgao_sub_rogado' => null,
        'unidade_sub_rogada' => null,
        'amparo_legal' => null,
        'modo_disputa' => null,
        'link_sistema_origem' => null,
        'excluido' => null,
        'atributo_controle' => 'int64',
        'justificativa_presencial' => null,
        'existe_resultado' => null,
        'numero_controle' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'modalidade' => false,
		'numero_compra' => false,
		'ano_compra' => false,
		'processo' => false,
		'tipo_instrumento_convocatorio' => false,
		'situacao_compra' => false,
		'objeto_compra' => false,
		'informacao_complementar' => false,
		'srp' => false,
		'data_abertura_proposta' => false,
		'data_encerramento_proposta' => false,
		'data_publicacao_pncp' => false,
		'data_inclusao' => false,
		'data_atualizacao' => false,
		'sequencial_compra' => false,
		'lista_itens_descricao' => false,
		'orgao_entidade' => false,
		'unidade_orgao' => false,
		'orgao_sub_rogado' => false,
		'unidade_sub_rogada' => false,
		'amparo_legal' => false,
		'modo_disputa' => false,
		'link_sistema_origem' => false,
		'excluido' => false,
		'atributo_controle' => false,
		'justificativa_presencial' => false,
		'existe_resultado' => false,
		'numero_controle' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'modalidade' => 'modalidade',
        'numero_compra' => 'numeroCompra',
        'ano_compra' => 'anoCompra',
        'processo' => 'processo',
        'tipo_instrumento_convocatorio' => 'tipoInstrumentoConvocatorio',
        'situacao_compra' => 'situacaoCompra',
        'objeto_compra' => 'objetoCompra',
        'informacao_complementar' => 'informacaoComplementar',
        'srp' => 'srp',
        'data_abertura_proposta' => 'dataAberturaProposta',
        'data_encerramento_proposta' => 'dataEncerramentoProposta',
        'data_publicacao_pncp' => 'dataPublicacaoPncp',
        'data_inclusao' => 'dataInclusao',
        'data_atualizacao' => 'dataAtualizacao',
        'sequencial_compra' => 'sequencialCompra',
        'lista_itens_descricao' => 'listaItensDescricao',
        'orgao_entidade' => 'orgaoEntidade',
        'unidade_orgao' => 'unidadeOrgao',
        'orgao_sub_rogado' => 'orgaoSubRogado',
        'unidade_sub_rogada' => 'unidadeSubRogada',
        'amparo_legal' => 'amparoLegal',
        'modo_disputa' => 'modoDisputa',
        'link_sistema_origem' => 'linkSistemaOrigem',
        'excluido' => 'excluido',
        'atributo_controle' => 'atributoControle',
        'justificativa_presencial' => 'justificativaPresencial',
        'existe_resultado' => 'existeResultado',
        'numero_controle' => 'numeroControle'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'modalidade' => 'setModalidade',
        'numero_compra' => 'setNumeroCompra',
        'ano_compra' => 'setAnoCompra',
        'processo' => 'setProcesso',
        'tipo_instrumento_convocatorio' => 'setTipoInstrumentoConvocatorio',
        'situacao_compra' => 'setSituacaoCompra',
        'objeto_compra' => 'setObjetoCompra',
        'informacao_complementar' => 'setInformacaoComplementar',
        'srp' => 'setSrp',
        'data_abertura_proposta' => 'setDataAberturaProposta',
        'data_encerramento_proposta' => 'setDataEncerramentoProposta',
        'data_publicacao_pncp' => 'setDataPublicacaoPncp',
        'data_inclusao' => 'setDataInclusao',
        'data_atualizacao' => 'setDataAtualizacao',
        'sequencial_compra' => 'setSequencialCompra',
        'lista_itens_descricao' => 'setListaItensDescricao',
        'orgao_entidade' => 'setOrgaoEntidade',
        'unidade_orgao' => 'setUnidadeOrgao',
        'orgao_sub_rogado' => 'setOrgaoSubRogado',
        'unidade_sub_rogada' => 'setUnidadeSubRogada',
        'amparo_legal' => 'setAmparoLegal',
        'modo_disputa' => 'setModoDisputa',
        'link_sistema_origem' => 'setLinkSistemaOrigem',
        'excluido' => 'setExcluido',
        'atributo_controle' => 'setAtributoControle',
        'justificativa_presencial' => 'setJustificativaPresencial',
        'existe_resultado' => 'setExisteResultado',
        'numero_controle' => 'setNumeroControle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'modalidade' => 'getModalidade',
        'numero_compra' => 'getNumeroCompra',
        'ano_compra' => 'getAnoCompra',
        'processo' => 'getProcesso',
        'tipo_instrumento_convocatorio' => 'getTipoInstrumentoConvocatorio',
        'situacao_compra' => 'getSituacaoCompra',
        'objeto_compra' => 'getObjetoCompra',
        'informacao_complementar' => 'getInformacaoComplementar',
        'srp' => 'getSrp',
        'data_abertura_proposta' => 'getDataAberturaProposta',
        'data_encerramento_proposta' => 'getDataEncerramentoProposta',
        'data_publicacao_pncp' => 'getDataPublicacaoPncp',
        'data_inclusao' => 'getDataInclusao',
        'data_atualizacao' => 'getDataAtualizacao',
        'sequencial_compra' => 'getSequencialCompra',
        'lista_itens_descricao' => 'getListaItensDescricao',
        'orgao_entidade' => 'getOrgaoEntidade',
        'unidade_orgao' => 'getUnidadeOrgao',
        'orgao_sub_rogado' => 'getOrgaoSubRogado',
        'unidade_sub_rogada' => 'getUnidadeSubRogada',
        'amparo_legal' => 'getAmparoLegal',
        'modo_disputa' => 'getModoDisputa',
        'link_sistema_origem' => 'getLinkSistemaOrigem',
        'excluido' => 'getExcluido',
        'atributo_controle' => 'getAtributoControle',
        'justificativa_presencial' => 'getJustificativaPresencial',
        'existe_resultado' => 'getExisteResultado',
        'numero_controle' => 'getNumeroControle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MODALIDADE__1 = '1';
    public const MODALIDADE__2 = '2';
    public const MODALIDADE__3 = '3';
    public const MODALIDADE__4 = '4';
    public const MODALIDADE__5 = '5';
    public const MODALIDADE__6 = '6';
    public const MODALIDADE__7 = '7';
    public const MODALIDADE__8 = '8';
    public const MODALIDADE__9 = '9';
    public const MODALIDADE__10 = '10';
    public const MODALIDADE__11 = '11';
    public const MODALIDADE__12 = '12';
    public const MODALIDADE__13 = '13';
    public const MODALIDADE__14 = '14';
    public const TIPO_INSTRUMENTO_CONVOCATORIO__1 = '1';
    public const TIPO_INSTRUMENTO_CONVOCATORIO__2 = '2';
    public const TIPO_INSTRUMENTO_CONVOCATORIO__3 = '3';
    public const SITUACAO_COMPRA__1 = '1';
    public const SITUACAO_COMPRA__2 = '2';
    public const SITUACAO_COMPRA__3 = '3';
    public const SITUACAO_COMPRA__4 = '4';
    public const MODO_DISPUTA__1 = '1';
    public const MODO_DISPUTA__2 = '2';
    public const MODO_DISPUTA__3 = '3';
    public const MODO_DISPUTA__4 = '4';
    public const MODO_DISPUTA__5 = '5';
    public const MODO_DISPUTA__6 = '6';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModalidadeAllowableValues()
    {
        return [
            self::MODALIDADE__1,
            self::MODALIDADE__2,
            self::MODALIDADE__3,
            self::MODALIDADE__4,
            self::MODALIDADE__5,
            self::MODALIDADE__6,
            self::MODALIDADE__7,
            self::MODALIDADE__8,
            self::MODALIDADE__9,
            self::MODALIDADE__10,
            self::MODALIDADE__11,
            self::MODALIDADE__12,
            self::MODALIDADE__13,
            self::MODALIDADE__14,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTipoInstrumentoConvocatorioAllowableValues()
    {
        return [
            self::TIPO_INSTRUMENTO_CONVOCATORIO__1,
            self::TIPO_INSTRUMENTO_CONVOCATORIO__2,
            self::TIPO_INSTRUMENTO_CONVOCATORIO__3,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSituacaoCompraAllowableValues()
    {
        return [
            self::SITUACAO_COMPRA__1,
            self::SITUACAO_COMPRA__2,
            self::SITUACAO_COMPRA__3,
            self::SITUACAO_COMPRA__4,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModoDisputaAllowableValues()
    {
        return [
            self::MODO_DISPUTA__1,
            self::MODO_DISPUTA__2,
            self::MODO_DISPUTA__3,
            self::MODO_DISPUTA__4,
            self::MODO_DISPUTA__5,
            self::MODO_DISPUTA__6,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('modalidade', $data ?? [], null);
        $this->setIfExists('numero_compra', $data ?? [], null);
        $this->setIfExists('ano_compra', $data ?? [], null);
        $this->setIfExists('processo', $data ?? [], null);
        $this->setIfExists('tipo_instrumento_convocatorio', $data ?? [], null);
        $this->setIfExists('situacao_compra', $data ?? [], null);
        $this->setIfExists('objeto_compra', $data ?? [], null);
        $this->setIfExists('informacao_complementar', $data ?? [], null);
        $this->setIfExists('srp', $data ?? [], null);
        $this->setIfExists('data_abertura_proposta', $data ?? [], null);
        $this->setIfExists('data_encerramento_proposta', $data ?? [], null);
        $this->setIfExists('data_publicacao_pncp', $data ?? [], null);
        $this->setIfExists('data_inclusao', $data ?? [], null);
        $this->setIfExists('data_atualizacao', $data ?? [], null);
        $this->setIfExists('sequencial_compra', $data ?? [], null);
        $this->setIfExists('lista_itens_descricao', $data ?? [], null);
        $this->setIfExists('orgao_entidade', $data ?? [], null);
        $this->setIfExists('unidade_orgao', $data ?? [], null);
        $this->setIfExists('orgao_sub_rogado', $data ?? [], null);
        $this->setIfExists('unidade_sub_rogada', $data ?? [], null);
        $this->setIfExists('amparo_legal', $data ?? [], null);
        $this->setIfExists('modo_disputa', $data ?? [], null);
        $this->setIfExists('link_sistema_origem', $data ?? [], null);
        $this->setIfExists('excluido', $data ?? [], null);
        $this->setIfExists('atributo_controle', $data ?? [], null);
        $this->setIfExists('justificativa_presencial', $data ?? [], null);
        $this->setIfExists('existe_resultado', $data ?? [], null);
        $this->setIfExists('numero_controle', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getModalidadeAllowableValues();
        if (!is_null($this->container['modalidade']) && !in_array($this->container['modalidade'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'modalidade', must be one of '%s'",
                $this->container['modalidade'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTipoInstrumentoConvocatorioAllowableValues();
        if (!is_null($this->container['tipo_instrumento_convocatorio']) && !in_array($this->container['tipo_instrumento_convocatorio'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tipo_instrumento_convocatorio', must be one of '%s'",
                $this->container['tipo_instrumento_convocatorio'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSituacaoCompraAllowableValues();
        if (!is_null($this->container['situacao_compra']) && !in_array($this->container['situacao_compra'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'situacao_compra', must be one of '%s'",
                $this->container['situacao_compra'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getModoDisputaAllowableValues();
        if (!is_null($this->container['modo_disputa']) && !in_array($this->container['modo_disputa'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'modo_disputa', must be one of '%s'",
                $this->container['modo_disputa'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['justificativa_presencial']) && (mb_strlen($this->container['justificativa_presencial']) > 5120)) {
            $invalidProperties[] = "invalid value for 'justificativa_presencial', the character length must be smaller than or equal to 5120.";
        }

        if (!is_null($this->container['justificativa_presencial']) && (mb_strlen($this->container['justificativa_presencial']) < 0)) {
            $invalidProperties[] = "invalid value for 'justificativa_presencial', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets modalidade
     *
     * @return string|null
     */
    public function getModalidade()
    {
        return $this->container['modalidade'];
    }

    /**
     * Sets modalidade
     *
     * @param string|null $modalidade modalidade
     *
     * @return self
     */
    public function setModalidade($modalidade)
    {
        if (is_null($modalidade)) {
            throw new \InvalidArgumentException('non-nullable modalidade cannot be null');
        }
        $allowedValues = $this->getModalidadeAllowableValues();
        if (!in_array($modalidade, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'modalidade', must be one of '%s'",
                    $modalidade,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['modalidade'] = $modalidade;

        return $this;
    }

    /**
     * Gets numero_compra
     *
     * @return string|null
     */
    public function getNumeroCompra()
    {
        return $this->container['numero_compra'];
    }

    /**
     * Sets numero_compra
     *
     * @param string|null $numero_compra numero_compra
     *
     * @return self
     */
    public function setNumeroCompra($numero_compra)
    {
        if (is_null($numero_compra)) {
            throw new \InvalidArgumentException('non-nullable numero_compra cannot be null');
        }
        $this->container['numero_compra'] = $numero_compra;

        return $this;
    }

    /**
     * Gets ano_compra
     *
     * @return int|null
     */
    public function getAnoCompra()
    {
        return $this->container['ano_compra'];
    }

    /**
     * Sets ano_compra
     *
     * @param int|null $ano_compra ano_compra
     *
     * @return self
     */
    public function setAnoCompra($ano_compra)
    {
        if (is_null($ano_compra)) {
            throw new \InvalidArgumentException('non-nullable ano_compra cannot be null');
        }
        $this->container['ano_compra'] = $ano_compra;

        return $this;
    }

    /**
     * Gets processo
     *
     * @return string|null
     */
    public function getProcesso()
    {
        return $this->container['processo'];
    }

    /**
     * Sets processo
     *
     * @param string|null $processo processo
     *
     * @return self
     */
    public function setProcesso($processo)
    {
        if (is_null($processo)) {
            throw new \InvalidArgumentException('non-nullable processo cannot be null');
        }
        $this->container['processo'] = $processo;

        return $this;
    }

    /**
     * Gets tipo_instrumento_convocatorio
     *
     * @return string|null
     */
    public function getTipoInstrumentoConvocatorio()
    {
        return $this->container['tipo_instrumento_convocatorio'];
    }

    /**
     * Sets tipo_instrumento_convocatorio
     *
     * @param string|null $tipo_instrumento_convocatorio tipo_instrumento_convocatorio
     *
     * @return self
     */
    public function setTipoInstrumentoConvocatorio($tipo_instrumento_convocatorio)
    {
        if (is_null($tipo_instrumento_convocatorio)) {
            throw new \InvalidArgumentException('non-nullable tipo_instrumento_convocatorio cannot be null');
        }
        $allowedValues = $this->getTipoInstrumentoConvocatorioAllowableValues();
        if (!in_array($tipo_instrumento_convocatorio, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tipo_instrumento_convocatorio', must be one of '%s'",
                    $tipo_instrumento_convocatorio,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tipo_instrumento_convocatorio'] = $tipo_instrumento_convocatorio;

        return $this;
    }

    /**
     * Gets situacao_compra
     *
     * @return string|null
     */
    public function getSituacaoCompra()
    {
        return $this->container['situacao_compra'];
    }

    /**
     * Sets situacao_compra
     *
     * @param string|null $situacao_compra situacao_compra
     *
     * @return self
     */
    public function setSituacaoCompra($situacao_compra)
    {
        if (is_null($situacao_compra)) {
            throw new \InvalidArgumentException('non-nullable situacao_compra cannot be null');
        }
        $allowedValues = $this->getSituacaoCompraAllowableValues();
        if (!in_array($situacao_compra, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'situacao_compra', must be one of '%s'",
                    $situacao_compra,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['situacao_compra'] = $situacao_compra;

        return $this;
    }

    /**
     * Gets objeto_compra
     *
     * @return string|null
     */
    public function getObjetoCompra()
    {
        return $this->container['objeto_compra'];
    }

    /**
     * Sets objeto_compra
     *
     * @param string|null $objeto_compra objeto_compra
     *
     * @return self
     */
    public function setObjetoCompra($objeto_compra)
    {
        if (is_null($objeto_compra)) {
            throw new \InvalidArgumentException('non-nullable objeto_compra cannot be null');
        }
        $this->container['objeto_compra'] = $objeto_compra;

        return $this;
    }

    /**
     * Gets informacao_complementar
     *
     * @return string|null
     */
    public function getInformacaoComplementar()
    {
        return $this->container['informacao_complementar'];
    }

    /**
     * Sets informacao_complementar
     *
     * @param string|null $informacao_complementar informacao_complementar
     *
     * @return self
     */
    public function setInformacaoComplementar($informacao_complementar)
    {
        if (is_null($informacao_complementar)) {
            throw new \InvalidArgumentException('non-nullable informacao_complementar cannot be null');
        }
        $this->container['informacao_complementar'] = $informacao_complementar;

        return $this;
    }

    /**
     * Gets srp
     *
     * @return bool|null
     */
    public function getSrp()
    {
        return $this->container['srp'];
    }

    /**
     * Sets srp
     *
     * @param bool|null $srp srp
     *
     * @return self
     */
    public function setSrp($srp)
    {
        if (is_null($srp)) {
            throw new \InvalidArgumentException('non-nullable srp cannot be null');
        }
        $this->container['srp'] = $srp;

        return $this;
    }

    /**
     * Gets data_abertura_proposta
     *
     * @return \DateTime|null
     */
    public function getDataAberturaProposta()
    {
        return $this->container['data_abertura_proposta'];
    }

    /**
     * Sets data_abertura_proposta
     *
     * @param \DateTime|null $data_abertura_proposta data_abertura_proposta
     *
     * @return self
     */
    public function setDataAberturaProposta($data_abertura_proposta)
    {
        if (is_null($data_abertura_proposta)) {
            throw new \InvalidArgumentException('non-nullable data_abertura_proposta cannot be null');
        }
        $this->container['data_abertura_proposta'] = $data_abertura_proposta;

        return $this;
    }

    /**
     * Gets data_encerramento_proposta
     *
     * @return \DateTime|null
     */
    public function getDataEncerramentoProposta()
    {
        return $this->container['data_encerramento_proposta'];
    }

    /**
     * Sets data_encerramento_proposta
     *
     * @param \DateTime|null $data_encerramento_proposta data_encerramento_proposta
     *
     * @return self
     */
    public function setDataEncerramentoProposta($data_encerramento_proposta)
    {
        if (is_null($data_encerramento_proposta)) {
            throw new \InvalidArgumentException('non-nullable data_encerramento_proposta cannot be null');
        }
        $this->container['data_encerramento_proposta'] = $data_encerramento_proposta;

        return $this;
    }

    /**
     * Gets data_publicacao_pncp
     *
     * @return \DateTime|null
     */
    public function getDataPublicacaoPncp()
    {
        return $this->container['data_publicacao_pncp'];
    }

    /**
     * Sets data_publicacao_pncp
     *
     * @param \DateTime|null $data_publicacao_pncp data_publicacao_pncp
     *
     * @return self
     */
    public function setDataPublicacaoPncp($data_publicacao_pncp)
    {
        if (is_null($data_publicacao_pncp)) {
            throw new \InvalidArgumentException('non-nullable data_publicacao_pncp cannot be null');
        }
        $this->container['data_publicacao_pncp'] = $data_publicacao_pncp;

        return $this;
    }

    /**
     * Gets data_inclusao
     *
     * @return \DateTime|null
     */
    public function getDataInclusao()
    {
        return $this->container['data_inclusao'];
    }

    /**
     * Sets data_inclusao
     *
     * @param \DateTime|null $data_inclusao data_inclusao
     *
     * @return self
     */
    public function setDataInclusao($data_inclusao)
    {
        if (is_null($data_inclusao)) {
            throw new \InvalidArgumentException('non-nullable data_inclusao cannot be null');
        }
        $this->container['data_inclusao'] = $data_inclusao;

        return $this;
    }

    /**
     * Gets data_atualizacao
     *
     * @return \DateTime|null
     */
    public function getDataAtualizacao()
    {
        return $this->container['data_atualizacao'];
    }

    /**
     * Sets data_atualizacao
     *
     * @param \DateTime|null $data_atualizacao data_atualizacao
     *
     * @return self
     */
    public function setDataAtualizacao($data_atualizacao)
    {
        if (is_null($data_atualizacao)) {
            throw new \InvalidArgumentException('non-nullable data_atualizacao cannot be null');
        }
        $this->container['data_atualizacao'] = $data_atualizacao;

        return $this;
    }

    /**
     * Gets sequencial_compra
     *
     * @return int|null
     */
    public function getSequencialCompra()
    {
        return $this->container['sequencial_compra'];
    }

    /**
     * Sets sequencial_compra
     *
     * @param int|null $sequencial_compra sequencial_compra
     *
     * @return self
     */
    public function setSequencialCompra($sequencial_compra)
    {
        if (is_null($sequencial_compra)) {
            throw new \InvalidArgumentException('non-nullable sequencial_compra cannot be null');
        }
        $this->container['sequencial_compra'] = $sequencial_compra;

        return $this;
    }

    /**
     * Gets lista_itens_descricao
     *
     * @return string|null
     */
    public function getListaItensDescricao()
    {
        return $this->container['lista_itens_descricao'];
    }

    /**
     * Sets lista_itens_descricao
     *
     * @param string|null $lista_itens_descricao lista_itens_descricao
     *
     * @return self
     */
    public function setListaItensDescricao($lista_itens_descricao)
    {
        if (is_null($lista_itens_descricao)) {
            throw new \InvalidArgumentException('non-nullable lista_itens_descricao cannot be null');
        }
        $this->container['lista_itens_descricao'] = $lista_itens_descricao;

        return $this;
    }

    /**
     * Gets orgao_entidade
     *
     * @return \OpenAPI\Client\Model\OrgaoEntidade|null
     */
    public function getOrgaoEntidade()
    {
        return $this->container['orgao_entidade'];
    }

    /**
     * Sets orgao_entidade
     *
     * @param \OpenAPI\Client\Model\OrgaoEntidade|null $orgao_entidade orgao_entidade
     *
     * @return self
     */
    public function setOrgaoEntidade($orgao_entidade)
    {
        if (is_null($orgao_entidade)) {
            throw new \InvalidArgumentException('non-nullable orgao_entidade cannot be null');
        }
        $this->container['orgao_entidade'] = $orgao_entidade;

        return $this;
    }

    /**
     * Gets unidade_orgao
     *
     * @return \OpenAPI\Client\Model\UnidadeOrgao|null
     */
    public function getUnidadeOrgao()
    {
        return $this->container['unidade_orgao'];
    }

    /**
     * Sets unidade_orgao
     *
     * @param \OpenAPI\Client\Model\UnidadeOrgao|null $unidade_orgao unidade_orgao
     *
     * @return self
     */
    public function setUnidadeOrgao($unidade_orgao)
    {
        if (is_null($unidade_orgao)) {
            throw new \InvalidArgumentException('non-nullable unidade_orgao cannot be null');
        }
        $this->container['unidade_orgao'] = $unidade_orgao;

        return $this;
    }

    /**
     * Gets orgao_sub_rogado
     *
     * @return \OpenAPI\Client\Model\OrgaoEntidade|null
     */
    public function getOrgaoSubRogado()
    {
        return $this->container['orgao_sub_rogado'];
    }

    /**
     * Sets orgao_sub_rogado
     *
     * @param \OpenAPI\Client\Model\OrgaoEntidade|null $orgao_sub_rogado orgao_sub_rogado
     *
     * @return self
     */
    public function setOrgaoSubRogado($orgao_sub_rogado)
    {
        if (is_null($orgao_sub_rogado)) {
            throw new \InvalidArgumentException('non-nullable orgao_sub_rogado cannot be null');
        }
        $this->container['orgao_sub_rogado'] = $orgao_sub_rogado;

        return $this;
    }

    /**
     * Gets unidade_sub_rogada
     *
     * @return \OpenAPI\Client\Model\UnidadeOrgao|null
     */
    public function getUnidadeSubRogada()
    {
        return $this->container['unidade_sub_rogada'];
    }

    /**
     * Sets unidade_sub_rogada
     *
     * @param \OpenAPI\Client\Model\UnidadeOrgao|null $unidade_sub_rogada unidade_sub_rogada
     *
     * @return self
     */
    public function setUnidadeSubRogada($unidade_sub_rogada)
    {
        if (is_null($unidade_sub_rogada)) {
            throw new \InvalidArgumentException('non-nullable unidade_sub_rogada cannot be null');
        }
        $this->container['unidade_sub_rogada'] = $unidade_sub_rogada;

        return $this;
    }

    /**
     * Gets amparo_legal
     *
     * @return \OpenAPI\Client\Model\AmparoLegal|null
     */
    public function getAmparoLegal()
    {
        return $this->container['amparo_legal'];
    }

    /**
     * Sets amparo_legal
     *
     * @param \OpenAPI\Client\Model\AmparoLegal|null $amparo_legal amparo_legal
     *
     * @return self
     */
    public function setAmparoLegal($amparo_legal)
    {
        if (is_null($amparo_legal)) {
            throw new \InvalidArgumentException('non-nullable amparo_legal cannot be null');
        }
        $this->container['amparo_legal'] = $amparo_legal;

        return $this;
    }

    /**
     * Gets modo_disputa
     *
     * @return string|null
     */
    public function getModoDisputa()
    {
        return $this->container['modo_disputa'];
    }

    /**
     * Sets modo_disputa
     *
     * @param string|null $modo_disputa modo_disputa
     *
     * @return self
     */
    public function setModoDisputa($modo_disputa)
    {
        if (is_null($modo_disputa)) {
            throw new \InvalidArgumentException('non-nullable modo_disputa cannot be null');
        }
        $allowedValues = $this->getModoDisputaAllowableValues();
        if (!in_array($modo_disputa, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'modo_disputa', must be one of '%s'",
                    $modo_disputa,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['modo_disputa'] = $modo_disputa;

        return $this;
    }

    /**
     * Gets link_sistema_origem
     *
     * @return string|null
     */
    public function getLinkSistemaOrigem()
    {
        return $this->container['link_sistema_origem'];
    }

    /**
     * Sets link_sistema_origem
     *
     * @param string|null $link_sistema_origem link_sistema_origem
     *
     * @return self
     */
    public function setLinkSistemaOrigem($link_sistema_origem)
    {
        if (is_null($link_sistema_origem)) {
            throw new \InvalidArgumentException('non-nullable link_sistema_origem cannot be null');
        }
        $this->container['link_sistema_origem'] = $link_sistema_origem;

        return $this;
    }

    /**
     * Gets excluido
     *
     * @return bool|null
     */
    public function getExcluido()
    {
        return $this->container['excluido'];
    }

    /**
     * Sets excluido
     *
     * @param bool|null $excluido excluido
     *
     * @return self
     */
    public function setExcluido($excluido)
    {
        if (is_null($excluido)) {
            throw new \InvalidArgumentException('non-nullable excluido cannot be null');
        }
        $this->container['excluido'] = $excluido;

        return $this;
    }

    /**
     * Gets atributo_controle
     *
     * @return int|null
     */
    public function getAtributoControle()
    {
        return $this->container['atributo_controle'];
    }

    /**
     * Sets atributo_controle
     *
     * @param int|null $atributo_controle atributo_controle
     *
     * @return self
     */
    public function setAtributoControle($atributo_controle)
    {
        if (is_null($atributo_controle)) {
            throw new \InvalidArgumentException('non-nullable atributo_controle cannot be null');
        }
        $this->container['atributo_controle'] = $atributo_controle;

        return $this;
    }

    /**
     * Gets justificativa_presencial
     *
     * @return string|null
     */
    public function getJustificativaPresencial()
    {
        return $this->container['justificativa_presencial'];
    }

    /**
     * Sets justificativa_presencial
     *
     * @param string|null $justificativa_presencial justificativa_presencial
     *
     * @return self
     */
    public function setJustificativaPresencial($justificativa_presencial)
    {
        if (is_null($justificativa_presencial)) {
            throw new \InvalidArgumentException('non-nullable justificativa_presencial cannot be null');
        }
        if ((mb_strlen($justificativa_presencial) > 5120)) {
            throw new \InvalidArgumentException('invalid length for $justificativa_presencial when calling Compra., must be smaller than or equal to 5120.');
        }
        if ((mb_strlen($justificativa_presencial) < 0)) {
            throw new \InvalidArgumentException('invalid length for $justificativa_presencial when calling Compra., must be bigger than or equal to 0.');
        }

        $this->container['justificativa_presencial'] = $justificativa_presencial;

        return $this;
    }

    /**
     * Gets existe_resultado
     *
     * @return bool|null
     */
    public function getExisteResultado()
    {
        return $this->container['existe_resultado'];
    }

    /**
     * Sets existe_resultado
     *
     * @param bool|null $existe_resultado existe_resultado
     *
     * @return self
     */
    public function setExisteResultado($existe_resultado)
    {
        if (is_null($existe_resultado)) {
            throw new \InvalidArgumentException('non-nullable existe_resultado cannot be null');
        }
        $this->container['existe_resultado'] = $existe_resultado;

        return $this;
    }

    /**
     * Gets numero_controle
     *
     * @return string|null
     */
    public function getNumeroControle()
    {
        return $this->container['numero_controle'];
    }

    /**
     * Sets numero_controle
     *
     * @param string|null $numero_controle numero_controle
     *
     * @return self
     */
    public function setNumeroControle($numero_controle)
    {
        if (is_null($numero_controle)) {
            throw new \InvalidArgumentException('non-nullable numero_controle cannot be null');
        }
        $this->container['numero_controle'] = $numero_controle;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


