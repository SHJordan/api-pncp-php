<?php
/**
 * RecuperarHistoricoCompraDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API PNCP
 *
 * API REST de serviços do Portal Nacional de Contratações Públicas (PNCP)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: css.serpro@serpro.gov.br
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RecuperarHistoricoCompraDTO Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RecuperarHistoricoCompraDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RecuperarHistoricoCompraDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'justificativa' => 'string',
        'tipo_log_manutencao' => 'string',
        'categoria_log_manutencao' => 'string',
        'log_manutencao_data_inclusao' => '\DateTime',
        'compra_orgao_cnpj' => 'string',
        'compra_ano' => 'int',
        'compra_sequencial' => 'int',
        'usuario_nome' => 'string',
        'tipo_log_manutencao_nome' => 'string',
        'categoria_log_manutencao_nome' => 'string',
        'item_numero' => 'int',
        'item_resultado_numero' => 'int',
        'item_resultado_sequencial' => 'int',
        'documento_tipo' => 'string',
        'documento_titulo' => 'string',
        'documento_sequencial' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'justificativa' => null,
        'tipo_log_manutencao' => null,
        'categoria_log_manutencao' => null,
        'log_manutencao_data_inclusao' => 'date-time',
        'compra_orgao_cnpj' => null,
        'compra_ano' => 'int32',
        'compra_sequencial' => 'int32',
        'usuario_nome' => null,
        'tipo_log_manutencao_nome' => null,
        'categoria_log_manutencao_nome' => null,
        'item_numero' => 'int32',
        'item_resultado_numero' => 'int32',
        'item_resultado_sequencial' => 'int32',
        'documento_tipo' => null,
        'documento_titulo' => null,
        'documento_sequencial' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'justificativa' => false,
		'tipo_log_manutencao' => false,
		'categoria_log_manutencao' => false,
		'log_manutencao_data_inclusao' => false,
		'compra_orgao_cnpj' => false,
		'compra_ano' => false,
		'compra_sequencial' => false,
		'usuario_nome' => false,
		'tipo_log_manutencao_nome' => false,
		'categoria_log_manutencao_nome' => false,
		'item_numero' => false,
		'item_resultado_numero' => false,
		'item_resultado_sequencial' => false,
		'documento_tipo' => false,
		'documento_titulo' => false,
		'documento_sequencial' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'justificativa' => 'justificativa',
        'tipo_log_manutencao' => 'tipoLogManutencao',
        'categoria_log_manutencao' => 'categoriaLogManutencao',
        'log_manutencao_data_inclusao' => 'logManutencaoDataInclusao',
        'compra_orgao_cnpj' => 'compraOrgaoCnpj',
        'compra_ano' => 'compraAno',
        'compra_sequencial' => 'compraSequencial',
        'usuario_nome' => 'usuarioNome',
        'tipo_log_manutencao_nome' => 'tipoLogManutencaoNome',
        'categoria_log_manutencao_nome' => 'categoriaLogManutencaoNome',
        'item_numero' => 'itemNumero',
        'item_resultado_numero' => 'itemResultadoNumero',
        'item_resultado_sequencial' => 'itemResultadoSequencial',
        'documento_tipo' => 'documentoTipo',
        'documento_titulo' => 'documentoTitulo',
        'documento_sequencial' => 'documentoSequencial'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'justificativa' => 'setJustificativa',
        'tipo_log_manutencao' => 'setTipoLogManutencao',
        'categoria_log_manutencao' => 'setCategoriaLogManutencao',
        'log_manutencao_data_inclusao' => 'setLogManutencaoDataInclusao',
        'compra_orgao_cnpj' => 'setCompraOrgaoCnpj',
        'compra_ano' => 'setCompraAno',
        'compra_sequencial' => 'setCompraSequencial',
        'usuario_nome' => 'setUsuarioNome',
        'tipo_log_manutencao_nome' => 'setTipoLogManutencaoNome',
        'categoria_log_manutencao_nome' => 'setCategoriaLogManutencaoNome',
        'item_numero' => 'setItemNumero',
        'item_resultado_numero' => 'setItemResultadoNumero',
        'item_resultado_sequencial' => 'setItemResultadoSequencial',
        'documento_tipo' => 'setDocumentoTipo',
        'documento_titulo' => 'setDocumentoTitulo',
        'documento_sequencial' => 'setDocumentoSequencial'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'justificativa' => 'getJustificativa',
        'tipo_log_manutencao' => 'getTipoLogManutencao',
        'categoria_log_manutencao' => 'getCategoriaLogManutencao',
        'log_manutencao_data_inclusao' => 'getLogManutencaoDataInclusao',
        'compra_orgao_cnpj' => 'getCompraOrgaoCnpj',
        'compra_ano' => 'getCompraAno',
        'compra_sequencial' => 'getCompraSequencial',
        'usuario_nome' => 'getUsuarioNome',
        'tipo_log_manutencao_nome' => 'getTipoLogManutencaoNome',
        'categoria_log_manutencao_nome' => 'getCategoriaLogManutencaoNome',
        'item_numero' => 'getItemNumero',
        'item_resultado_numero' => 'getItemResultadoNumero',
        'item_resultado_sequencial' => 'getItemResultadoSequencial',
        'documento_tipo' => 'getDocumentoTipo',
        'documento_titulo' => 'getDocumentoTitulo',
        'documento_sequencial' => 'getDocumentoSequencial'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TIPO_LOG_MANUTENCAO__0 = '0';
    public const TIPO_LOG_MANUTENCAO__1 = '1';
    public const TIPO_LOG_MANUTENCAO__2 = '2';
    public const CATEGORIA_LOG_MANUTENCAO__1 = '1';
    public const CATEGORIA_LOG_MANUTENCAO__2 = '2';
    public const CATEGORIA_LOG_MANUTENCAO__3 = '3';
    public const CATEGORIA_LOG_MANUTENCAO__4 = '4';
    public const CATEGORIA_LOG_MANUTENCAO__5 = '5';
    public const CATEGORIA_LOG_MANUTENCAO__6 = '6';
    public const CATEGORIA_LOG_MANUTENCAO__7 = '7';
    public const CATEGORIA_LOG_MANUTENCAO__8 = '8';
    public const CATEGORIA_LOG_MANUTENCAO__9 = '9';
    public const CATEGORIA_LOG_MANUTENCAO__10 = '10';
    public const CATEGORIA_LOG_MANUTENCAO__11 = '11';
    public const CATEGORIA_LOG_MANUTENCAO__12 = '12';
    public const CATEGORIA_LOG_MANUTENCAO__13 = '13';
    public const CATEGORIA_LOG_MANUTENCAO__14 = '14';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTipoLogManutencaoAllowableValues()
    {
        return [
            self::TIPO_LOG_MANUTENCAO__0,
            self::TIPO_LOG_MANUTENCAO__1,
            self::TIPO_LOG_MANUTENCAO__2,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCategoriaLogManutencaoAllowableValues()
    {
        return [
            self::CATEGORIA_LOG_MANUTENCAO__1,
            self::CATEGORIA_LOG_MANUTENCAO__2,
            self::CATEGORIA_LOG_MANUTENCAO__3,
            self::CATEGORIA_LOG_MANUTENCAO__4,
            self::CATEGORIA_LOG_MANUTENCAO__5,
            self::CATEGORIA_LOG_MANUTENCAO__6,
            self::CATEGORIA_LOG_MANUTENCAO__7,
            self::CATEGORIA_LOG_MANUTENCAO__8,
            self::CATEGORIA_LOG_MANUTENCAO__9,
            self::CATEGORIA_LOG_MANUTENCAO__10,
            self::CATEGORIA_LOG_MANUTENCAO__11,
            self::CATEGORIA_LOG_MANUTENCAO__12,
            self::CATEGORIA_LOG_MANUTENCAO__13,
            self::CATEGORIA_LOG_MANUTENCAO__14,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('justificativa', $data ?? [], null);
        $this->setIfExists('tipo_log_manutencao', $data ?? [], null);
        $this->setIfExists('categoria_log_manutencao', $data ?? [], null);
        $this->setIfExists('log_manutencao_data_inclusao', $data ?? [], null);
        $this->setIfExists('compra_orgao_cnpj', $data ?? [], null);
        $this->setIfExists('compra_ano', $data ?? [], null);
        $this->setIfExists('compra_sequencial', $data ?? [], null);
        $this->setIfExists('usuario_nome', $data ?? [], null);
        $this->setIfExists('tipo_log_manutencao_nome', $data ?? [], null);
        $this->setIfExists('categoria_log_manutencao_nome', $data ?? [], null);
        $this->setIfExists('item_numero', $data ?? [], null);
        $this->setIfExists('item_resultado_numero', $data ?? [], null);
        $this->setIfExists('item_resultado_sequencial', $data ?? [], null);
        $this->setIfExists('documento_tipo', $data ?? [], null);
        $this->setIfExists('documento_titulo', $data ?? [], null);
        $this->setIfExists('documento_sequencial', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTipoLogManutencaoAllowableValues();
        if (!is_null($this->container['tipo_log_manutencao']) && !in_array($this->container['tipo_log_manutencao'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tipo_log_manutencao', must be one of '%s'",
                $this->container['tipo_log_manutencao'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCategoriaLogManutencaoAllowableValues();
        if (!is_null($this->container['categoria_log_manutencao']) && !in_array($this->container['categoria_log_manutencao'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'categoria_log_manutencao', must be one of '%s'",
                $this->container['categoria_log_manutencao'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets justificativa
     *
     * @return string|null
     */
    public function getJustificativa()
    {
        return $this->container['justificativa'];
    }

    /**
     * Sets justificativa
     *
     * @param string|null $justificativa justificativa
     *
     * @return self
     */
    public function setJustificativa($justificativa)
    {
        if (is_null($justificativa)) {
            throw new \InvalidArgumentException('non-nullable justificativa cannot be null');
        }
        $this->container['justificativa'] = $justificativa;

        return $this;
    }

    /**
     * Gets tipo_log_manutencao
     *
     * @return string|null
     */
    public function getTipoLogManutencao()
    {
        return $this->container['tipo_log_manutencao'];
    }

    /**
     * Sets tipo_log_manutencao
     *
     * @param string|null $tipo_log_manutencao tipo_log_manutencao
     *
     * @return self
     */
    public function setTipoLogManutencao($tipo_log_manutencao)
    {
        if (is_null($tipo_log_manutencao)) {
            throw new \InvalidArgumentException('non-nullable tipo_log_manutencao cannot be null');
        }
        $allowedValues = $this->getTipoLogManutencaoAllowableValues();
        if (!in_array($tipo_log_manutencao, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tipo_log_manutencao', must be one of '%s'",
                    $tipo_log_manutencao,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tipo_log_manutencao'] = $tipo_log_manutencao;

        return $this;
    }

    /**
     * Gets categoria_log_manutencao
     *
     * @return string|null
     */
    public function getCategoriaLogManutencao()
    {
        return $this->container['categoria_log_manutencao'];
    }

    /**
     * Sets categoria_log_manutencao
     *
     * @param string|null $categoria_log_manutencao categoria_log_manutencao
     *
     * @return self
     */
    public function setCategoriaLogManutencao($categoria_log_manutencao)
    {
        if (is_null($categoria_log_manutencao)) {
            throw new \InvalidArgumentException('non-nullable categoria_log_manutencao cannot be null');
        }
        $allowedValues = $this->getCategoriaLogManutencaoAllowableValues();
        if (!in_array($categoria_log_manutencao, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'categoria_log_manutencao', must be one of '%s'",
                    $categoria_log_manutencao,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['categoria_log_manutencao'] = $categoria_log_manutencao;

        return $this;
    }

    /**
     * Gets log_manutencao_data_inclusao
     *
     * @return \DateTime|null
     */
    public function getLogManutencaoDataInclusao()
    {
        return $this->container['log_manutencao_data_inclusao'];
    }

    /**
     * Sets log_manutencao_data_inclusao
     *
     * @param \DateTime|null $log_manutencao_data_inclusao log_manutencao_data_inclusao
     *
     * @return self
     */
    public function setLogManutencaoDataInclusao($log_manutencao_data_inclusao)
    {
        if (is_null($log_manutencao_data_inclusao)) {
            throw new \InvalidArgumentException('non-nullable log_manutencao_data_inclusao cannot be null');
        }
        $this->container['log_manutencao_data_inclusao'] = $log_manutencao_data_inclusao;

        return $this;
    }

    /**
     * Gets compra_orgao_cnpj
     *
     * @return string|null
     */
    public function getCompraOrgaoCnpj()
    {
        return $this->container['compra_orgao_cnpj'];
    }

    /**
     * Sets compra_orgao_cnpj
     *
     * @param string|null $compra_orgao_cnpj compra_orgao_cnpj
     *
     * @return self
     */
    public function setCompraOrgaoCnpj($compra_orgao_cnpj)
    {
        if (is_null($compra_orgao_cnpj)) {
            throw new \InvalidArgumentException('non-nullable compra_orgao_cnpj cannot be null');
        }
        $this->container['compra_orgao_cnpj'] = $compra_orgao_cnpj;

        return $this;
    }

    /**
     * Gets compra_ano
     *
     * @return int|null
     */
    public function getCompraAno()
    {
        return $this->container['compra_ano'];
    }

    /**
     * Sets compra_ano
     *
     * @param int|null $compra_ano compra_ano
     *
     * @return self
     */
    public function setCompraAno($compra_ano)
    {
        if (is_null($compra_ano)) {
            throw new \InvalidArgumentException('non-nullable compra_ano cannot be null');
        }
        $this->container['compra_ano'] = $compra_ano;

        return $this;
    }

    /**
     * Gets compra_sequencial
     *
     * @return int|null
     */
    public function getCompraSequencial()
    {
        return $this->container['compra_sequencial'];
    }

    /**
     * Sets compra_sequencial
     *
     * @param int|null $compra_sequencial compra_sequencial
     *
     * @return self
     */
    public function setCompraSequencial($compra_sequencial)
    {
        if (is_null($compra_sequencial)) {
            throw new \InvalidArgumentException('non-nullable compra_sequencial cannot be null');
        }
        $this->container['compra_sequencial'] = $compra_sequencial;

        return $this;
    }

    /**
     * Gets usuario_nome
     *
     * @return string|null
     */
    public function getUsuarioNome()
    {
        return $this->container['usuario_nome'];
    }

    /**
     * Sets usuario_nome
     *
     * @param string|null $usuario_nome usuario_nome
     *
     * @return self
     */
    public function setUsuarioNome($usuario_nome)
    {
        if (is_null($usuario_nome)) {
            throw new \InvalidArgumentException('non-nullable usuario_nome cannot be null');
        }
        $this->container['usuario_nome'] = $usuario_nome;

        return $this;
    }

    /**
     * Gets tipo_log_manutencao_nome
     *
     * @return string|null
     */
    public function getTipoLogManutencaoNome()
    {
        return $this->container['tipo_log_manutencao_nome'];
    }

    /**
     * Sets tipo_log_manutencao_nome
     *
     * @param string|null $tipo_log_manutencao_nome tipo_log_manutencao_nome
     *
     * @return self
     */
    public function setTipoLogManutencaoNome($tipo_log_manutencao_nome)
    {
        if (is_null($tipo_log_manutencao_nome)) {
            throw new \InvalidArgumentException('non-nullable tipo_log_manutencao_nome cannot be null');
        }
        $this->container['tipo_log_manutencao_nome'] = $tipo_log_manutencao_nome;

        return $this;
    }

    /**
     * Gets categoria_log_manutencao_nome
     *
     * @return string|null
     */
    public function getCategoriaLogManutencaoNome()
    {
        return $this->container['categoria_log_manutencao_nome'];
    }

    /**
     * Sets categoria_log_manutencao_nome
     *
     * @param string|null $categoria_log_manutencao_nome categoria_log_manutencao_nome
     *
     * @return self
     */
    public function setCategoriaLogManutencaoNome($categoria_log_manutencao_nome)
    {
        if (is_null($categoria_log_manutencao_nome)) {
            throw new \InvalidArgumentException('non-nullable categoria_log_manutencao_nome cannot be null');
        }
        $this->container['categoria_log_manutencao_nome'] = $categoria_log_manutencao_nome;

        return $this;
    }

    /**
     * Gets item_numero
     *
     * @return int|null
     */
    public function getItemNumero()
    {
        return $this->container['item_numero'];
    }

    /**
     * Sets item_numero
     *
     * @param int|null $item_numero item_numero
     *
     * @return self
     */
    public function setItemNumero($item_numero)
    {
        if (is_null($item_numero)) {
            throw new \InvalidArgumentException('non-nullable item_numero cannot be null');
        }
        $this->container['item_numero'] = $item_numero;

        return $this;
    }

    /**
     * Gets item_resultado_numero
     *
     * @return int|null
     */
    public function getItemResultadoNumero()
    {
        return $this->container['item_resultado_numero'];
    }

    /**
     * Sets item_resultado_numero
     *
     * @param int|null $item_resultado_numero item_resultado_numero
     *
     * @return self
     */
    public function setItemResultadoNumero($item_resultado_numero)
    {
        if (is_null($item_resultado_numero)) {
            throw new \InvalidArgumentException('non-nullable item_resultado_numero cannot be null');
        }
        $this->container['item_resultado_numero'] = $item_resultado_numero;

        return $this;
    }

    /**
     * Gets item_resultado_sequencial
     *
     * @return int|null
     */
    public function getItemResultadoSequencial()
    {
        return $this->container['item_resultado_sequencial'];
    }

    /**
     * Sets item_resultado_sequencial
     *
     * @param int|null $item_resultado_sequencial item_resultado_sequencial
     *
     * @return self
     */
    public function setItemResultadoSequencial($item_resultado_sequencial)
    {
        if (is_null($item_resultado_sequencial)) {
            throw new \InvalidArgumentException('non-nullable item_resultado_sequencial cannot be null');
        }
        $this->container['item_resultado_sequencial'] = $item_resultado_sequencial;

        return $this;
    }

    /**
     * Gets documento_tipo
     *
     * @return string|null
     */
    public function getDocumentoTipo()
    {
        return $this->container['documento_tipo'];
    }

    /**
     * Sets documento_tipo
     *
     * @param string|null $documento_tipo documento_tipo
     *
     * @return self
     */
    public function setDocumentoTipo($documento_tipo)
    {
        if (is_null($documento_tipo)) {
            throw new \InvalidArgumentException('non-nullable documento_tipo cannot be null');
        }
        $this->container['documento_tipo'] = $documento_tipo;

        return $this;
    }

    /**
     * Gets documento_titulo
     *
     * @return string|null
     */
    public function getDocumentoTitulo()
    {
        return $this->container['documento_titulo'];
    }

    /**
     * Sets documento_titulo
     *
     * @param string|null $documento_titulo documento_titulo
     *
     * @return self
     */
    public function setDocumentoTitulo($documento_titulo)
    {
        if (is_null($documento_titulo)) {
            throw new \InvalidArgumentException('non-nullable documento_titulo cannot be null');
        }
        $this->container['documento_titulo'] = $documento_titulo;

        return $this;
    }

    /**
     * Gets documento_sequencial
     *
     * @return int|null
     */
    public function getDocumentoSequencial()
    {
        return $this->container['documento_sequencial'];
    }

    /**
     * Sets documento_sequencial
     *
     * @param int|null $documento_sequencial documento_sequencial
     *
     * @return self
     */
    public function setDocumentoSequencial($documento_sequencial)
    {
        if (is_null($documento_sequencial)) {
            throw new \InvalidArgumentException('non-nullable documento_sequencial cannot be null');
        }
        $this->container['documento_sequencial'] = $documento_sequencial;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


