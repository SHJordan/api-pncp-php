<?php
/**
 * AlterarContratoDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API PNCP
 *
 * API REST de serviços do Portal Nacional de Contratações Públicas (PNCP)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: css.serpro@serpro.gov.br
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AlterarContratoDTO Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AlterarContratoDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AlterarContratoDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cnpj_compra' => 'string',
        'ano_compra' => 'int',
        'sequencial_compra' => 'int',
        'tipo_contrato_id' => 'int',
        'numero_contrato_empenho' => 'string',
        'processo' => 'string',
        'categoria_processo_id' => 'int',
        'ni_fornecedor' => 'string',
        'tipo_pessoa_fornecedor' => 'string',
        'nome_razao_social_fornecedor' => 'string',
        'receita' => 'bool',
        'codigo_unidade' => 'string',
        'objeto_contrato' => 'string',
        'valor_inicial' => 'float',
        'numero_parcelas' => 'int',
        'valor_parcela' => 'float',
        'valor_global' => 'float',
        'data_assinatura' => '\DateTime',
        'data_vigencia_inicio' => '\DateTime',
        'data_vigencia_fim' => '\DateTime',
        'valor_acumulado' => 'float',
        'ni_fornecedor_sub_contratado' => 'string',
        'tipo_pessoa_fornecedor_sub_contratado' => 'string',
        'nome_razao_social_fornecedor_sub_contratado' => 'string',
        'informacao_complementar' => 'string',
        'url_cipi' => 'string',
        'identificador_cipi' => 'string',
        'cnpj_orgao_sub_rogado' => 'string',
        'codigo_unidade_sub_rogada' => 'string',
        'justificativa' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cnpj_compra' => null,
        'ano_compra' => 'int32',
        'sequencial_compra' => 'int32',
        'tipo_contrato_id' => 'int64',
        'numero_contrato_empenho' => null,
        'processo' => null,
        'categoria_processo_id' => 'int64',
        'ni_fornecedor' => null,
        'tipo_pessoa_fornecedor' => null,
        'nome_razao_social_fornecedor' => null,
        'receita' => null,
        'codigo_unidade' => null,
        'objeto_contrato' => null,
        'valor_inicial' => null,
        'numero_parcelas' => 'int32',
        'valor_parcela' => null,
        'valor_global' => null,
        'data_assinatura' => 'date',
        'data_vigencia_inicio' => 'date',
        'data_vigencia_fim' => 'date',
        'valor_acumulado' => null,
        'ni_fornecedor_sub_contratado' => null,
        'tipo_pessoa_fornecedor_sub_contratado' => null,
        'nome_razao_social_fornecedor_sub_contratado' => null,
        'informacao_complementar' => null,
        'url_cipi' => null,
        'identificador_cipi' => null,
        'cnpj_orgao_sub_rogado' => null,
        'codigo_unidade_sub_rogada' => null,
        'justificativa' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cnpj_compra' => false,
		'ano_compra' => false,
		'sequencial_compra' => false,
		'tipo_contrato_id' => false,
		'numero_contrato_empenho' => false,
		'processo' => false,
		'categoria_processo_id' => false,
		'ni_fornecedor' => false,
		'tipo_pessoa_fornecedor' => false,
		'nome_razao_social_fornecedor' => false,
		'receita' => false,
		'codigo_unidade' => false,
		'objeto_contrato' => false,
		'valor_inicial' => false,
		'numero_parcelas' => false,
		'valor_parcela' => false,
		'valor_global' => false,
		'data_assinatura' => false,
		'data_vigencia_inicio' => false,
		'data_vigencia_fim' => false,
		'valor_acumulado' => false,
		'ni_fornecedor_sub_contratado' => false,
		'tipo_pessoa_fornecedor_sub_contratado' => false,
		'nome_razao_social_fornecedor_sub_contratado' => false,
		'informacao_complementar' => false,
		'url_cipi' => false,
		'identificador_cipi' => false,
		'cnpj_orgao_sub_rogado' => false,
		'codigo_unidade_sub_rogada' => false,
		'justificativa' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cnpj_compra' => 'cnpjCompra',
        'ano_compra' => 'anoCompra',
        'sequencial_compra' => 'sequencialCompra',
        'tipo_contrato_id' => 'tipoContratoId',
        'numero_contrato_empenho' => 'numeroContratoEmpenho',
        'processo' => 'processo',
        'categoria_processo_id' => 'categoriaProcessoId',
        'ni_fornecedor' => 'niFornecedor',
        'tipo_pessoa_fornecedor' => 'tipoPessoaFornecedor',
        'nome_razao_social_fornecedor' => 'nomeRazaoSocialFornecedor',
        'receita' => 'receita',
        'codigo_unidade' => 'codigoUnidade',
        'objeto_contrato' => 'objetoContrato',
        'valor_inicial' => 'valorInicial',
        'numero_parcelas' => 'numeroParcelas',
        'valor_parcela' => 'valorParcela',
        'valor_global' => 'valorGlobal',
        'data_assinatura' => 'dataAssinatura',
        'data_vigencia_inicio' => 'dataVigenciaInicio',
        'data_vigencia_fim' => 'dataVigenciaFim',
        'valor_acumulado' => 'valorAcumulado',
        'ni_fornecedor_sub_contratado' => 'niFornecedorSubContratado',
        'tipo_pessoa_fornecedor_sub_contratado' => 'tipoPessoaFornecedorSubContratado',
        'nome_razao_social_fornecedor_sub_contratado' => 'nomeRazaoSocialFornecedorSubContratado',
        'informacao_complementar' => 'informacaoComplementar',
        'url_cipi' => 'urlCipi',
        'identificador_cipi' => 'identificadorCipi',
        'cnpj_orgao_sub_rogado' => 'cnpjOrgaoSubRogado',
        'codigo_unidade_sub_rogada' => 'codigoUnidadeSubRogada',
        'justificativa' => 'justificativa'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cnpj_compra' => 'setCnpjCompra',
        'ano_compra' => 'setAnoCompra',
        'sequencial_compra' => 'setSequencialCompra',
        'tipo_contrato_id' => 'setTipoContratoId',
        'numero_contrato_empenho' => 'setNumeroContratoEmpenho',
        'processo' => 'setProcesso',
        'categoria_processo_id' => 'setCategoriaProcessoId',
        'ni_fornecedor' => 'setNiFornecedor',
        'tipo_pessoa_fornecedor' => 'setTipoPessoaFornecedor',
        'nome_razao_social_fornecedor' => 'setNomeRazaoSocialFornecedor',
        'receita' => 'setReceita',
        'codigo_unidade' => 'setCodigoUnidade',
        'objeto_contrato' => 'setObjetoContrato',
        'valor_inicial' => 'setValorInicial',
        'numero_parcelas' => 'setNumeroParcelas',
        'valor_parcela' => 'setValorParcela',
        'valor_global' => 'setValorGlobal',
        'data_assinatura' => 'setDataAssinatura',
        'data_vigencia_inicio' => 'setDataVigenciaInicio',
        'data_vigencia_fim' => 'setDataVigenciaFim',
        'valor_acumulado' => 'setValorAcumulado',
        'ni_fornecedor_sub_contratado' => 'setNiFornecedorSubContratado',
        'tipo_pessoa_fornecedor_sub_contratado' => 'setTipoPessoaFornecedorSubContratado',
        'nome_razao_social_fornecedor_sub_contratado' => 'setNomeRazaoSocialFornecedorSubContratado',
        'informacao_complementar' => 'setInformacaoComplementar',
        'url_cipi' => 'setUrlCipi',
        'identificador_cipi' => 'setIdentificadorCipi',
        'cnpj_orgao_sub_rogado' => 'setCnpjOrgaoSubRogado',
        'codigo_unidade_sub_rogada' => 'setCodigoUnidadeSubRogada',
        'justificativa' => 'setJustificativa'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cnpj_compra' => 'getCnpjCompra',
        'ano_compra' => 'getAnoCompra',
        'sequencial_compra' => 'getSequencialCompra',
        'tipo_contrato_id' => 'getTipoContratoId',
        'numero_contrato_empenho' => 'getNumeroContratoEmpenho',
        'processo' => 'getProcesso',
        'categoria_processo_id' => 'getCategoriaProcessoId',
        'ni_fornecedor' => 'getNiFornecedor',
        'tipo_pessoa_fornecedor' => 'getTipoPessoaFornecedor',
        'nome_razao_social_fornecedor' => 'getNomeRazaoSocialFornecedor',
        'receita' => 'getReceita',
        'codigo_unidade' => 'getCodigoUnidade',
        'objeto_contrato' => 'getObjetoContrato',
        'valor_inicial' => 'getValorInicial',
        'numero_parcelas' => 'getNumeroParcelas',
        'valor_parcela' => 'getValorParcela',
        'valor_global' => 'getValorGlobal',
        'data_assinatura' => 'getDataAssinatura',
        'data_vigencia_inicio' => 'getDataVigenciaInicio',
        'data_vigencia_fim' => 'getDataVigenciaFim',
        'valor_acumulado' => 'getValorAcumulado',
        'ni_fornecedor_sub_contratado' => 'getNiFornecedorSubContratado',
        'tipo_pessoa_fornecedor_sub_contratado' => 'getTipoPessoaFornecedorSubContratado',
        'nome_razao_social_fornecedor_sub_contratado' => 'getNomeRazaoSocialFornecedorSubContratado',
        'informacao_complementar' => 'getInformacaoComplementar',
        'url_cipi' => 'getUrlCipi',
        'identificador_cipi' => 'getIdentificadorCipi',
        'cnpj_orgao_sub_rogado' => 'getCnpjOrgaoSubRogado',
        'codigo_unidade_sub_rogada' => 'getCodigoUnidadeSubRogada',
        'justificativa' => 'getJustificativa'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cnpj_compra', $data ?? [], null);
        $this->setIfExists('ano_compra', $data ?? [], null);
        $this->setIfExists('sequencial_compra', $data ?? [], null);
        $this->setIfExists('tipo_contrato_id', $data ?? [], null);
        $this->setIfExists('numero_contrato_empenho', $data ?? [], null);
        $this->setIfExists('processo', $data ?? [], null);
        $this->setIfExists('categoria_processo_id', $data ?? [], null);
        $this->setIfExists('ni_fornecedor', $data ?? [], null);
        $this->setIfExists('tipo_pessoa_fornecedor', $data ?? [], null);
        $this->setIfExists('nome_razao_social_fornecedor', $data ?? [], null);
        $this->setIfExists('receita', $data ?? [], null);
        $this->setIfExists('codigo_unidade', $data ?? [], null);
        $this->setIfExists('objeto_contrato', $data ?? [], null);
        $this->setIfExists('valor_inicial', $data ?? [], null);
        $this->setIfExists('numero_parcelas', $data ?? [], null);
        $this->setIfExists('valor_parcela', $data ?? [], null);
        $this->setIfExists('valor_global', $data ?? [], null);
        $this->setIfExists('data_assinatura', $data ?? [], null);
        $this->setIfExists('data_vigencia_inicio', $data ?? [], null);
        $this->setIfExists('data_vigencia_fim', $data ?? [], null);
        $this->setIfExists('valor_acumulado', $data ?? [], null);
        $this->setIfExists('ni_fornecedor_sub_contratado', $data ?? [], null);
        $this->setIfExists('tipo_pessoa_fornecedor_sub_contratado', $data ?? [], null);
        $this->setIfExists('nome_razao_social_fornecedor_sub_contratado', $data ?? [], null);
        $this->setIfExists('informacao_complementar', $data ?? [], null);
        $this->setIfExists('url_cipi', $data ?? [], null);
        $this->setIfExists('identificador_cipi', $data ?? [], null);
        $this->setIfExists('cnpj_orgao_sub_rogado', $data ?? [], null);
        $this->setIfExists('codigo_unidade_sub_rogada', $data ?? [], null);
        $this->setIfExists('justificativa', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cnpj_compra'] === null) {
            $invalidProperties[] = "'cnpj_compra' can't be null";
        }
        if ($this->container['sequencial_compra'] === null) {
            $invalidProperties[] = "'sequencial_compra' can't be null";
        }
        if (($this->container['sequencial_compra'] < 1)) {
            $invalidProperties[] = "invalid value for 'sequencial_compra', must be bigger than or equal to 1.";
        }

        if ($this->container['tipo_contrato_id'] === null) {
            $invalidProperties[] = "'tipo_contrato_id' can't be null";
        }
        if (($this->container['tipo_contrato_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'tipo_contrato_id', must be bigger than or equal to 1.";
        }

        if ($this->container['numero_contrato_empenho'] === null) {
            $invalidProperties[] = "'numero_contrato_empenho' can't be null";
        }
        if ($this->container['processo'] === null) {
            $invalidProperties[] = "'processo' can't be null";
        }
        if ($this->container['categoria_processo_id'] === null) {
            $invalidProperties[] = "'categoria_processo_id' can't be null";
        }
        if (($this->container['categoria_processo_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'categoria_processo_id', must be bigger than or equal to 1.";
        }

        if ($this->container['ni_fornecedor'] === null) {
            $invalidProperties[] = "'ni_fornecedor' can't be null";
        }
        if ($this->container['tipo_pessoa_fornecedor'] === null) {
            $invalidProperties[] = "'tipo_pessoa_fornecedor' can't be null";
        }
        if ($this->container['nome_razao_social_fornecedor'] === null) {
            $invalidProperties[] = "'nome_razao_social_fornecedor' can't be null";
        }
        if ($this->container['receita'] === null) {
            $invalidProperties[] = "'receita' can't be null";
        }
        if ($this->container['codigo_unidade'] === null) {
            $invalidProperties[] = "'codigo_unidade' can't be null";
        }
        if ($this->container['objeto_contrato'] === null) {
            $invalidProperties[] = "'objeto_contrato' can't be null";
        }
        if ($this->container['valor_inicial'] === null) {
            $invalidProperties[] = "'valor_inicial' can't be null";
        }
        if (($this->container['valor_inicial'] < 0)) {
            $invalidProperties[] = "invalid value for 'valor_inicial', must be bigger than or equal to 0.";
        }

        if ($this->container['numero_parcelas'] === null) {
            $invalidProperties[] = "'numero_parcelas' can't be null";
        }
        if (($this->container['numero_parcelas'] < 1)) {
            $invalidProperties[] = "invalid value for 'numero_parcelas', must be bigger than or equal to 1.";
        }

        if ($this->container['valor_parcela'] === null) {
            $invalidProperties[] = "'valor_parcela' can't be null";
        }
        if (($this->container['valor_parcela'] < 0)) {
            $invalidProperties[] = "invalid value for 'valor_parcela', must be bigger than or equal to 0.";
        }

        if ($this->container['valor_global'] === null) {
            $invalidProperties[] = "'valor_global' can't be null";
        }
        if (($this->container['valor_global'] < 0)) {
            $invalidProperties[] = "invalid value for 'valor_global', must be bigger than or equal to 0.";
        }

        if ($this->container['data_assinatura'] === null) {
            $invalidProperties[] = "'data_assinatura' can't be null";
        }
        if ($this->container['data_vigencia_inicio'] === null) {
            $invalidProperties[] = "'data_vigencia_inicio' can't be null";
        }
        if ($this->container['data_vigencia_fim'] === null) {
            $invalidProperties[] = "'data_vigencia_fim' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cnpj_compra
     *
     * @return string
     */
    public function getCnpjCompra()
    {
        return $this->container['cnpj_compra'];
    }

    /**
     * Sets cnpj_compra
     *
     * @param string $cnpj_compra cnpj_compra
     *
     * @return self
     */
    public function setCnpjCompra($cnpj_compra)
    {
        if (is_null($cnpj_compra)) {
            throw new \InvalidArgumentException('non-nullable cnpj_compra cannot be null');
        }
        $this->container['cnpj_compra'] = $cnpj_compra;

        return $this;
    }

    /**
     * Gets ano_compra
     *
     * @return int|null
     */
    public function getAnoCompra()
    {
        return $this->container['ano_compra'];
    }

    /**
     * Sets ano_compra
     *
     * @param int|null $ano_compra ano_compra
     *
     * @return self
     */
    public function setAnoCompra($ano_compra)
    {
        if (is_null($ano_compra)) {
            throw new \InvalidArgumentException('non-nullable ano_compra cannot be null');
        }
        $this->container['ano_compra'] = $ano_compra;

        return $this;
    }

    /**
     * Gets sequencial_compra
     *
     * @return int
     */
    public function getSequencialCompra()
    {
        return $this->container['sequencial_compra'];
    }

    /**
     * Sets sequencial_compra
     *
     * @param int $sequencial_compra sequencial_compra
     *
     * @return self
     */
    public function setSequencialCompra($sequencial_compra)
    {
        if (is_null($sequencial_compra)) {
            throw new \InvalidArgumentException('non-nullable sequencial_compra cannot be null');
        }

        if (($sequencial_compra < 1)) {
            throw new \InvalidArgumentException('invalid value for $sequencial_compra when calling AlterarContratoDTO., must be bigger than or equal to 1.');
        }

        $this->container['sequencial_compra'] = $sequencial_compra;

        return $this;
    }

    /**
     * Gets tipo_contrato_id
     *
     * @return int
     */
    public function getTipoContratoId()
    {
        return $this->container['tipo_contrato_id'];
    }

    /**
     * Sets tipo_contrato_id
     *
     * @param int $tipo_contrato_id tipo_contrato_id
     *
     * @return self
     */
    public function setTipoContratoId($tipo_contrato_id)
    {
        if (is_null($tipo_contrato_id)) {
            throw new \InvalidArgumentException('non-nullable tipo_contrato_id cannot be null');
        }

        if (($tipo_contrato_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $tipo_contrato_id when calling AlterarContratoDTO., must be bigger than or equal to 1.');
        }

        $this->container['tipo_contrato_id'] = $tipo_contrato_id;

        return $this;
    }

    /**
     * Gets numero_contrato_empenho
     *
     * @return string
     */
    public function getNumeroContratoEmpenho()
    {
        return $this->container['numero_contrato_empenho'];
    }

    /**
     * Sets numero_contrato_empenho
     *
     * @param string $numero_contrato_empenho numero_contrato_empenho
     *
     * @return self
     */
    public function setNumeroContratoEmpenho($numero_contrato_empenho)
    {
        if (is_null($numero_contrato_empenho)) {
            throw new \InvalidArgumentException('non-nullable numero_contrato_empenho cannot be null');
        }
        $this->container['numero_contrato_empenho'] = $numero_contrato_empenho;

        return $this;
    }

    /**
     * Gets processo
     *
     * @return string
     */
    public function getProcesso()
    {
        return $this->container['processo'];
    }

    /**
     * Sets processo
     *
     * @param string $processo processo
     *
     * @return self
     */
    public function setProcesso($processo)
    {
        if (is_null($processo)) {
            throw new \InvalidArgumentException('non-nullable processo cannot be null');
        }
        $this->container['processo'] = $processo;

        return $this;
    }

    /**
     * Gets categoria_processo_id
     *
     * @return int
     */
    public function getCategoriaProcessoId()
    {
        return $this->container['categoria_processo_id'];
    }

    /**
     * Sets categoria_processo_id
     *
     * @param int $categoria_processo_id categoria_processo_id
     *
     * @return self
     */
    public function setCategoriaProcessoId($categoria_processo_id)
    {
        if (is_null($categoria_processo_id)) {
            throw new \InvalidArgumentException('non-nullable categoria_processo_id cannot be null');
        }

        if (($categoria_processo_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $categoria_processo_id when calling AlterarContratoDTO., must be bigger than or equal to 1.');
        }

        $this->container['categoria_processo_id'] = $categoria_processo_id;

        return $this;
    }

    /**
     * Gets ni_fornecedor
     *
     * @return string
     */
    public function getNiFornecedor()
    {
        return $this->container['ni_fornecedor'];
    }

    /**
     * Sets ni_fornecedor
     *
     * @param string $ni_fornecedor ni_fornecedor
     *
     * @return self
     */
    public function setNiFornecedor($ni_fornecedor)
    {
        if (is_null($ni_fornecedor)) {
            throw new \InvalidArgumentException('non-nullable ni_fornecedor cannot be null');
        }
        $this->container['ni_fornecedor'] = $ni_fornecedor;

        return $this;
    }

    /**
     * Gets tipo_pessoa_fornecedor
     *
     * @return string
     */
    public function getTipoPessoaFornecedor()
    {
        return $this->container['tipo_pessoa_fornecedor'];
    }

    /**
     * Sets tipo_pessoa_fornecedor
     *
     * @param string $tipo_pessoa_fornecedor tipo_pessoa_fornecedor
     *
     * @return self
     */
    public function setTipoPessoaFornecedor($tipo_pessoa_fornecedor)
    {
        if (is_null($tipo_pessoa_fornecedor)) {
            throw new \InvalidArgumentException('non-nullable tipo_pessoa_fornecedor cannot be null');
        }
        $this->container['tipo_pessoa_fornecedor'] = $tipo_pessoa_fornecedor;

        return $this;
    }

    /**
     * Gets nome_razao_social_fornecedor
     *
     * @return string
     */
    public function getNomeRazaoSocialFornecedor()
    {
        return $this->container['nome_razao_social_fornecedor'];
    }

    /**
     * Sets nome_razao_social_fornecedor
     *
     * @param string $nome_razao_social_fornecedor nome_razao_social_fornecedor
     *
     * @return self
     */
    public function setNomeRazaoSocialFornecedor($nome_razao_social_fornecedor)
    {
        if (is_null($nome_razao_social_fornecedor)) {
            throw new \InvalidArgumentException('non-nullable nome_razao_social_fornecedor cannot be null');
        }
        $this->container['nome_razao_social_fornecedor'] = $nome_razao_social_fornecedor;

        return $this;
    }

    /**
     * Gets receita
     *
     * @return bool
     */
    public function getReceita()
    {
        return $this->container['receita'];
    }

    /**
     * Sets receita
     *
     * @param bool $receita receita
     *
     * @return self
     */
    public function setReceita($receita)
    {
        if (is_null($receita)) {
            throw new \InvalidArgumentException('non-nullable receita cannot be null');
        }
        $this->container['receita'] = $receita;

        return $this;
    }

    /**
     * Gets codigo_unidade
     *
     * @return string
     */
    public function getCodigoUnidade()
    {
        return $this->container['codigo_unidade'];
    }

    /**
     * Sets codigo_unidade
     *
     * @param string $codigo_unidade codigo_unidade
     *
     * @return self
     */
    public function setCodigoUnidade($codigo_unidade)
    {
        if (is_null($codigo_unidade)) {
            throw new \InvalidArgumentException('non-nullable codigo_unidade cannot be null');
        }
        $this->container['codigo_unidade'] = $codigo_unidade;

        return $this;
    }

    /**
     * Gets objeto_contrato
     *
     * @return string
     */
    public function getObjetoContrato()
    {
        return $this->container['objeto_contrato'];
    }

    /**
     * Sets objeto_contrato
     *
     * @param string $objeto_contrato objeto_contrato
     *
     * @return self
     */
    public function setObjetoContrato($objeto_contrato)
    {
        if (is_null($objeto_contrato)) {
            throw new \InvalidArgumentException('non-nullable objeto_contrato cannot be null');
        }
        $this->container['objeto_contrato'] = $objeto_contrato;

        return $this;
    }

    /**
     * Gets valor_inicial
     *
     * @return float
     */
    public function getValorInicial()
    {
        return $this->container['valor_inicial'];
    }

    /**
     * Sets valor_inicial
     *
     * @param float $valor_inicial valor_inicial
     *
     * @return self
     */
    public function setValorInicial($valor_inicial)
    {
        if (is_null($valor_inicial)) {
            throw new \InvalidArgumentException('non-nullable valor_inicial cannot be null');
        }

        if (($valor_inicial < 0)) {
            throw new \InvalidArgumentException('invalid value for $valor_inicial when calling AlterarContratoDTO., must be bigger than or equal to 0.');
        }

        $this->container['valor_inicial'] = $valor_inicial;

        return $this;
    }

    /**
     * Gets numero_parcelas
     *
     * @return int
     */
    public function getNumeroParcelas()
    {
        return $this->container['numero_parcelas'];
    }

    /**
     * Sets numero_parcelas
     *
     * @param int $numero_parcelas numero_parcelas
     *
     * @return self
     */
    public function setNumeroParcelas($numero_parcelas)
    {
        if (is_null($numero_parcelas)) {
            throw new \InvalidArgumentException('non-nullable numero_parcelas cannot be null');
        }

        if (($numero_parcelas < 1)) {
            throw new \InvalidArgumentException('invalid value for $numero_parcelas when calling AlterarContratoDTO., must be bigger than or equal to 1.');
        }

        $this->container['numero_parcelas'] = $numero_parcelas;

        return $this;
    }

    /**
     * Gets valor_parcela
     *
     * @return float
     */
    public function getValorParcela()
    {
        return $this->container['valor_parcela'];
    }

    /**
     * Sets valor_parcela
     *
     * @param float $valor_parcela valor_parcela
     *
     * @return self
     */
    public function setValorParcela($valor_parcela)
    {
        if (is_null($valor_parcela)) {
            throw new \InvalidArgumentException('non-nullable valor_parcela cannot be null');
        }

        if (($valor_parcela < 0)) {
            throw new \InvalidArgumentException('invalid value for $valor_parcela when calling AlterarContratoDTO., must be bigger than or equal to 0.');
        }

        $this->container['valor_parcela'] = $valor_parcela;

        return $this;
    }

    /**
     * Gets valor_global
     *
     * @return float
     */
    public function getValorGlobal()
    {
        return $this->container['valor_global'];
    }

    /**
     * Sets valor_global
     *
     * @param float $valor_global valor_global
     *
     * @return self
     */
    public function setValorGlobal($valor_global)
    {
        if (is_null($valor_global)) {
            throw new \InvalidArgumentException('non-nullable valor_global cannot be null');
        }

        if (($valor_global < 0)) {
            throw new \InvalidArgumentException('invalid value for $valor_global when calling AlterarContratoDTO., must be bigger than or equal to 0.');
        }

        $this->container['valor_global'] = $valor_global;

        return $this;
    }

    /**
     * Gets data_assinatura
     *
     * @return \DateTime
     */
    public function getDataAssinatura()
    {
        return $this->container['data_assinatura'];
    }

    /**
     * Sets data_assinatura
     *
     * @param \DateTime $data_assinatura data_assinatura
     *
     * @return self
     */
    public function setDataAssinatura($data_assinatura)
    {
        if (is_null($data_assinatura)) {
            throw new \InvalidArgumentException('non-nullable data_assinatura cannot be null');
        }
        $this->container['data_assinatura'] = $data_assinatura;

        return $this;
    }

    /**
     * Gets data_vigencia_inicio
     *
     * @return \DateTime
     */
    public function getDataVigenciaInicio()
    {
        return $this->container['data_vigencia_inicio'];
    }

    /**
     * Sets data_vigencia_inicio
     *
     * @param \DateTime $data_vigencia_inicio data_vigencia_inicio
     *
     * @return self
     */
    public function setDataVigenciaInicio($data_vigencia_inicio)
    {
        if (is_null($data_vigencia_inicio)) {
            throw new \InvalidArgumentException('non-nullable data_vigencia_inicio cannot be null');
        }
        $this->container['data_vigencia_inicio'] = $data_vigencia_inicio;

        return $this;
    }

    /**
     * Gets data_vigencia_fim
     *
     * @return \DateTime
     */
    public function getDataVigenciaFim()
    {
        return $this->container['data_vigencia_fim'];
    }

    /**
     * Sets data_vigencia_fim
     *
     * @param \DateTime $data_vigencia_fim data_vigencia_fim
     *
     * @return self
     */
    public function setDataVigenciaFim($data_vigencia_fim)
    {
        if (is_null($data_vigencia_fim)) {
            throw new \InvalidArgumentException('non-nullable data_vigencia_fim cannot be null');
        }
        $this->container['data_vigencia_fim'] = $data_vigencia_fim;

        return $this;
    }

    /**
     * Gets valor_acumulado
     *
     * @return float|null
     */
    public function getValorAcumulado()
    {
        return $this->container['valor_acumulado'];
    }

    /**
     * Sets valor_acumulado
     *
     * @param float|null $valor_acumulado valor_acumulado
     *
     * @return self
     */
    public function setValorAcumulado($valor_acumulado)
    {
        if (is_null($valor_acumulado)) {
            throw new \InvalidArgumentException('non-nullable valor_acumulado cannot be null');
        }
        $this->container['valor_acumulado'] = $valor_acumulado;

        return $this;
    }

    /**
     * Gets ni_fornecedor_sub_contratado
     *
     * @return string|null
     */
    public function getNiFornecedorSubContratado()
    {
        return $this->container['ni_fornecedor_sub_contratado'];
    }

    /**
     * Sets ni_fornecedor_sub_contratado
     *
     * @param string|null $ni_fornecedor_sub_contratado ni_fornecedor_sub_contratado
     *
     * @return self
     */
    public function setNiFornecedorSubContratado($ni_fornecedor_sub_contratado)
    {
        if (is_null($ni_fornecedor_sub_contratado)) {
            throw new \InvalidArgumentException('non-nullable ni_fornecedor_sub_contratado cannot be null');
        }
        $this->container['ni_fornecedor_sub_contratado'] = $ni_fornecedor_sub_contratado;

        return $this;
    }

    /**
     * Gets tipo_pessoa_fornecedor_sub_contratado
     *
     * @return string|null
     */
    public function getTipoPessoaFornecedorSubContratado()
    {
        return $this->container['tipo_pessoa_fornecedor_sub_contratado'];
    }

    /**
     * Sets tipo_pessoa_fornecedor_sub_contratado
     *
     * @param string|null $tipo_pessoa_fornecedor_sub_contratado tipo_pessoa_fornecedor_sub_contratado
     *
     * @return self
     */
    public function setTipoPessoaFornecedorSubContratado($tipo_pessoa_fornecedor_sub_contratado)
    {
        if (is_null($tipo_pessoa_fornecedor_sub_contratado)) {
            throw new \InvalidArgumentException('non-nullable tipo_pessoa_fornecedor_sub_contratado cannot be null');
        }
        $this->container['tipo_pessoa_fornecedor_sub_contratado'] = $tipo_pessoa_fornecedor_sub_contratado;

        return $this;
    }

    /**
     * Gets nome_razao_social_fornecedor_sub_contratado
     *
     * @return string|null
     */
    public function getNomeRazaoSocialFornecedorSubContratado()
    {
        return $this->container['nome_razao_social_fornecedor_sub_contratado'];
    }

    /**
     * Sets nome_razao_social_fornecedor_sub_contratado
     *
     * @param string|null $nome_razao_social_fornecedor_sub_contratado nome_razao_social_fornecedor_sub_contratado
     *
     * @return self
     */
    public function setNomeRazaoSocialFornecedorSubContratado($nome_razao_social_fornecedor_sub_contratado)
    {
        if (is_null($nome_razao_social_fornecedor_sub_contratado)) {
            throw new \InvalidArgumentException('non-nullable nome_razao_social_fornecedor_sub_contratado cannot be null');
        }
        $this->container['nome_razao_social_fornecedor_sub_contratado'] = $nome_razao_social_fornecedor_sub_contratado;

        return $this;
    }

    /**
     * Gets informacao_complementar
     *
     * @return string|null
     */
    public function getInformacaoComplementar()
    {
        return $this->container['informacao_complementar'];
    }

    /**
     * Sets informacao_complementar
     *
     * @param string|null $informacao_complementar informacao_complementar
     *
     * @return self
     */
    public function setInformacaoComplementar($informacao_complementar)
    {
        if (is_null($informacao_complementar)) {
            throw new \InvalidArgumentException('non-nullable informacao_complementar cannot be null');
        }
        $this->container['informacao_complementar'] = $informacao_complementar;

        return $this;
    }

    /**
     * Gets url_cipi
     *
     * @return string|null
     */
    public function getUrlCipi()
    {
        return $this->container['url_cipi'];
    }

    /**
     * Sets url_cipi
     *
     * @param string|null $url_cipi url_cipi
     *
     * @return self
     */
    public function setUrlCipi($url_cipi)
    {
        if (is_null($url_cipi)) {
            throw new \InvalidArgumentException('non-nullable url_cipi cannot be null');
        }
        $this->container['url_cipi'] = $url_cipi;

        return $this;
    }

    /**
     * Gets identificador_cipi
     *
     * @return string|null
     */
    public function getIdentificadorCipi()
    {
        return $this->container['identificador_cipi'];
    }

    /**
     * Sets identificador_cipi
     *
     * @param string|null $identificador_cipi identificador_cipi
     *
     * @return self
     */
    public function setIdentificadorCipi($identificador_cipi)
    {
        if (is_null($identificador_cipi)) {
            throw new \InvalidArgumentException('non-nullable identificador_cipi cannot be null');
        }
        $this->container['identificador_cipi'] = $identificador_cipi;

        return $this;
    }

    /**
     * Gets cnpj_orgao_sub_rogado
     *
     * @return string|null
     */
    public function getCnpjOrgaoSubRogado()
    {
        return $this->container['cnpj_orgao_sub_rogado'];
    }

    /**
     * Sets cnpj_orgao_sub_rogado
     *
     * @param string|null $cnpj_orgao_sub_rogado cnpj_orgao_sub_rogado
     *
     * @return self
     */
    public function setCnpjOrgaoSubRogado($cnpj_orgao_sub_rogado)
    {
        if (is_null($cnpj_orgao_sub_rogado)) {
            throw new \InvalidArgumentException('non-nullable cnpj_orgao_sub_rogado cannot be null');
        }
        $this->container['cnpj_orgao_sub_rogado'] = $cnpj_orgao_sub_rogado;

        return $this;
    }

    /**
     * Gets codigo_unidade_sub_rogada
     *
     * @return string|null
     */
    public function getCodigoUnidadeSubRogada()
    {
        return $this->container['codigo_unidade_sub_rogada'];
    }

    /**
     * Sets codigo_unidade_sub_rogada
     *
     * @param string|null $codigo_unidade_sub_rogada codigo_unidade_sub_rogada
     *
     * @return self
     */
    public function setCodigoUnidadeSubRogada($codigo_unidade_sub_rogada)
    {
        if (is_null($codigo_unidade_sub_rogada)) {
            throw new \InvalidArgumentException('non-nullable codigo_unidade_sub_rogada cannot be null');
        }
        $this->container['codigo_unidade_sub_rogada'] = $codigo_unidade_sub_rogada;

        return $this;
    }

    /**
     * Gets justificativa
     *
     * @return string|null
     */
    public function getJustificativa()
    {
        return $this->container['justificativa'];
    }

    /**
     * Sets justificativa
     *
     * @param string|null $justificativa justificativa
     *
     * @return self
     */
    public function setJustificativa($justificativa)
    {
        if (is_null($justificativa)) {
            throw new \InvalidArgumentException('non-nullable justificativa cannot be null');
        }
        $this->container['justificativa'] = $justificativa;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


