<?php
/**
 * RecuperarCompraDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API PNCP
 *
 * API REST de serviços do Portal Nacional de Contratações Públicas (PNCP)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: css.serpro@serpro.gov.br
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RecuperarCompraDTO Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RecuperarCompraDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RecuperarCompraDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'valor_total_estimado' => 'float',
        'valor_total_homologado' => 'float',
        'indicador_orcamento_sigiloso' => 'string',
        'numero_compra' => 'string',
        'orgao_sub_rogado' => '\OpenAPI\Client\Model\RecuperarOrgaoEntidadeDTO',
        'unidade_orgao' => '\OpenAPI\Client\Model\RecuperarUnidadeOrgaoDTO',
        'unidade_sub_rogada' => '\OpenAPI\Client\Model\RecuperarUnidadeOrgaoDTO',
        'data_atualizacao' => '\DateTime',
        'data_inclusao' => '\DateTime',
        'data_publicacao_pncp' => '\DateTime',
        'modalidade_id' => 'int',
        'srp' => 'bool',
        'ano_compra' => 'int',
        'sequencial_compra' => 'int',
        'orgao_entidade' => '\OpenAPI\Client\Model\RecuperarOrgaoEntidadeDTO',
        'amparo_legal' => '\OpenAPI\Client\Model\RecuperarAmparoLegalDTO',
        'data_abertura_proposta' => '\DateTime',
        'data_encerramento_proposta' => '\DateTime',
        'informacao_complementar' => 'string',
        'processo' => 'string',
        'objeto_compra' => 'string',
        'link_sistema_origem' => 'string',
        'justificativa_presencial' => 'string',
        'existe_resultado' => 'bool',
        'numero_controle_pncp' => 'string',
        'orcamento_sigiloso_codigo' => 'int',
        'orcamento_sigiloso_descricao' => 'string',
        'situacao_compra_id' => 'string',
        'situacao_compra_nome' => 'string',
        'tipo_instrumento_convocatorio_codigo' => 'int',
        'tipo_instrumento_convocatorio_nome' => 'string',
        'modo_disputa_id' => 'int',
        'modo_disputa_nome' => 'string',
        'usuario_nome' => 'string',
        'modalidade_nome' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'valor_total_estimado' => null,
        'valor_total_homologado' => null,
        'indicador_orcamento_sigiloso' => null,
        'numero_compra' => null,
        'orgao_sub_rogado' => null,
        'unidade_orgao' => null,
        'unidade_sub_rogada' => null,
        'data_atualizacao' => 'date-time',
        'data_inclusao' => 'date-time',
        'data_publicacao_pncp' => 'date-time',
        'modalidade_id' => 'int64',
        'srp' => null,
        'ano_compra' => 'int32',
        'sequencial_compra' => 'int32',
        'orgao_entidade' => null,
        'amparo_legal' => null,
        'data_abertura_proposta' => 'date-time',
        'data_encerramento_proposta' => 'date-time',
        'informacao_complementar' => null,
        'processo' => null,
        'objeto_compra' => null,
        'link_sistema_origem' => null,
        'justificativa_presencial' => null,
        'existe_resultado' => null,
        'numero_controle_pncp' => null,
        'orcamento_sigiloso_codigo' => 'int32',
        'orcamento_sigiloso_descricao' => null,
        'situacao_compra_id' => null,
        'situacao_compra_nome' => null,
        'tipo_instrumento_convocatorio_codigo' => 'int64',
        'tipo_instrumento_convocatorio_nome' => null,
        'modo_disputa_id' => 'int64',
        'modo_disputa_nome' => null,
        'usuario_nome' => null,
        'modalidade_nome' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'valor_total_estimado' => false,
		'valor_total_homologado' => false,
		'indicador_orcamento_sigiloso' => false,
		'numero_compra' => false,
		'orgao_sub_rogado' => false,
		'unidade_orgao' => false,
		'unidade_sub_rogada' => false,
		'data_atualizacao' => false,
		'data_inclusao' => false,
		'data_publicacao_pncp' => false,
		'modalidade_id' => false,
		'srp' => false,
		'ano_compra' => false,
		'sequencial_compra' => false,
		'orgao_entidade' => false,
		'amparo_legal' => false,
		'data_abertura_proposta' => false,
		'data_encerramento_proposta' => false,
		'informacao_complementar' => false,
		'processo' => false,
		'objeto_compra' => false,
		'link_sistema_origem' => false,
		'justificativa_presencial' => false,
		'existe_resultado' => false,
		'numero_controle_pncp' => false,
		'orcamento_sigiloso_codigo' => false,
		'orcamento_sigiloso_descricao' => false,
		'situacao_compra_id' => false,
		'situacao_compra_nome' => false,
		'tipo_instrumento_convocatorio_codigo' => false,
		'tipo_instrumento_convocatorio_nome' => false,
		'modo_disputa_id' => false,
		'modo_disputa_nome' => false,
		'usuario_nome' => false,
		'modalidade_nome' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'valor_total_estimado' => 'valorTotalEstimado',
        'valor_total_homologado' => 'valorTotalHomologado',
        'indicador_orcamento_sigiloso' => 'indicadorOrcamentoSigiloso',
        'numero_compra' => 'numeroCompra',
        'orgao_sub_rogado' => 'orgaoSubRogado',
        'unidade_orgao' => 'unidadeOrgao',
        'unidade_sub_rogada' => 'unidadeSubRogada',
        'data_atualizacao' => 'dataAtualizacao',
        'data_inclusao' => 'dataInclusao',
        'data_publicacao_pncp' => 'dataPublicacaoPncp',
        'modalidade_id' => 'modalidadeId',
        'srp' => 'srp',
        'ano_compra' => 'anoCompra',
        'sequencial_compra' => 'sequencialCompra',
        'orgao_entidade' => 'orgaoEntidade',
        'amparo_legal' => 'amparoLegal',
        'data_abertura_proposta' => 'dataAberturaProposta',
        'data_encerramento_proposta' => 'dataEncerramentoProposta',
        'informacao_complementar' => 'informacaoComplementar',
        'processo' => 'processo',
        'objeto_compra' => 'objetoCompra',
        'link_sistema_origem' => 'linkSistemaOrigem',
        'justificativa_presencial' => 'justificativaPresencial',
        'existe_resultado' => 'existeResultado',
        'numero_controle_pncp' => 'numeroControlePNCP',
        'orcamento_sigiloso_codigo' => 'orcamentoSigilosoCodigo',
        'orcamento_sigiloso_descricao' => 'orcamentoSigilosoDescricao',
        'situacao_compra_id' => 'situacaoCompraId',
        'situacao_compra_nome' => 'situacaoCompraNome',
        'tipo_instrumento_convocatorio_codigo' => 'tipoInstrumentoConvocatorioCodigo',
        'tipo_instrumento_convocatorio_nome' => 'tipoInstrumentoConvocatorioNome',
        'modo_disputa_id' => 'modoDisputaId',
        'modo_disputa_nome' => 'modoDisputaNome',
        'usuario_nome' => 'usuarioNome',
        'modalidade_nome' => 'modalidadeNome'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'valor_total_estimado' => 'setValorTotalEstimado',
        'valor_total_homologado' => 'setValorTotalHomologado',
        'indicador_orcamento_sigiloso' => 'setIndicadorOrcamentoSigiloso',
        'numero_compra' => 'setNumeroCompra',
        'orgao_sub_rogado' => 'setOrgaoSubRogado',
        'unidade_orgao' => 'setUnidadeOrgao',
        'unidade_sub_rogada' => 'setUnidadeSubRogada',
        'data_atualizacao' => 'setDataAtualizacao',
        'data_inclusao' => 'setDataInclusao',
        'data_publicacao_pncp' => 'setDataPublicacaoPncp',
        'modalidade_id' => 'setModalidadeId',
        'srp' => 'setSrp',
        'ano_compra' => 'setAnoCompra',
        'sequencial_compra' => 'setSequencialCompra',
        'orgao_entidade' => 'setOrgaoEntidade',
        'amparo_legal' => 'setAmparoLegal',
        'data_abertura_proposta' => 'setDataAberturaProposta',
        'data_encerramento_proposta' => 'setDataEncerramentoProposta',
        'informacao_complementar' => 'setInformacaoComplementar',
        'processo' => 'setProcesso',
        'objeto_compra' => 'setObjetoCompra',
        'link_sistema_origem' => 'setLinkSistemaOrigem',
        'justificativa_presencial' => 'setJustificativaPresencial',
        'existe_resultado' => 'setExisteResultado',
        'numero_controle_pncp' => 'setNumeroControlePncp',
        'orcamento_sigiloso_codigo' => 'setOrcamentoSigilosoCodigo',
        'orcamento_sigiloso_descricao' => 'setOrcamentoSigilosoDescricao',
        'situacao_compra_id' => 'setSituacaoCompraId',
        'situacao_compra_nome' => 'setSituacaoCompraNome',
        'tipo_instrumento_convocatorio_codigo' => 'setTipoInstrumentoConvocatorioCodigo',
        'tipo_instrumento_convocatorio_nome' => 'setTipoInstrumentoConvocatorioNome',
        'modo_disputa_id' => 'setModoDisputaId',
        'modo_disputa_nome' => 'setModoDisputaNome',
        'usuario_nome' => 'setUsuarioNome',
        'modalidade_nome' => 'setModalidadeNome'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'valor_total_estimado' => 'getValorTotalEstimado',
        'valor_total_homologado' => 'getValorTotalHomologado',
        'indicador_orcamento_sigiloso' => 'getIndicadorOrcamentoSigiloso',
        'numero_compra' => 'getNumeroCompra',
        'orgao_sub_rogado' => 'getOrgaoSubRogado',
        'unidade_orgao' => 'getUnidadeOrgao',
        'unidade_sub_rogada' => 'getUnidadeSubRogada',
        'data_atualizacao' => 'getDataAtualizacao',
        'data_inclusao' => 'getDataInclusao',
        'data_publicacao_pncp' => 'getDataPublicacaoPncp',
        'modalidade_id' => 'getModalidadeId',
        'srp' => 'getSrp',
        'ano_compra' => 'getAnoCompra',
        'sequencial_compra' => 'getSequencialCompra',
        'orgao_entidade' => 'getOrgaoEntidade',
        'amparo_legal' => 'getAmparoLegal',
        'data_abertura_proposta' => 'getDataAberturaProposta',
        'data_encerramento_proposta' => 'getDataEncerramentoProposta',
        'informacao_complementar' => 'getInformacaoComplementar',
        'processo' => 'getProcesso',
        'objeto_compra' => 'getObjetoCompra',
        'link_sistema_origem' => 'getLinkSistemaOrigem',
        'justificativa_presencial' => 'getJustificativaPresencial',
        'existe_resultado' => 'getExisteResultado',
        'numero_controle_pncp' => 'getNumeroControlePncp',
        'orcamento_sigiloso_codigo' => 'getOrcamentoSigilosoCodigo',
        'orcamento_sigiloso_descricao' => 'getOrcamentoSigilosoDescricao',
        'situacao_compra_id' => 'getSituacaoCompraId',
        'situacao_compra_nome' => 'getSituacaoCompraNome',
        'tipo_instrumento_convocatorio_codigo' => 'getTipoInstrumentoConvocatorioCodigo',
        'tipo_instrumento_convocatorio_nome' => 'getTipoInstrumentoConvocatorioNome',
        'modo_disputa_id' => 'getModoDisputaId',
        'modo_disputa_nome' => 'getModoDisputaNome',
        'usuario_nome' => 'getUsuarioNome',
        'modalidade_nome' => 'getModalidadeNome'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const INDICADOR_ORCAMENTO_SIGILOSO_SEM_SIGILO = 'COMPRA_SEM_SIGILO';
    public const INDICADOR_ORCAMENTO_SIGILOSO_PARCIALMENTE_SIGILOSA = 'COMPRA_PARCIALMENTE_SIGILOSA';
    public const INDICADOR_ORCAMENTO_SIGILOSO_TOTALMENTE_SIGILOSA = 'COMPRA_TOTALMENTE_SIGILOSA';
    public const SITUACAO_COMPRA_ID__1 = '1';
    public const SITUACAO_COMPRA_ID__2 = '2';
    public const SITUACAO_COMPRA_ID__3 = '3';
    public const SITUACAO_COMPRA_ID__4 = '4';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIndicadorOrcamentoSigilosoAllowableValues()
    {
        return [
            self::INDICADOR_ORCAMENTO_SIGILOSO_SEM_SIGILO,
            self::INDICADOR_ORCAMENTO_SIGILOSO_PARCIALMENTE_SIGILOSA,
            self::INDICADOR_ORCAMENTO_SIGILOSO_TOTALMENTE_SIGILOSA,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSituacaoCompraIdAllowableValues()
    {
        return [
            self::SITUACAO_COMPRA_ID__1,
            self::SITUACAO_COMPRA_ID__2,
            self::SITUACAO_COMPRA_ID__3,
            self::SITUACAO_COMPRA_ID__4,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('valor_total_estimado', $data ?? [], null);
        $this->setIfExists('valor_total_homologado', $data ?? [], null);
        $this->setIfExists('indicador_orcamento_sigiloso', $data ?? [], null);
        $this->setIfExists('numero_compra', $data ?? [], null);
        $this->setIfExists('orgao_sub_rogado', $data ?? [], null);
        $this->setIfExists('unidade_orgao', $data ?? [], null);
        $this->setIfExists('unidade_sub_rogada', $data ?? [], null);
        $this->setIfExists('data_atualizacao', $data ?? [], null);
        $this->setIfExists('data_inclusao', $data ?? [], null);
        $this->setIfExists('data_publicacao_pncp', $data ?? [], null);
        $this->setIfExists('modalidade_id', $data ?? [], null);
        $this->setIfExists('srp', $data ?? [], null);
        $this->setIfExists('ano_compra', $data ?? [], null);
        $this->setIfExists('sequencial_compra', $data ?? [], null);
        $this->setIfExists('orgao_entidade', $data ?? [], null);
        $this->setIfExists('amparo_legal', $data ?? [], null);
        $this->setIfExists('data_abertura_proposta', $data ?? [], null);
        $this->setIfExists('data_encerramento_proposta', $data ?? [], null);
        $this->setIfExists('informacao_complementar', $data ?? [], null);
        $this->setIfExists('processo', $data ?? [], null);
        $this->setIfExists('objeto_compra', $data ?? [], null);
        $this->setIfExists('link_sistema_origem', $data ?? [], null);
        $this->setIfExists('justificativa_presencial', $data ?? [], null);
        $this->setIfExists('existe_resultado', $data ?? [], null);
        $this->setIfExists('numero_controle_pncp', $data ?? [], null);
        $this->setIfExists('orcamento_sigiloso_codigo', $data ?? [], null);
        $this->setIfExists('orcamento_sigiloso_descricao', $data ?? [], null);
        $this->setIfExists('situacao_compra_id', $data ?? [], null);
        $this->setIfExists('situacao_compra_nome', $data ?? [], null);
        $this->setIfExists('tipo_instrumento_convocatorio_codigo', $data ?? [], null);
        $this->setIfExists('tipo_instrumento_convocatorio_nome', $data ?? [], null);
        $this->setIfExists('modo_disputa_id', $data ?? [], null);
        $this->setIfExists('modo_disputa_nome', $data ?? [], null);
        $this->setIfExists('usuario_nome', $data ?? [], null);
        $this->setIfExists('modalidade_nome', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getIndicadorOrcamentoSigilosoAllowableValues();
        if (!is_null($this->container['indicador_orcamento_sigiloso']) && !in_array($this->container['indicador_orcamento_sigiloso'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'indicador_orcamento_sigiloso', must be one of '%s'",
                $this->container['indicador_orcamento_sigiloso'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSituacaoCompraIdAllowableValues();
        if (!is_null($this->container['situacao_compra_id']) && !in_array($this->container['situacao_compra_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'situacao_compra_id', must be one of '%s'",
                $this->container['situacao_compra_id'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets valor_total_estimado
     *
     * @return float|null
     */
    public function getValorTotalEstimado()
    {
        return $this->container['valor_total_estimado'];
    }

    /**
     * Sets valor_total_estimado
     *
     * @param float|null $valor_total_estimado valor_total_estimado
     *
     * @return self
     */
    public function setValorTotalEstimado($valor_total_estimado)
    {
        if (is_null($valor_total_estimado)) {
            throw new \InvalidArgumentException('non-nullable valor_total_estimado cannot be null');
        }
        $this->container['valor_total_estimado'] = $valor_total_estimado;

        return $this;
    }

    /**
     * Gets valor_total_homologado
     *
     * @return float|null
     */
    public function getValorTotalHomologado()
    {
        return $this->container['valor_total_homologado'];
    }

    /**
     * Sets valor_total_homologado
     *
     * @param float|null $valor_total_homologado valor_total_homologado
     *
     * @return self
     */
    public function setValorTotalHomologado($valor_total_homologado)
    {
        if (is_null($valor_total_homologado)) {
            throw new \InvalidArgumentException('non-nullable valor_total_homologado cannot be null');
        }
        $this->container['valor_total_homologado'] = $valor_total_homologado;

        return $this;
    }

    /**
     * Gets indicador_orcamento_sigiloso
     *
     * @return string|null
     */
    public function getIndicadorOrcamentoSigiloso()
    {
        return $this->container['indicador_orcamento_sigiloso'];
    }

    /**
     * Sets indicador_orcamento_sigiloso
     *
     * @param string|null $indicador_orcamento_sigiloso indicador_orcamento_sigiloso
     *
     * @return self
     */
    public function setIndicadorOrcamentoSigiloso($indicador_orcamento_sigiloso)
    {
        if (is_null($indicador_orcamento_sigiloso)) {
            throw new \InvalidArgumentException('non-nullable indicador_orcamento_sigiloso cannot be null');
        }
        $allowedValues = $this->getIndicadorOrcamentoSigilosoAllowableValues();
        if (!in_array($indicador_orcamento_sigiloso, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'indicador_orcamento_sigiloso', must be one of '%s'",
                    $indicador_orcamento_sigiloso,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['indicador_orcamento_sigiloso'] = $indicador_orcamento_sigiloso;

        return $this;
    }

    /**
     * Gets numero_compra
     *
     * @return string|null
     */
    public function getNumeroCompra()
    {
        return $this->container['numero_compra'];
    }

    /**
     * Sets numero_compra
     *
     * @param string|null $numero_compra numero_compra
     *
     * @return self
     */
    public function setNumeroCompra($numero_compra)
    {
        if (is_null($numero_compra)) {
            throw new \InvalidArgumentException('non-nullable numero_compra cannot be null');
        }
        $this->container['numero_compra'] = $numero_compra;

        return $this;
    }

    /**
     * Gets orgao_sub_rogado
     *
     * @return \OpenAPI\Client\Model\RecuperarOrgaoEntidadeDTO|null
     */
    public function getOrgaoSubRogado()
    {
        return $this->container['orgao_sub_rogado'];
    }

    /**
     * Sets orgao_sub_rogado
     *
     * @param \OpenAPI\Client\Model\RecuperarOrgaoEntidadeDTO|null $orgao_sub_rogado orgao_sub_rogado
     *
     * @return self
     */
    public function setOrgaoSubRogado($orgao_sub_rogado)
    {
        if (is_null($orgao_sub_rogado)) {
            throw new \InvalidArgumentException('non-nullable orgao_sub_rogado cannot be null');
        }
        $this->container['orgao_sub_rogado'] = $orgao_sub_rogado;

        return $this;
    }

    /**
     * Gets unidade_orgao
     *
     * @return \OpenAPI\Client\Model\RecuperarUnidadeOrgaoDTO|null
     */
    public function getUnidadeOrgao()
    {
        return $this->container['unidade_orgao'];
    }

    /**
     * Sets unidade_orgao
     *
     * @param \OpenAPI\Client\Model\RecuperarUnidadeOrgaoDTO|null $unidade_orgao unidade_orgao
     *
     * @return self
     */
    public function setUnidadeOrgao($unidade_orgao)
    {
        if (is_null($unidade_orgao)) {
            throw new \InvalidArgumentException('non-nullable unidade_orgao cannot be null');
        }
        $this->container['unidade_orgao'] = $unidade_orgao;

        return $this;
    }

    /**
     * Gets unidade_sub_rogada
     *
     * @return \OpenAPI\Client\Model\RecuperarUnidadeOrgaoDTO|null
     */
    public function getUnidadeSubRogada()
    {
        return $this->container['unidade_sub_rogada'];
    }

    /**
     * Sets unidade_sub_rogada
     *
     * @param \OpenAPI\Client\Model\RecuperarUnidadeOrgaoDTO|null $unidade_sub_rogada unidade_sub_rogada
     *
     * @return self
     */
    public function setUnidadeSubRogada($unidade_sub_rogada)
    {
        if (is_null($unidade_sub_rogada)) {
            throw new \InvalidArgumentException('non-nullable unidade_sub_rogada cannot be null');
        }
        $this->container['unidade_sub_rogada'] = $unidade_sub_rogada;

        return $this;
    }

    /**
     * Gets data_atualizacao
     *
     * @return \DateTime|null
     */
    public function getDataAtualizacao()
    {
        return $this->container['data_atualizacao'];
    }

    /**
     * Sets data_atualizacao
     *
     * @param \DateTime|null $data_atualizacao data_atualizacao
     *
     * @return self
     */
    public function setDataAtualizacao($data_atualizacao)
    {
        if (is_null($data_atualizacao)) {
            throw new \InvalidArgumentException('non-nullable data_atualizacao cannot be null');
        }
        $this->container['data_atualizacao'] = $data_atualizacao;

        return $this;
    }

    /**
     * Gets data_inclusao
     *
     * @return \DateTime|null
     */
    public function getDataInclusao()
    {
        return $this->container['data_inclusao'];
    }

    /**
     * Sets data_inclusao
     *
     * @param \DateTime|null $data_inclusao data_inclusao
     *
     * @return self
     */
    public function setDataInclusao($data_inclusao)
    {
        if (is_null($data_inclusao)) {
            throw new \InvalidArgumentException('non-nullable data_inclusao cannot be null');
        }
        $this->container['data_inclusao'] = $data_inclusao;

        return $this;
    }

    /**
     * Gets data_publicacao_pncp
     *
     * @return \DateTime|null
     */
    public function getDataPublicacaoPncp()
    {
        return $this->container['data_publicacao_pncp'];
    }

    /**
     * Sets data_publicacao_pncp
     *
     * @param \DateTime|null $data_publicacao_pncp data_publicacao_pncp
     *
     * @return self
     */
    public function setDataPublicacaoPncp($data_publicacao_pncp)
    {
        if (is_null($data_publicacao_pncp)) {
            throw new \InvalidArgumentException('non-nullable data_publicacao_pncp cannot be null');
        }
        $this->container['data_publicacao_pncp'] = $data_publicacao_pncp;

        return $this;
    }

    /**
     * Gets modalidade_id
     *
     * @return int|null
     */
    public function getModalidadeId()
    {
        return $this->container['modalidade_id'];
    }

    /**
     * Sets modalidade_id
     *
     * @param int|null $modalidade_id modalidade_id
     *
     * @return self
     */
    public function setModalidadeId($modalidade_id)
    {
        if (is_null($modalidade_id)) {
            throw new \InvalidArgumentException('non-nullable modalidade_id cannot be null');
        }
        $this->container['modalidade_id'] = $modalidade_id;

        return $this;
    }

    /**
     * Gets srp
     *
     * @return bool|null
     */
    public function getSrp()
    {
        return $this->container['srp'];
    }

    /**
     * Sets srp
     *
     * @param bool|null $srp srp
     *
     * @return self
     */
    public function setSrp($srp)
    {
        if (is_null($srp)) {
            throw new \InvalidArgumentException('non-nullable srp cannot be null');
        }
        $this->container['srp'] = $srp;

        return $this;
    }

    /**
     * Gets ano_compra
     *
     * @return int|null
     */
    public function getAnoCompra()
    {
        return $this->container['ano_compra'];
    }

    /**
     * Sets ano_compra
     *
     * @param int|null $ano_compra ano_compra
     *
     * @return self
     */
    public function setAnoCompra($ano_compra)
    {
        if (is_null($ano_compra)) {
            throw new \InvalidArgumentException('non-nullable ano_compra cannot be null');
        }
        $this->container['ano_compra'] = $ano_compra;

        return $this;
    }

    /**
     * Gets sequencial_compra
     *
     * @return int|null
     */
    public function getSequencialCompra()
    {
        return $this->container['sequencial_compra'];
    }

    /**
     * Sets sequencial_compra
     *
     * @param int|null $sequencial_compra sequencial_compra
     *
     * @return self
     */
    public function setSequencialCompra($sequencial_compra)
    {
        if (is_null($sequencial_compra)) {
            throw new \InvalidArgumentException('non-nullable sequencial_compra cannot be null');
        }
        $this->container['sequencial_compra'] = $sequencial_compra;

        return $this;
    }

    /**
     * Gets orgao_entidade
     *
     * @return \OpenAPI\Client\Model\RecuperarOrgaoEntidadeDTO|null
     */
    public function getOrgaoEntidade()
    {
        return $this->container['orgao_entidade'];
    }

    /**
     * Sets orgao_entidade
     *
     * @param \OpenAPI\Client\Model\RecuperarOrgaoEntidadeDTO|null $orgao_entidade orgao_entidade
     *
     * @return self
     */
    public function setOrgaoEntidade($orgao_entidade)
    {
        if (is_null($orgao_entidade)) {
            throw new \InvalidArgumentException('non-nullable orgao_entidade cannot be null');
        }
        $this->container['orgao_entidade'] = $orgao_entidade;

        return $this;
    }

    /**
     * Gets amparo_legal
     *
     * @return \OpenAPI\Client\Model\RecuperarAmparoLegalDTO|null
     */
    public function getAmparoLegal()
    {
        return $this->container['amparo_legal'];
    }

    /**
     * Sets amparo_legal
     *
     * @param \OpenAPI\Client\Model\RecuperarAmparoLegalDTO|null $amparo_legal amparo_legal
     *
     * @return self
     */
    public function setAmparoLegal($amparo_legal)
    {
        if (is_null($amparo_legal)) {
            throw new \InvalidArgumentException('non-nullable amparo_legal cannot be null');
        }
        $this->container['amparo_legal'] = $amparo_legal;

        return $this;
    }

    /**
     * Gets data_abertura_proposta
     *
     * @return \DateTime|null
     */
    public function getDataAberturaProposta()
    {
        return $this->container['data_abertura_proposta'];
    }

    /**
     * Sets data_abertura_proposta
     *
     * @param \DateTime|null $data_abertura_proposta data_abertura_proposta
     *
     * @return self
     */
    public function setDataAberturaProposta($data_abertura_proposta)
    {
        if (is_null($data_abertura_proposta)) {
            throw new \InvalidArgumentException('non-nullable data_abertura_proposta cannot be null');
        }
        $this->container['data_abertura_proposta'] = $data_abertura_proposta;

        return $this;
    }

    /**
     * Gets data_encerramento_proposta
     *
     * @return \DateTime|null
     */
    public function getDataEncerramentoProposta()
    {
        return $this->container['data_encerramento_proposta'];
    }

    /**
     * Sets data_encerramento_proposta
     *
     * @param \DateTime|null $data_encerramento_proposta data_encerramento_proposta
     *
     * @return self
     */
    public function setDataEncerramentoProposta($data_encerramento_proposta)
    {
        if (is_null($data_encerramento_proposta)) {
            throw new \InvalidArgumentException('non-nullable data_encerramento_proposta cannot be null');
        }
        $this->container['data_encerramento_proposta'] = $data_encerramento_proposta;

        return $this;
    }

    /**
     * Gets informacao_complementar
     *
     * @return string|null
     */
    public function getInformacaoComplementar()
    {
        return $this->container['informacao_complementar'];
    }

    /**
     * Sets informacao_complementar
     *
     * @param string|null $informacao_complementar informacao_complementar
     *
     * @return self
     */
    public function setInformacaoComplementar($informacao_complementar)
    {
        if (is_null($informacao_complementar)) {
            throw new \InvalidArgumentException('non-nullable informacao_complementar cannot be null');
        }
        $this->container['informacao_complementar'] = $informacao_complementar;

        return $this;
    }

    /**
     * Gets processo
     *
     * @return string|null
     */
    public function getProcesso()
    {
        return $this->container['processo'];
    }

    /**
     * Sets processo
     *
     * @param string|null $processo processo
     *
     * @return self
     */
    public function setProcesso($processo)
    {
        if (is_null($processo)) {
            throw new \InvalidArgumentException('non-nullable processo cannot be null');
        }
        $this->container['processo'] = $processo;

        return $this;
    }

    /**
     * Gets objeto_compra
     *
     * @return string|null
     */
    public function getObjetoCompra()
    {
        return $this->container['objeto_compra'];
    }

    /**
     * Sets objeto_compra
     *
     * @param string|null $objeto_compra objeto_compra
     *
     * @return self
     */
    public function setObjetoCompra($objeto_compra)
    {
        if (is_null($objeto_compra)) {
            throw new \InvalidArgumentException('non-nullable objeto_compra cannot be null');
        }
        $this->container['objeto_compra'] = $objeto_compra;

        return $this;
    }

    /**
     * Gets link_sistema_origem
     *
     * @return string|null
     */
    public function getLinkSistemaOrigem()
    {
        return $this->container['link_sistema_origem'];
    }

    /**
     * Sets link_sistema_origem
     *
     * @param string|null $link_sistema_origem link_sistema_origem
     *
     * @return self
     */
    public function setLinkSistemaOrigem($link_sistema_origem)
    {
        if (is_null($link_sistema_origem)) {
            throw new \InvalidArgumentException('non-nullable link_sistema_origem cannot be null');
        }
        $this->container['link_sistema_origem'] = $link_sistema_origem;

        return $this;
    }

    /**
     * Gets justificativa_presencial
     *
     * @return string|null
     */
    public function getJustificativaPresencial()
    {
        return $this->container['justificativa_presencial'];
    }

    /**
     * Sets justificativa_presencial
     *
     * @param string|null $justificativa_presencial justificativa_presencial
     *
     * @return self
     */
    public function setJustificativaPresencial($justificativa_presencial)
    {
        if (is_null($justificativa_presencial)) {
            throw new \InvalidArgumentException('non-nullable justificativa_presencial cannot be null');
        }
        $this->container['justificativa_presencial'] = $justificativa_presencial;

        return $this;
    }

    /**
     * Gets existe_resultado
     *
     * @return bool|null
     */
    public function getExisteResultado()
    {
        return $this->container['existe_resultado'];
    }

    /**
     * Sets existe_resultado
     *
     * @param bool|null $existe_resultado existe_resultado
     *
     * @return self
     */
    public function setExisteResultado($existe_resultado)
    {
        if (is_null($existe_resultado)) {
            throw new \InvalidArgumentException('non-nullable existe_resultado cannot be null');
        }
        $this->container['existe_resultado'] = $existe_resultado;

        return $this;
    }

    /**
     * Gets numero_controle_pncp
     *
     * @return string|null
     */
    public function getNumeroControlePncp()
    {
        return $this->container['numero_controle_pncp'];
    }

    /**
     * Sets numero_controle_pncp
     *
     * @param string|null $numero_controle_pncp numero_controle_pncp
     *
     * @return self
     */
    public function setNumeroControlePncp($numero_controle_pncp)
    {
        if (is_null($numero_controle_pncp)) {
            throw new \InvalidArgumentException('non-nullable numero_controle_pncp cannot be null');
        }
        $this->container['numero_controle_pncp'] = $numero_controle_pncp;

        return $this;
    }

    /**
     * Gets orcamento_sigiloso_codigo
     *
     * @return int|null
     */
    public function getOrcamentoSigilosoCodigo()
    {
        return $this->container['orcamento_sigiloso_codigo'];
    }

    /**
     * Sets orcamento_sigiloso_codigo
     *
     * @param int|null $orcamento_sigiloso_codigo orcamento_sigiloso_codigo
     *
     * @return self
     */
    public function setOrcamentoSigilosoCodigo($orcamento_sigiloso_codigo)
    {
        if (is_null($orcamento_sigiloso_codigo)) {
            throw new \InvalidArgumentException('non-nullable orcamento_sigiloso_codigo cannot be null');
        }
        $this->container['orcamento_sigiloso_codigo'] = $orcamento_sigiloso_codigo;

        return $this;
    }

    /**
     * Gets orcamento_sigiloso_descricao
     *
     * @return string|null
     */
    public function getOrcamentoSigilosoDescricao()
    {
        return $this->container['orcamento_sigiloso_descricao'];
    }

    /**
     * Sets orcamento_sigiloso_descricao
     *
     * @param string|null $orcamento_sigiloso_descricao orcamento_sigiloso_descricao
     *
     * @return self
     */
    public function setOrcamentoSigilosoDescricao($orcamento_sigiloso_descricao)
    {
        if (is_null($orcamento_sigiloso_descricao)) {
            throw new \InvalidArgumentException('non-nullable orcamento_sigiloso_descricao cannot be null');
        }
        $this->container['orcamento_sigiloso_descricao'] = $orcamento_sigiloso_descricao;

        return $this;
    }

    /**
     * Gets situacao_compra_id
     *
     * @return string|null
     */
    public function getSituacaoCompraId()
    {
        return $this->container['situacao_compra_id'];
    }

    /**
     * Sets situacao_compra_id
     *
     * @param string|null $situacao_compra_id situacao_compra_id
     *
     * @return self
     */
    public function setSituacaoCompraId($situacao_compra_id)
    {
        if (is_null($situacao_compra_id)) {
            throw new \InvalidArgumentException('non-nullable situacao_compra_id cannot be null');
        }
        $allowedValues = $this->getSituacaoCompraIdAllowableValues();
        if (!in_array($situacao_compra_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'situacao_compra_id', must be one of '%s'",
                    $situacao_compra_id,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['situacao_compra_id'] = $situacao_compra_id;

        return $this;
    }

    /**
     * Gets situacao_compra_nome
     *
     * @return string|null
     */
    public function getSituacaoCompraNome()
    {
        return $this->container['situacao_compra_nome'];
    }

    /**
     * Sets situacao_compra_nome
     *
     * @param string|null $situacao_compra_nome situacao_compra_nome
     *
     * @return self
     */
    public function setSituacaoCompraNome($situacao_compra_nome)
    {
        if (is_null($situacao_compra_nome)) {
            throw new \InvalidArgumentException('non-nullable situacao_compra_nome cannot be null');
        }
        $this->container['situacao_compra_nome'] = $situacao_compra_nome;

        return $this;
    }

    /**
     * Gets tipo_instrumento_convocatorio_codigo
     *
     * @return int|null
     */
    public function getTipoInstrumentoConvocatorioCodigo()
    {
        return $this->container['tipo_instrumento_convocatorio_codigo'];
    }

    /**
     * Sets tipo_instrumento_convocatorio_codigo
     *
     * @param int|null $tipo_instrumento_convocatorio_codigo tipo_instrumento_convocatorio_codigo
     *
     * @return self
     */
    public function setTipoInstrumentoConvocatorioCodigo($tipo_instrumento_convocatorio_codigo)
    {
        if (is_null($tipo_instrumento_convocatorio_codigo)) {
            throw new \InvalidArgumentException('non-nullable tipo_instrumento_convocatorio_codigo cannot be null');
        }
        $this->container['tipo_instrumento_convocatorio_codigo'] = $tipo_instrumento_convocatorio_codigo;

        return $this;
    }

    /**
     * Gets tipo_instrumento_convocatorio_nome
     *
     * @return string|null
     */
    public function getTipoInstrumentoConvocatorioNome()
    {
        return $this->container['tipo_instrumento_convocatorio_nome'];
    }

    /**
     * Sets tipo_instrumento_convocatorio_nome
     *
     * @param string|null $tipo_instrumento_convocatorio_nome tipo_instrumento_convocatorio_nome
     *
     * @return self
     */
    public function setTipoInstrumentoConvocatorioNome($tipo_instrumento_convocatorio_nome)
    {
        if (is_null($tipo_instrumento_convocatorio_nome)) {
            throw new \InvalidArgumentException('non-nullable tipo_instrumento_convocatorio_nome cannot be null');
        }
        $this->container['tipo_instrumento_convocatorio_nome'] = $tipo_instrumento_convocatorio_nome;

        return $this;
    }

    /**
     * Gets modo_disputa_id
     *
     * @return int|null
     */
    public function getModoDisputaId()
    {
        return $this->container['modo_disputa_id'];
    }

    /**
     * Sets modo_disputa_id
     *
     * @param int|null $modo_disputa_id modo_disputa_id
     *
     * @return self
     */
    public function setModoDisputaId($modo_disputa_id)
    {
        if (is_null($modo_disputa_id)) {
            throw new \InvalidArgumentException('non-nullable modo_disputa_id cannot be null');
        }
        $this->container['modo_disputa_id'] = $modo_disputa_id;

        return $this;
    }

    /**
     * Gets modo_disputa_nome
     *
     * @return string|null
     */
    public function getModoDisputaNome()
    {
        return $this->container['modo_disputa_nome'];
    }

    /**
     * Sets modo_disputa_nome
     *
     * @param string|null $modo_disputa_nome modo_disputa_nome
     *
     * @return self
     */
    public function setModoDisputaNome($modo_disputa_nome)
    {
        if (is_null($modo_disputa_nome)) {
            throw new \InvalidArgumentException('non-nullable modo_disputa_nome cannot be null');
        }
        $this->container['modo_disputa_nome'] = $modo_disputa_nome;

        return $this;
    }

    /**
     * Gets usuario_nome
     *
     * @return string|null
     */
    public function getUsuarioNome()
    {
        return $this->container['usuario_nome'];
    }

    /**
     * Sets usuario_nome
     *
     * @param string|null $usuario_nome usuario_nome
     *
     * @return self
     */
    public function setUsuarioNome($usuario_nome)
    {
        if (is_null($usuario_nome)) {
            throw new \InvalidArgumentException('non-nullable usuario_nome cannot be null');
        }
        $this->container['usuario_nome'] = $usuario_nome;

        return $this;
    }

    /**
     * Gets modalidade_nome
     *
     * @return string|null
     */
    public function getModalidadeNome()
    {
        return $this->container['modalidade_nome'];
    }

    /**
     * Sets modalidade_nome
     *
     * @param string|null $modalidade_nome modalidade_nome
     *
     * @return self
     */
    public function setModalidadeNome($modalidade_nome)
    {
        if (is_null($modalidade_nome)) {
            throw new \InvalidArgumentException('non-nullable modalidade_nome cannot be null');
        }
        $this->container['modalidade_nome'] = $modalidade_nome;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


