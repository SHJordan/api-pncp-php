<?php
/**
 * RecuperarContratoDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API PNCP
 *
 * API REST de serviços do Portal Nacional de Contratações Públicas (PNCP)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: css.serpro@serpro.gov.br
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RecuperarContratoDTO Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RecuperarContratoDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RecuperarContratoDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'orgao_sub_rogado' => '\OpenAPI\Client\Model\RecuperarOrgaoEntidadeDTO',
        'unidade_orgao' => '\OpenAPI\Client\Model\RecuperarUnidadeOrgaoDTO',
        'unidade_sub_rogada' => '\OpenAPI\Client\Model\RecuperarUnidadeOrgaoDTO',
        'data_atualizacao' => '\DateTime',
        'ni_fornecedor' => 'string',
        'tipo_pessoa' => 'string',
        'tipo_pessoa_sub_contratada' => 'string',
        'data_publicacao_pncp' => '\DateTime',
        'orgao_entidade' => '\OpenAPI\Client\Model\RecuperarOrgaoEntidadeDTO',
        'ano_contrato' => 'int',
        'sequencial_contrato' => 'int',
        'numero_retificacao' => 'int',
        'tipo_contrato' => '\OpenAPI\Client\Model\TipoContrato',
        'numero_contrato_empenho' => 'string',
        'data_assinatura' => '\DateTime',
        'data_vigencia_inicio' => '\DateTime',
        'data_vigencia_fim' => '\DateTime',
        'categoria_processo' => '\OpenAPI\Client\Model\Categoria',
        'nome_razao_social_fornecedor' => 'string',
        'ni_fornecedor_sub_contratado' => 'string',
        'nome_fornecedor_sub_contratado' => 'string',
        'informacao_complementar' => 'string',
        'processo' => 'string',
        'valor_acumulado' => 'float',
        'identificador_cipi' => 'string',
        'url_cipi' => 'string',
        'valor_inicial' => 'float',
        'numero_parcelas' => 'int',
        'valor_parcela' => 'float',
        'valor_global' => 'float',
        'numero_controle_pncp' => 'string',
        'receita' => 'bool',
        'objeto_contrato' => 'string',
        'usuario_nome' => 'string',
        'numero_controle_pncp_compra' => 'string',
        'codigo_pais_fornecedor' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'orgao_sub_rogado' => null,
        'unidade_orgao' => null,
        'unidade_sub_rogada' => null,
        'data_atualizacao' => 'date-time',
        'ni_fornecedor' => null,
        'tipo_pessoa' => null,
        'tipo_pessoa_sub_contratada' => null,
        'data_publicacao_pncp' => 'date-time',
        'orgao_entidade' => null,
        'ano_contrato' => 'int32',
        'sequencial_contrato' => 'int32',
        'numero_retificacao' => 'int32',
        'tipo_contrato' => null,
        'numero_contrato_empenho' => null,
        'data_assinatura' => 'date',
        'data_vigencia_inicio' => 'date',
        'data_vigencia_fim' => 'date',
        'categoria_processo' => null,
        'nome_razao_social_fornecedor' => null,
        'ni_fornecedor_sub_contratado' => null,
        'nome_fornecedor_sub_contratado' => null,
        'informacao_complementar' => null,
        'processo' => null,
        'valor_acumulado' => null,
        'identificador_cipi' => null,
        'url_cipi' => null,
        'valor_inicial' => null,
        'numero_parcelas' => 'int32',
        'valor_parcela' => null,
        'valor_global' => null,
        'numero_controle_pncp' => null,
        'receita' => null,
        'objeto_contrato' => null,
        'usuario_nome' => null,
        'numero_controle_pncp_compra' => null,
        'codigo_pais_fornecedor' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'orgao_sub_rogado' => false,
		'unidade_orgao' => false,
		'unidade_sub_rogada' => false,
		'data_atualizacao' => false,
		'ni_fornecedor' => false,
		'tipo_pessoa' => false,
		'tipo_pessoa_sub_contratada' => false,
		'data_publicacao_pncp' => false,
		'orgao_entidade' => false,
		'ano_contrato' => false,
		'sequencial_contrato' => false,
		'numero_retificacao' => false,
		'tipo_contrato' => false,
		'numero_contrato_empenho' => false,
		'data_assinatura' => false,
		'data_vigencia_inicio' => false,
		'data_vigencia_fim' => false,
		'categoria_processo' => false,
		'nome_razao_social_fornecedor' => false,
		'ni_fornecedor_sub_contratado' => false,
		'nome_fornecedor_sub_contratado' => false,
		'informacao_complementar' => false,
		'processo' => false,
		'valor_acumulado' => false,
		'identificador_cipi' => false,
		'url_cipi' => false,
		'valor_inicial' => false,
		'numero_parcelas' => false,
		'valor_parcela' => false,
		'valor_global' => false,
		'numero_controle_pncp' => false,
		'receita' => false,
		'objeto_contrato' => false,
		'usuario_nome' => false,
		'numero_controle_pncp_compra' => false,
		'codigo_pais_fornecedor' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'orgao_sub_rogado' => 'orgaoSubRogado',
        'unidade_orgao' => 'unidadeOrgao',
        'unidade_sub_rogada' => 'unidadeSubRogada',
        'data_atualizacao' => 'dataAtualizacao',
        'ni_fornecedor' => 'niFornecedor',
        'tipo_pessoa' => 'tipoPessoa',
        'tipo_pessoa_sub_contratada' => 'tipoPessoaSubContratada',
        'data_publicacao_pncp' => 'dataPublicacaoPncp',
        'orgao_entidade' => 'orgaoEntidade',
        'ano_contrato' => 'anoContrato',
        'sequencial_contrato' => 'sequencialContrato',
        'numero_retificacao' => 'numeroRetificacao',
        'tipo_contrato' => 'tipoContrato',
        'numero_contrato_empenho' => 'numeroContratoEmpenho',
        'data_assinatura' => 'dataAssinatura',
        'data_vigencia_inicio' => 'dataVigenciaInicio',
        'data_vigencia_fim' => 'dataVigenciaFim',
        'categoria_processo' => 'categoriaProcesso',
        'nome_razao_social_fornecedor' => 'nomeRazaoSocialFornecedor',
        'ni_fornecedor_sub_contratado' => 'niFornecedorSubContratado',
        'nome_fornecedor_sub_contratado' => 'nomeFornecedorSubContratado',
        'informacao_complementar' => 'informacaoComplementar',
        'processo' => 'processo',
        'valor_acumulado' => 'valorAcumulado',
        'identificador_cipi' => 'identificadorCipi',
        'url_cipi' => 'urlCipi',
        'valor_inicial' => 'valorInicial',
        'numero_parcelas' => 'numeroParcelas',
        'valor_parcela' => 'valorParcela',
        'valor_global' => 'valorGlobal',
        'numero_controle_pncp' => 'numeroControlePNCP',
        'receita' => 'receita',
        'objeto_contrato' => 'objetoContrato',
        'usuario_nome' => 'usuarioNome',
        'numero_controle_pncp_compra' => 'numeroControlePncpCompra',
        'codigo_pais_fornecedor' => 'codigoPaisFornecedor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'orgao_sub_rogado' => 'setOrgaoSubRogado',
        'unidade_orgao' => 'setUnidadeOrgao',
        'unidade_sub_rogada' => 'setUnidadeSubRogada',
        'data_atualizacao' => 'setDataAtualizacao',
        'ni_fornecedor' => 'setNiFornecedor',
        'tipo_pessoa' => 'setTipoPessoa',
        'tipo_pessoa_sub_contratada' => 'setTipoPessoaSubContratada',
        'data_publicacao_pncp' => 'setDataPublicacaoPncp',
        'orgao_entidade' => 'setOrgaoEntidade',
        'ano_contrato' => 'setAnoContrato',
        'sequencial_contrato' => 'setSequencialContrato',
        'numero_retificacao' => 'setNumeroRetificacao',
        'tipo_contrato' => 'setTipoContrato',
        'numero_contrato_empenho' => 'setNumeroContratoEmpenho',
        'data_assinatura' => 'setDataAssinatura',
        'data_vigencia_inicio' => 'setDataVigenciaInicio',
        'data_vigencia_fim' => 'setDataVigenciaFim',
        'categoria_processo' => 'setCategoriaProcesso',
        'nome_razao_social_fornecedor' => 'setNomeRazaoSocialFornecedor',
        'ni_fornecedor_sub_contratado' => 'setNiFornecedorSubContratado',
        'nome_fornecedor_sub_contratado' => 'setNomeFornecedorSubContratado',
        'informacao_complementar' => 'setInformacaoComplementar',
        'processo' => 'setProcesso',
        'valor_acumulado' => 'setValorAcumulado',
        'identificador_cipi' => 'setIdentificadorCipi',
        'url_cipi' => 'setUrlCipi',
        'valor_inicial' => 'setValorInicial',
        'numero_parcelas' => 'setNumeroParcelas',
        'valor_parcela' => 'setValorParcela',
        'valor_global' => 'setValorGlobal',
        'numero_controle_pncp' => 'setNumeroControlePncp',
        'receita' => 'setReceita',
        'objeto_contrato' => 'setObjetoContrato',
        'usuario_nome' => 'setUsuarioNome',
        'numero_controle_pncp_compra' => 'setNumeroControlePncpCompra',
        'codigo_pais_fornecedor' => 'setCodigoPaisFornecedor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'orgao_sub_rogado' => 'getOrgaoSubRogado',
        'unidade_orgao' => 'getUnidadeOrgao',
        'unidade_sub_rogada' => 'getUnidadeSubRogada',
        'data_atualizacao' => 'getDataAtualizacao',
        'ni_fornecedor' => 'getNiFornecedor',
        'tipo_pessoa' => 'getTipoPessoa',
        'tipo_pessoa_sub_contratada' => 'getTipoPessoaSubContratada',
        'data_publicacao_pncp' => 'getDataPublicacaoPncp',
        'orgao_entidade' => 'getOrgaoEntidade',
        'ano_contrato' => 'getAnoContrato',
        'sequencial_contrato' => 'getSequencialContrato',
        'numero_retificacao' => 'getNumeroRetificacao',
        'tipo_contrato' => 'getTipoContrato',
        'numero_contrato_empenho' => 'getNumeroContratoEmpenho',
        'data_assinatura' => 'getDataAssinatura',
        'data_vigencia_inicio' => 'getDataVigenciaInicio',
        'data_vigencia_fim' => 'getDataVigenciaFim',
        'categoria_processo' => 'getCategoriaProcesso',
        'nome_razao_social_fornecedor' => 'getNomeRazaoSocialFornecedor',
        'ni_fornecedor_sub_contratado' => 'getNiFornecedorSubContratado',
        'nome_fornecedor_sub_contratado' => 'getNomeFornecedorSubContratado',
        'informacao_complementar' => 'getInformacaoComplementar',
        'processo' => 'getProcesso',
        'valor_acumulado' => 'getValorAcumulado',
        'identificador_cipi' => 'getIdentificadorCipi',
        'url_cipi' => 'getUrlCipi',
        'valor_inicial' => 'getValorInicial',
        'numero_parcelas' => 'getNumeroParcelas',
        'valor_parcela' => 'getValorParcela',
        'valor_global' => 'getValorGlobal',
        'numero_controle_pncp' => 'getNumeroControlePncp',
        'receita' => 'getReceita',
        'objeto_contrato' => 'getObjetoContrato',
        'usuario_nome' => 'getUsuarioNome',
        'numero_controle_pncp_compra' => 'getNumeroControlePncpCompra',
        'codigo_pais_fornecedor' => 'getCodigoPaisFornecedor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TIPO_PESSOA_PJ = 'PJ';
    public const TIPO_PESSOA_PF = 'PF';
    public const TIPO_PESSOA_PE = 'PE';
    public const TIPO_PESSOA_SUB_CONTRATADA_PJ = 'PJ';
    public const TIPO_PESSOA_SUB_CONTRATADA_PF = 'PF';
    public const TIPO_PESSOA_SUB_CONTRATADA_PE = 'PE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTipoPessoaAllowableValues()
    {
        return [
            self::TIPO_PESSOA_PJ,
            self::TIPO_PESSOA_PF,
            self::TIPO_PESSOA_PE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTipoPessoaSubContratadaAllowableValues()
    {
        return [
            self::TIPO_PESSOA_SUB_CONTRATADA_PJ,
            self::TIPO_PESSOA_SUB_CONTRATADA_PF,
            self::TIPO_PESSOA_SUB_CONTRATADA_PE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('orgao_sub_rogado', $data ?? [], null);
        $this->setIfExists('unidade_orgao', $data ?? [], null);
        $this->setIfExists('unidade_sub_rogada', $data ?? [], null);
        $this->setIfExists('data_atualizacao', $data ?? [], null);
        $this->setIfExists('ni_fornecedor', $data ?? [], null);
        $this->setIfExists('tipo_pessoa', $data ?? [], null);
        $this->setIfExists('tipo_pessoa_sub_contratada', $data ?? [], null);
        $this->setIfExists('data_publicacao_pncp', $data ?? [], null);
        $this->setIfExists('orgao_entidade', $data ?? [], null);
        $this->setIfExists('ano_contrato', $data ?? [], null);
        $this->setIfExists('sequencial_contrato', $data ?? [], null);
        $this->setIfExists('numero_retificacao', $data ?? [], null);
        $this->setIfExists('tipo_contrato', $data ?? [], null);
        $this->setIfExists('numero_contrato_empenho', $data ?? [], null);
        $this->setIfExists('data_assinatura', $data ?? [], null);
        $this->setIfExists('data_vigencia_inicio', $data ?? [], null);
        $this->setIfExists('data_vigencia_fim', $data ?? [], null);
        $this->setIfExists('categoria_processo', $data ?? [], null);
        $this->setIfExists('nome_razao_social_fornecedor', $data ?? [], null);
        $this->setIfExists('ni_fornecedor_sub_contratado', $data ?? [], null);
        $this->setIfExists('nome_fornecedor_sub_contratado', $data ?? [], null);
        $this->setIfExists('informacao_complementar', $data ?? [], null);
        $this->setIfExists('processo', $data ?? [], null);
        $this->setIfExists('valor_acumulado', $data ?? [], null);
        $this->setIfExists('identificador_cipi', $data ?? [], null);
        $this->setIfExists('url_cipi', $data ?? [], null);
        $this->setIfExists('valor_inicial', $data ?? [], null);
        $this->setIfExists('numero_parcelas', $data ?? [], null);
        $this->setIfExists('valor_parcela', $data ?? [], null);
        $this->setIfExists('valor_global', $data ?? [], null);
        $this->setIfExists('numero_controle_pncp', $data ?? [], null);
        $this->setIfExists('receita', $data ?? [], null);
        $this->setIfExists('objeto_contrato', $data ?? [], null);
        $this->setIfExists('usuario_nome', $data ?? [], null);
        $this->setIfExists('numero_controle_pncp_compra', $data ?? [], null);
        $this->setIfExists('codigo_pais_fornecedor', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTipoPessoaAllowableValues();
        if (!is_null($this->container['tipo_pessoa']) && !in_array($this->container['tipo_pessoa'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tipo_pessoa', must be one of '%s'",
                $this->container['tipo_pessoa'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTipoPessoaSubContratadaAllowableValues();
        if (!is_null($this->container['tipo_pessoa_sub_contratada']) && !in_array($this->container['tipo_pessoa_sub_contratada'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tipo_pessoa_sub_contratada', must be one of '%s'",
                $this->container['tipo_pessoa_sub_contratada'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets orgao_sub_rogado
     *
     * @return \OpenAPI\Client\Model\RecuperarOrgaoEntidadeDTO|null
     */
    public function getOrgaoSubRogado()
    {
        return $this->container['orgao_sub_rogado'];
    }

    /**
     * Sets orgao_sub_rogado
     *
     * @param \OpenAPI\Client\Model\RecuperarOrgaoEntidadeDTO|null $orgao_sub_rogado orgao_sub_rogado
     *
     * @return self
     */
    public function setOrgaoSubRogado($orgao_sub_rogado)
    {
        if (is_null($orgao_sub_rogado)) {
            throw new \InvalidArgumentException('non-nullable orgao_sub_rogado cannot be null');
        }
        $this->container['orgao_sub_rogado'] = $orgao_sub_rogado;

        return $this;
    }

    /**
     * Gets unidade_orgao
     *
     * @return \OpenAPI\Client\Model\RecuperarUnidadeOrgaoDTO|null
     */
    public function getUnidadeOrgao()
    {
        return $this->container['unidade_orgao'];
    }

    /**
     * Sets unidade_orgao
     *
     * @param \OpenAPI\Client\Model\RecuperarUnidadeOrgaoDTO|null $unidade_orgao unidade_orgao
     *
     * @return self
     */
    public function setUnidadeOrgao($unidade_orgao)
    {
        if (is_null($unidade_orgao)) {
            throw new \InvalidArgumentException('non-nullable unidade_orgao cannot be null');
        }
        $this->container['unidade_orgao'] = $unidade_orgao;

        return $this;
    }

    /**
     * Gets unidade_sub_rogada
     *
     * @return \OpenAPI\Client\Model\RecuperarUnidadeOrgaoDTO|null
     */
    public function getUnidadeSubRogada()
    {
        return $this->container['unidade_sub_rogada'];
    }

    /**
     * Sets unidade_sub_rogada
     *
     * @param \OpenAPI\Client\Model\RecuperarUnidadeOrgaoDTO|null $unidade_sub_rogada unidade_sub_rogada
     *
     * @return self
     */
    public function setUnidadeSubRogada($unidade_sub_rogada)
    {
        if (is_null($unidade_sub_rogada)) {
            throw new \InvalidArgumentException('non-nullable unidade_sub_rogada cannot be null');
        }
        $this->container['unidade_sub_rogada'] = $unidade_sub_rogada;

        return $this;
    }

    /**
     * Gets data_atualizacao
     *
     * @return \DateTime|null
     */
    public function getDataAtualizacao()
    {
        return $this->container['data_atualizacao'];
    }

    /**
     * Sets data_atualizacao
     *
     * @param \DateTime|null $data_atualizacao data_atualizacao
     *
     * @return self
     */
    public function setDataAtualizacao($data_atualizacao)
    {
        if (is_null($data_atualizacao)) {
            throw new \InvalidArgumentException('non-nullable data_atualizacao cannot be null');
        }
        $this->container['data_atualizacao'] = $data_atualizacao;

        return $this;
    }

    /**
     * Gets ni_fornecedor
     *
     * @return string|null
     */
    public function getNiFornecedor()
    {
        return $this->container['ni_fornecedor'];
    }

    /**
     * Sets ni_fornecedor
     *
     * @param string|null $ni_fornecedor ni_fornecedor
     *
     * @return self
     */
    public function setNiFornecedor($ni_fornecedor)
    {
        if (is_null($ni_fornecedor)) {
            throw new \InvalidArgumentException('non-nullable ni_fornecedor cannot be null');
        }
        $this->container['ni_fornecedor'] = $ni_fornecedor;

        return $this;
    }

    /**
     * Gets tipo_pessoa
     *
     * @return string|null
     */
    public function getTipoPessoa()
    {
        return $this->container['tipo_pessoa'];
    }

    /**
     * Sets tipo_pessoa
     *
     * @param string|null $tipo_pessoa tipo_pessoa
     *
     * @return self
     */
    public function setTipoPessoa($tipo_pessoa)
    {
        if (is_null($tipo_pessoa)) {
            throw new \InvalidArgumentException('non-nullable tipo_pessoa cannot be null');
        }
        $allowedValues = $this->getTipoPessoaAllowableValues();
        if (!in_array($tipo_pessoa, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tipo_pessoa', must be one of '%s'",
                    $tipo_pessoa,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tipo_pessoa'] = $tipo_pessoa;

        return $this;
    }

    /**
     * Gets tipo_pessoa_sub_contratada
     *
     * @return string|null
     */
    public function getTipoPessoaSubContratada()
    {
        return $this->container['tipo_pessoa_sub_contratada'];
    }

    /**
     * Sets tipo_pessoa_sub_contratada
     *
     * @param string|null $tipo_pessoa_sub_contratada tipo_pessoa_sub_contratada
     *
     * @return self
     */
    public function setTipoPessoaSubContratada($tipo_pessoa_sub_contratada)
    {
        if (is_null($tipo_pessoa_sub_contratada)) {
            throw new \InvalidArgumentException('non-nullable tipo_pessoa_sub_contratada cannot be null');
        }
        $allowedValues = $this->getTipoPessoaSubContratadaAllowableValues();
        if (!in_array($tipo_pessoa_sub_contratada, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tipo_pessoa_sub_contratada', must be one of '%s'",
                    $tipo_pessoa_sub_contratada,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tipo_pessoa_sub_contratada'] = $tipo_pessoa_sub_contratada;

        return $this;
    }

    /**
     * Gets data_publicacao_pncp
     *
     * @return \DateTime|null
     */
    public function getDataPublicacaoPncp()
    {
        return $this->container['data_publicacao_pncp'];
    }

    /**
     * Sets data_publicacao_pncp
     *
     * @param \DateTime|null $data_publicacao_pncp data_publicacao_pncp
     *
     * @return self
     */
    public function setDataPublicacaoPncp($data_publicacao_pncp)
    {
        if (is_null($data_publicacao_pncp)) {
            throw new \InvalidArgumentException('non-nullable data_publicacao_pncp cannot be null');
        }
        $this->container['data_publicacao_pncp'] = $data_publicacao_pncp;

        return $this;
    }

    /**
     * Gets orgao_entidade
     *
     * @return \OpenAPI\Client\Model\RecuperarOrgaoEntidadeDTO|null
     */
    public function getOrgaoEntidade()
    {
        return $this->container['orgao_entidade'];
    }

    /**
     * Sets orgao_entidade
     *
     * @param \OpenAPI\Client\Model\RecuperarOrgaoEntidadeDTO|null $orgao_entidade orgao_entidade
     *
     * @return self
     */
    public function setOrgaoEntidade($orgao_entidade)
    {
        if (is_null($orgao_entidade)) {
            throw new \InvalidArgumentException('non-nullable orgao_entidade cannot be null');
        }
        $this->container['orgao_entidade'] = $orgao_entidade;

        return $this;
    }

    /**
     * Gets ano_contrato
     *
     * @return int|null
     */
    public function getAnoContrato()
    {
        return $this->container['ano_contrato'];
    }

    /**
     * Sets ano_contrato
     *
     * @param int|null $ano_contrato ano_contrato
     *
     * @return self
     */
    public function setAnoContrato($ano_contrato)
    {
        if (is_null($ano_contrato)) {
            throw new \InvalidArgumentException('non-nullable ano_contrato cannot be null');
        }
        $this->container['ano_contrato'] = $ano_contrato;

        return $this;
    }

    /**
     * Gets sequencial_contrato
     *
     * @return int|null
     */
    public function getSequencialContrato()
    {
        return $this->container['sequencial_contrato'];
    }

    /**
     * Sets sequencial_contrato
     *
     * @param int|null $sequencial_contrato sequencial_contrato
     *
     * @return self
     */
    public function setSequencialContrato($sequencial_contrato)
    {
        if (is_null($sequencial_contrato)) {
            throw new \InvalidArgumentException('non-nullable sequencial_contrato cannot be null');
        }
        $this->container['sequencial_contrato'] = $sequencial_contrato;

        return $this;
    }

    /**
     * Gets numero_retificacao
     *
     * @return int|null
     */
    public function getNumeroRetificacao()
    {
        return $this->container['numero_retificacao'];
    }

    /**
     * Sets numero_retificacao
     *
     * @param int|null $numero_retificacao numero_retificacao
     *
     * @return self
     */
    public function setNumeroRetificacao($numero_retificacao)
    {
        if (is_null($numero_retificacao)) {
            throw new \InvalidArgumentException('non-nullable numero_retificacao cannot be null');
        }
        $this->container['numero_retificacao'] = $numero_retificacao;

        return $this;
    }

    /**
     * Gets tipo_contrato
     *
     * @return \OpenAPI\Client\Model\TipoContrato|null
     */
    public function getTipoContrato()
    {
        return $this->container['tipo_contrato'];
    }

    /**
     * Sets tipo_contrato
     *
     * @param \OpenAPI\Client\Model\TipoContrato|null $tipo_contrato tipo_contrato
     *
     * @return self
     */
    public function setTipoContrato($tipo_contrato)
    {
        if (is_null($tipo_contrato)) {
            throw new \InvalidArgumentException('non-nullable tipo_contrato cannot be null');
        }
        $this->container['tipo_contrato'] = $tipo_contrato;

        return $this;
    }

    /**
     * Gets numero_contrato_empenho
     *
     * @return string|null
     */
    public function getNumeroContratoEmpenho()
    {
        return $this->container['numero_contrato_empenho'];
    }

    /**
     * Sets numero_contrato_empenho
     *
     * @param string|null $numero_contrato_empenho numero_contrato_empenho
     *
     * @return self
     */
    public function setNumeroContratoEmpenho($numero_contrato_empenho)
    {
        if (is_null($numero_contrato_empenho)) {
            throw new \InvalidArgumentException('non-nullable numero_contrato_empenho cannot be null');
        }
        $this->container['numero_contrato_empenho'] = $numero_contrato_empenho;

        return $this;
    }

    /**
     * Gets data_assinatura
     *
     * @return \DateTime|null
     */
    public function getDataAssinatura()
    {
        return $this->container['data_assinatura'];
    }

    /**
     * Sets data_assinatura
     *
     * @param \DateTime|null $data_assinatura data_assinatura
     *
     * @return self
     */
    public function setDataAssinatura($data_assinatura)
    {
        if (is_null($data_assinatura)) {
            throw new \InvalidArgumentException('non-nullable data_assinatura cannot be null');
        }
        $this->container['data_assinatura'] = $data_assinatura;

        return $this;
    }

    /**
     * Gets data_vigencia_inicio
     *
     * @return \DateTime|null
     */
    public function getDataVigenciaInicio()
    {
        return $this->container['data_vigencia_inicio'];
    }

    /**
     * Sets data_vigencia_inicio
     *
     * @param \DateTime|null $data_vigencia_inicio data_vigencia_inicio
     *
     * @return self
     */
    public function setDataVigenciaInicio($data_vigencia_inicio)
    {
        if (is_null($data_vigencia_inicio)) {
            throw new \InvalidArgumentException('non-nullable data_vigencia_inicio cannot be null');
        }
        $this->container['data_vigencia_inicio'] = $data_vigencia_inicio;

        return $this;
    }

    /**
     * Gets data_vigencia_fim
     *
     * @return \DateTime|null
     */
    public function getDataVigenciaFim()
    {
        return $this->container['data_vigencia_fim'];
    }

    /**
     * Sets data_vigencia_fim
     *
     * @param \DateTime|null $data_vigencia_fim data_vigencia_fim
     *
     * @return self
     */
    public function setDataVigenciaFim($data_vigencia_fim)
    {
        if (is_null($data_vigencia_fim)) {
            throw new \InvalidArgumentException('non-nullable data_vigencia_fim cannot be null');
        }
        $this->container['data_vigencia_fim'] = $data_vigencia_fim;

        return $this;
    }

    /**
     * Gets categoria_processo
     *
     * @return \OpenAPI\Client\Model\Categoria|null
     */
    public function getCategoriaProcesso()
    {
        return $this->container['categoria_processo'];
    }

    /**
     * Sets categoria_processo
     *
     * @param \OpenAPI\Client\Model\Categoria|null $categoria_processo categoria_processo
     *
     * @return self
     */
    public function setCategoriaProcesso($categoria_processo)
    {
        if (is_null($categoria_processo)) {
            throw new \InvalidArgumentException('non-nullable categoria_processo cannot be null');
        }
        $this->container['categoria_processo'] = $categoria_processo;

        return $this;
    }

    /**
     * Gets nome_razao_social_fornecedor
     *
     * @return string|null
     */
    public function getNomeRazaoSocialFornecedor()
    {
        return $this->container['nome_razao_social_fornecedor'];
    }

    /**
     * Sets nome_razao_social_fornecedor
     *
     * @param string|null $nome_razao_social_fornecedor nome_razao_social_fornecedor
     *
     * @return self
     */
    public function setNomeRazaoSocialFornecedor($nome_razao_social_fornecedor)
    {
        if (is_null($nome_razao_social_fornecedor)) {
            throw new \InvalidArgumentException('non-nullable nome_razao_social_fornecedor cannot be null');
        }
        $this->container['nome_razao_social_fornecedor'] = $nome_razao_social_fornecedor;

        return $this;
    }

    /**
     * Gets ni_fornecedor_sub_contratado
     *
     * @return string|null
     */
    public function getNiFornecedorSubContratado()
    {
        return $this->container['ni_fornecedor_sub_contratado'];
    }

    /**
     * Sets ni_fornecedor_sub_contratado
     *
     * @param string|null $ni_fornecedor_sub_contratado ni_fornecedor_sub_contratado
     *
     * @return self
     */
    public function setNiFornecedorSubContratado($ni_fornecedor_sub_contratado)
    {
        if (is_null($ni_fornecedor_sub_contratado)) {
            throw new \InvalidArgumentException('non-nullable ni_fornecedor_sub_contratado cannot be null');
        }
        $this->container['ni_fornecedor_sub_contratado'] = $ni_fornecedor_sub_contratado;

        return $this;
    }

    /**
     * Gets nome_fornecedor_sub_contratado
     *
     * @return string|null
     */
    public function getNomeFornecedorSubContratado()
    {
        return $this->container['nome_fornecedor_sub_contratado'];
    }

    /**
     * Sets nome_fornecedor_sub_contratado
     *
     * @param string|null $nome_fornecedor_sub_contratado nome_fornecedor_sub_contratado
     *
     * @return self
     */
    public function setNomeFornecedorSubContratado($nome_fornecedor_sub_contratado)
    {
        if (is_null($nome_fornecedor_sub_contratado)) {
            throw new \InvalidArgumentException('non-nullable nome_fornecedor_sub_contratado cannot be null');
        }
        $this->container['nome_fornecedor_sub_contratado'] = $nome_fornecedor_sub_contratado;

        return $this;
    }

    /**
     * Gets informacao_complementar
     *
     * @return string|null
     */
    public function getInformacaoComplementar()
    {
        return $this->container['informacao_complementar'];
    }

    /**
     * Sets informacao_complementar
     *
     * @param string|null $informacao_complementar informacao_complementar
     *
     * @return self
     */
    public function setInformacaoComplementar($informacao_complementar)
    {
        if (is_null($informacao_complementar)) {
            throw new \InvalidArgumentException('non-nullable informacao_complementar cannot be null');
        }
        $this->container['informacao_complementar'] = $informacao_complementar;

        return $this;
    }

    /**
     * Gets processo
     *
     * @return string|null
     */
    public function getProcesso()
    {
        return $this->container['processo'];
    }

    /**
     * Sets processo
     *
     * @param string|null $processo processo
     *
     * @return self
     */
    public function setProcesso($processo)
    {
        if (is_null($processo)) {
            throw new \InvalidArgumentException('non-nullable processo cannot be null');
        }
        $this->container['processo'] = $processo;

        return $this;
    }

    /**
     * Gets valor_acumulado
     *
     * @return float|null
     */
    public function getValorAcumulado()
    {
        return $this->container['valor_acumulado'];
    }

    /**
     * Sets valor_acumulado
     *
     * @param float|null $valor_acumulado valor_acumulado
     *
     * @return self
     */
    public function setValorAcumulado($valor_acumulado)
    {
        if (is_null($valor_acumulado)) {
            throw new \InvalidArgumentException('non-nullable valor_acumulado cannot be null');
        }
        $this->container['valor_acumulado'] = $valor_acumulado;

        return $this;
    }

    /**
     * Gets identificador_cipi
     *
     * @return string|null
     */
    public function getIdentificadorCipi()
    {
        return $this->container['identificador_cipi'];
    }

    /**
     * Sets identificador_cipi
     *
     * @param string|null $identificador_cipi identificador_cipi
     *
     * @return self
     */
    public function setIdentificadorCipi($identificador_cipi)
    {
        if (is_null($identificador_cipi)) {
            throw new \InvalidArgumentException('non-nullable identificador_cipi cannot be null');
        }
        $this->container['identificador_cipi'] = $identificador_cipi;

        return $this;
    }

    /**
     * Gets url_cipi
     *
     * @return string|null
     */
    public function getUrlCipi()
    {
        return $this->container['url_cipi'];
    }

    /**
     * Sets url_cipi
     *
     * @param string|null $url_cipi url_cipi
     *
     * @return self
     */
    public function setUrlCipi($url_cipi)
    {
        if (is_null($url_cipi)) {
            throw new \InvalidArgumentException('non-nullable url_cipi cannot be null');
        }
        $this->container['url_cipi'] = $url_cipi;

        return $this;
    }

    /**
     * Gets valor_inicial
     *
     * @return float|null
     */
    public function getValorInicial()
    {
        return $this->container['valor_inicial'];
    }

    /**
     * Sets valor_inicial
     *
     * @param float|null $valor_inicial valor_inicial
     *
     * @return self
     */
    public function setValorInicial($valor_inicial)
    {
        if (is_null($valor_inicial)) {
            throw new \InvalidArgumentException('non-nullable valor_inicial cannot be null');
        }
        $this->container['valor_inicial'] = $valor_inicial;

        return $this;
    }

    /**
     * Gets numero_parcelas
     *
     * @return int|null
     */
    public function getNumeroParcelas()
    {
        return $this->container['numero_parcelas'];
    }

    /**
     * Sets numero_parcelas
     *
     * @param int|null $numero_parcelas numero_parcelas
     *
     * @return self
     */
    public function setNumeroParcelas($numero_parcelas)
    {
        if (is_null($numero_parcelas)) {
            throw new \InvalidArgumentException('non-nullable numero_parcelas cannot be null');
        }
        $this->container['numero_parcelas'] = $numero_parcelas;

        return $this;
    }

    /**
     * Gets valor_parcela
     *
     * @return float|null
     */
    public function getValorParcela()
    {
        return $this->container['valor_parcela'];
    }

    /**
     * Sets valor_parcela
     *
     * @param float|null $valor_parcela valor_parcela
     *
     * @return self
     */
    public function setValorParcela($valor_parcela)
    {
        if (is_null($valor_parcela)) {
            throw new \InvalidArgumentException('non-nullable valor_parcela cannot be null');
        }
        $this->container['valor_parcela'] = $valor_parcela;

        return $this;
    }

    /**
     * Gets valor_global
     *
     * @return float|null
     */
    public function getValorGlobal()
    {
        return $this->container['valor_global'];
    }

    /**
     * Sets valor_global
     *
     * @param float|null $valor_global valor_global
     *
     * @return self
     */
    public function setValorGlobal($valor_global)
    {
        if (is_null($valor_global)) {
            throw new \InvalidArgumentException('non-nullable valor_global cannot be null');
        }
        $this->container['valor_global'] = $valor_global;

        return $this;
    }

    /**
     * Gets numero_controle_pncp
     *
     * @return string|null
     */
    public function getNumeroControlePncp()
    {
        return $this->container['numero_controle_pncp'];
    }

    /**
     * Sets numero_controle_pncp
     *
     * @param string|null $numero_controle_pncp numero_controle_pncp
     *
     * @return self
     */
    public function setNumeroControlePncp($numero_controle_pncp)
    {
        if (is_null($numero_controle_pncp)) {
            throw new \InvalidArgumentException('non-nullable numero_controle_pncp cannot be null');
        }
        $this->container['numero_controle_pncp'] = $numero_controle_pncp;

        return $this;
    }

    /**
     * Gets receita
     *
     * @return bool|null
     */
    public function getReceita()
    {
        return $this->container['receita'];
    }

    /**
     * Sets receita
     *
     * @param bool|null $receita receita
     *
     * @return self
     */
    public function setReceita($receita)
    {
        if (is_null($receita)) {
            throw new \InvalidArgumentException('non-nullable receita cannot be null');
        }
        $this->container['receita'] = $receita;

        return $this;
    }

    /**
     * Gets objeto_contrato
     *
     * @return string|null
     */
    public function getObjetoContrato()
    {
        return $this->container['objeto_contrato'];
    }

    /**
     * Sets objeto_contrato
     *
     * @param string|null $objeto_contrato objeto_contrato
     *
     * @return self
     */
    public function setObjetoContrato($objeto_contrato)
    {
        if (is_null($objeto_contrato)) {
            throw new \InvalidArgumentException('non-nullable objeto_contrato cannot be null');
        }
        $this->container['objeto_contrato'] = $objeto_contrato;

        return $this;
    }

    /**
     * Gets usuario_nome
     *
     * @return string|null
     */
    public function getUsuarioNome()
    {
        return $this->container['usuario_nome'];
    }

    /**
     * Sets usuario_nome
     *
     * @param string|null $usuario_nome usuario_nome
     *
     * @return self
     */
    public function setUsuarioNome($usuario_nome)
    {
        if (is_null($usuario_nome)) {
            throw new \InvalidArgumentException('non-nullable usuario_nome cannot be null');
        }
        $this->container['usuario_nome'] = $usuario_nome;

        return $this;
    }

    /**
     * Gets numero_controle_pncp_compra
     *
     * @return string|null
     */
    public function getNumeroControlePncpCompra()
    {
        return $this->container['numero_controle_pncp_compra'];
    }

    /**
     * Sets numero_controle_pncp_compra
     *
     * @param string|null $numero_controle_pncp_compra numero_controle_pncp_compra
     *
     * @return self
     */
    public function setNumeroControlePncpCompra($numero_controle_pncp_compra)
    {
        if (is_null($numero_controle_pncp_compra)) {
            throw new \InvalidArgumentException('non-nullable numero_controle_pncp_compra cannot be null');
        }
        $this->container['numero_controle_pncp_compra'] = $numero_controle_pncp_compra;

        return $this;
    }

    /**
     * Gets codigo_pais_fornecedor
     *
     * @return string|null
     */
    public function getCodigoPaisFornecedor()
    {
        return $this->container['codigo_pais_fornecedor'];
    }

    /**
     * Sets codigo_pais_fornecedor
     *
     * @param string|null $codigo_pais_fornecedor codigo_pais_fornecedor
     *
     * @return self
     */
    public function setCodigoPaisFornecedor($codigo_pais_fornecedor)
    {
        if (is_null($codigo_pais_fornecedor)) {
            throw new \InvalidArgumentException('non-nullable codigo_pais_fornecedor cannot be null');
        }
        $this->container['codigo_pais_fornecedor'] = $codigo_pais_fornecedor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


