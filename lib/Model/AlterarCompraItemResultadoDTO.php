<?php
/**
 * AlterarCompraItemResultadoDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API PNCP
 *
 * API REST de serviços do Portal Nacional de Contratações Públicas (PNCP)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: css.serpro@serpro.gov.br
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AlterarCompraItemResultadoDTO Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AlterarCompraItemResultadoDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AlterarCompraItemResultadoDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'quantidade_homologada' => 'float',
        'valor_unitario_homologado' => 'float',
        'valor_total_homologado' => 'float',
        'percentual_desconto' => 'float',
        'tipo_pessoa_id' => 'string',
        'ni_fornecedor' => 'string',
        'nome_razao_social_fornecedor' => 'string',
        'porte_fornecedor_id' => 'string',
        'codigo_pais' => 'string',
        'indicador_subcontratacao' => 'bool',
        'ordem_classificacao_srp' => 'int',
        'data_resultado' => '\DateTime',
        'natureza_juridica_id' => 'string',
        'situacao_compra_item_resultado_id' => 'int',
        'justificativa' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'quantidade_homologada' => null,
        'valor_unitario_homologado' => null,
        'valor_total_homologado' => null,
        'percentual_desconto' => null,
        'tipo_pessoa_id' => null,
        'ni_fornecedor' => null,
        'nome_razao_social_fornecedor' => null,
        'porte_fornecedor_id' => null,
        'codigo_pais' => null,
        'indicador_subcontratacao' => null,
        'ordem_classificacao_srp' => 'int32',
        'data_resultado' => 'date',
        'natureza_juridica_id' => null,
        'situacao_compra_item_resultado_id' => 'int64',
        'justificativa' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'quantidade_homologada' => false,
		'valor_unitario_homologado' => false,
		'valor_total_homologado' => false,
		'percentual_desconto' => false,
		'tipo_pessoa_id' => false,
		'ni_fornecedor' => false,
		'nome_razao_social_fornecedor' => false,
		'porte_fornecedor_id' => false,
		'codigo_pais' => false,
		'indicador_subcontratacao' => false,
		'ordem_classificacao_srp' => false,
		'data_resultado' => false,
		'natureza_juridica_id' => false,
		'situacao_compra_item_resultado_id' => false,
		'justificativa' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'quantidade_homologada' => 'quantidadeHomologada',
        'valor_unitario_homologado' => 'valorUnitarioHomologado',
        'valor_total_homologado' => 'valorTotalHomologado',
        'percentual_desconto' => 'percentualDesconto',
        'tipo_pessoa_id' => 'tipoPessoaId',
        'ni_fornecedor' => 'niFornecedor',
        'nome_razao_social_fornecedor' => 'nomeRazaoSocialFornecedor',
        'porte_fornecedor_id' => 'porteFornecedorId',
        'codigo_pais' => 'codigoPais',
        'indicador_subcontratacao' => 'indicadorSubcontratacao',
        'ordem_classificacao_srp' => 'ordemClassificacaoSrp',
        'data_resultado' => 'dataResultado',
        'natureza_juridica_id' => 'naturezaJuridicaId',
        'situacao_compra_item_resultado_id' => 'situacaoCompraItemResultadoId',
        'justificativa' => 'justificativa'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'quantidade_homologada' => 'setQuantidadeHomologada',
        'valor_unitario_homologado' => 'setValorUnitarioHomologado',
        'valor_total_homologado' => 'setValorTotalHomologado',
        'percentual_desconto' => 'setPercentualDesconto',
        'tipo_pessoa_id' => 'setTipoPessoaId',
        'ni_fornecedor' => 'setNiFornecedor',
        'nome_razao_social_fornecedor' => 'setNomeRazaoSocialFornecedor',
        'porte_fornecedor_id' => 'setPorteFornecedorId',
        'codigo_pais' => 'setCodigoPais',
        'indicador_subcontratacao' => 'setIndicadorSubcontratacao',
        'ordem_classificacao_srp' => 'setOrdemClassificacaoSrp',
        'data_resultado' => 'setDataResultado',
        'natureza_juridica_id' => 'setNaturezaJuridicaId',
        'situacao_compra_item_resultado_id' => 'setSituacaoCompraItemResultadoId',
        'justificativa' => 'setJustificativa'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'quantidade_homologada' => 'getQuantidadeHomologada',
        'valor_unitario_homologado' => 'getValorUnitarioHomologado',
        'valor_total_homologado' => 'getValorTotalHomologado',
        'percentual_desconto' => 'getPercentualDesconto',
        'tipo_pessoa_id' => 'getTipoPessoaId',
        'ni_fornecedor' => 'getNiFornecedor',
        'nome_razao_social_fornecedor' => 'getNomeRazaoSocialFornecedor',
        'porte_fornecedor_id' => 'getPorteFornecedorId',
        'codigo_pais' => 'getCodigoPais',
        'indicador_subcontratacao' => 'getIndicadorSubcontratacao',
        'ordem_classificacao_srp' => 'getOrdemClassificacaoSrp',
        'data_resultado' => 'getDataResultado',
        'natureza_juridica_id' => 'getNaturezaJuridicaId',
        'situacao_compra_item_resultado_id' => 'getSituacaoCompraItemResultadoId',
        'justificativa' => 'getJustificativa'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PORTE_FORNECEDOR_ID__1 = '1';
    public const PORTE_FORNECEDOR_ID__2 = '2';
    public const PORTE_FORNECEDOR_ID__3 = '3';
    public const PORTE_FORNECEDOR_ID__4 = '4';
    public const PORTE_FORNECEDOR_ID__5 = '5';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPorteFornecedorIdAllowableValues()
    {
        return [
            self::PORTE_FORNECEDOR_ID__1,
            self::PORTE_FORNECEDOR_ID__2,
            self::PORTE_FORNECEDOR_ID__3,
            self::PORTE_FORNECEDOR_ID__4,
            self::PORTE_FORNECEDOR_ID__5,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('quantidade_homologada', $data ?? [], null);
        $this->setIfExists('valor_unitario_homologado', $data ?? [], null);
        $this->setIfExists('valor_total_homologado', $data ?? [], null);
        $this->setIfExists('percentual_desconto', $data ?? [], null);
        $this->setIfExists('tipo_pessoa_id', $data ?? [], null);
        $this->setIfExists('ni_fornecedor', $data ?? [], null);
        $this->setIfExists('nome_razao_social_fornecedor', $data ?? [], null);
        $this->setIfExists('porte_fornecedor_id', $data ?? [], null);
        $this->setIfExists('codigo_pais', $data ?? [], null);
        $this->setIfExists('indicador_subcontratacao', $data ?? [], null);
        $this->setIfExists('ordem_classificacao_srp', $data ?? [], null);
        $this->setIfExists('data_resultado', $data ?? [], null);
        $this->setIfExists('natureza_juridica_id', $data ?? [], null);
        $this->setIfExists('situacao_compra_item_resultado_id', $data ?? [], null);
        $this->setIfExists('justificativa', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['quantidade_homologada'] === null) {
            $invalidProperties[] = "'quantidade_homologada' can't be null";
        }
        if (($this->container['quantidade_homologada'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'quantidade_homologada', must be bigger than or equal to 0.0.";
        }

        if ($this->container['valor_unitario_homologado'] === null) {
            $invalidProperties[] = "'valor_unitario_homologado' can't be null";
        }
        if (($this->container['valor_unitario_homologado'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'valor_unitario_homologado', must be bigger than or equal to 0.0.";
        }

        if (!is_null($this->container['valor_total_homologado']) && ($this->container['valor_total_homologado'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'valor_total_homologado', must be bigger than or equal to 0.0.";
        }

        if ($this->container['percentual_desconto'] === null) {
            $invalidProperties[] = "'percentual_desconto' can't be null";
        }
        if ($this->container['tipo_pessoa_id'] === null) {
            $invalidProperties[] = "'tipo_pessoa_id' can't be null";
        }
        if ($this->container['ni_fornecedor'] === null) {
            $invalidProperties[] = "'ni_fornecedor' can't be null";
        }
        if ($this->container['nome_razao_social_fornecedor'] === null) {
            $invalidProperties[] = "'nome_razao_social_fornecedor' can't be null";
        }
        if ($this->container['porte_fornecedor_id'] === null) {
            $invalidProperties[] = "'porte_fornecedor_id' can't be null";
        }
        $allowedValues = $this->getPorteFornecedorIdAllowableValues();
        if (!is_null($this->container['porte_fornecedor_id']) && !in_array($this->container['porte_fornecedor_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'porte_fornecedor_id', must be one of '%s'",
                $this->container['porte_fornecedor_id'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['codigo_pais']) && (mb_strlen($this->container['codigo_pais']) > 3)) {
            $invalidProperties[] = "invalid value for 'codigo_pais', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['codigo_pais']) && (mb_strlen($this->container['codigo_pais']) < 2)) {
            $invalidProperties[] = "invalid value for 'codigo_pais', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['indicador_subcontratacao'] === null) {
            $invalidProperties[] = "'indicador_subcontratacao' can't be null";
        }
        if (!is_null($this->container['ordem_classificacao_srp']) && ($this->container['ordem_classificacao_srp'] < 1)) {
            $invalidProperties[] = "invalid value for 'ordem_classificacao_srp', must be bigger than or equal to 1.";
        }

        if ($this->container['data_resultado'] === null) {
            $invalidProperties[] = "'data_resultado' can't be null";
        }
        if (!is_null($this->container['natureza_juridica_id']) && !preg_match("/\\d{4}/", $this->container['natureza_juridica_id'])) {
            $invalidProperties[] = "invalid value for 'natureza_juridica_id', must be conform to the pattern /\\d{4}/.";
        }

        if ($this->container['situacao_compra_item_resultado_id'] === null) {
            $invalidProperties[] = "'situacao_compra_item_resultado_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets quantidade_homologada
     *
     * @return float
     */
    public function getQuantidadeHomologada()
    {
        return $this->container['quantidade_homologada'];
    }

    /**
     * Sets quantidade_homologada
     *
     * @param float $quantidade_homologada quantidade_homologada
     *
     * @return self
     */
    public function setQuantidadeHomologada($quantidade_homologada)
    {
        if (is_null($quantidade_homologada)) {
            throw new \InvalidArgumentException('non-nullable quantidade_homologada cannot be null');
        }

        if (($quantidade_homologada < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $quantidade_homologada when calling AlterarCompraItemResultadoDTO., must be bigger than or equal to 0.0.');
        }

        $this->container['quantidade_homologada'] = $quantidade_homologada;

        return $this;
    }

    /**
     * Gets valor_unitario_homologado
     *
     * @return float
     */
    public function getValorUnitarioHomologado()
    {
        return $this->container['valor_unitario_homologado'];
    }

    /**
     * Sets valor_unitario_homologado
     *
     * @param float $valor_unitario_homologado valor_unitario_homologado
     *
     * @return self
     */
    public function setValorUnitarioHomologado($valor_unitario_homologado)
    {
        if (is_null($valor_unitario_homologado)) {
            throw new \InvalidArgumentException('non-nullable valor_unitario_homologado cannot be null');
        }

        if (($valor_unitario_homologado < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $valor_unitario_homologado when calling AlterarCompraItemResultadoDTO., must be bigger than or equal to 0.0.');
        }

        $this->container['valor_unitario_homologado'] = $valor_unitario_homologado;

        return $this;
    }

    /**
     * Gets valor_total_homologado
     *
     * @return float|null
     */
    public function getValorTotalHomologado()
    {
        return $this->container['valor_total_homologado'];
    }

    /**
     * Sets valor_total_homologado
     *
     * @param float|null $valor_total_homologado valor_total_homologado
     *
     * @return self
     */
    public function setValorTotalHomologado($valor_total_homologado)
    {
        if (is_null($valor_total_homologado)) {
            throw new \InvalidArgumentException('non-nullable valor_total_homologado cannot be null');
        }

        if (($valor_total_homologado < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $valor_total_homologado when calling AlterarCompraItemResultadoDTO., must be bigger than or equal to 0.0.');
        }

        $this->container['valor_total_homologado'] = $valor_total_homologado;

        return $this;
    }

    /**
     * Gets percentual_desconto
     *
     * @return float
     */
    public function getPercentualDesconto()
    {
        return $this->container['percentual_desconto'];
    }

    /**
     * Sets percentual_desconto
     *
     * @param float $percentual_desconto percentual_desconto
     *
     * @return self
     */
    public function setPercentualDesconto($percentual_desconto)
    {
        if (is_null($percentual_desconto)) {
            throw new \InvalidArgumentException('non-nullable percentual_desconto cannot be null');
        }
        $this->container['percentual_desconto'] = $percentual_desconto;

        return $this;
    }

    /**
     * Gets tipo_pessoa_id
     *
     * @return string
     */
    public function getTipoPessoaId()
    {
        return $this->container['tipo_pessoa_id'];
    }

    /**
     * Sets tipo_pessoa_id
     *
     * @param string $tipo_pessoa_id tipo_pessoa_id
     *
     * @return self
     */
    public function setTipoPessoaId($tipo_pessoa_id)
    {
        if (is_null($tipo_pessoa_id)) {
            throw new \InvalidArgumentException('non-nullable tipo_pessoa_id cannot be null');
        }
        $this->container['tipo_pessoa_id'] = $tipo_pessoa_id;

        return $this;
    }

    /**
     * Gets ni_fornecedor
     *
     * @return string
     */
    public function getNiFornecedor()
    {
        return $this->container['ni_fornecedor'];
    }

    /**
     * Sets ni_fornecedor
     *
     * @param string $ni_fornecedor ni_fornecedor
     *
     * @return self
     */
    public function setNiFornecedor($ni_fornecedor)
    {
        if (is_null($ni_fornecedor)) {
            throw new \InvalidArgumentException('non-nullable ni_fornecedor cannot be null');
        }
        $this->container['ni_fornecedor'] = $ni_fornecedor;

        return $this;
    }

    /**
     * Gets nome_razao_social_fornecedor
     *
     * @return string
     */
    public function getNomeRazaoSocialFornecedor()
    {
        return $this->container['nome_razao_social_fornecedor'];
    }

    /**
     * Sets nome_razao_social_fornecedor
     *
     * @param string $nome_razao_social_fornecedor nome_razao_social_fornecedor
     *
     * @return self
     */
    public function setNomeRazaoSocialFornecedor($nome_razao_social_fornecedor)
    {
        if (is_null($nome_razao_social_fornecedor)) {
            throw new \InvalidArgumentException('non-nullable nome_razao_social_fornecedor cannot be null');
        }
        $this->container['nome_razao_social_fornecedor'] = $nome_razao_social_fornecedor;

        return $this;
    }

    /**
     * Gets porte_fornecedor_id
     *
     * @return string
     */
    public function getPorteFornecedorId()
    {
        return $this->container['porte_fornecedor_id'];
    }

    /**
     * Sets porte_fornecedor_id
     *
     * @param string $porte_fornecedor_id porte_fornecedor_id
     *
     * @return self
     */
    public function setPorteFornecedorId($porte_fornecedor_id)
    {
        if (is_null($porte_fornecedor_id)) {
            throw new \InvalidArgumentException('non-nullable porte_fornecedor_id cannot be null');
        }
        $allowedValues = $this->getPorteFornecedorIdAllowableValues();
        if (!in_array($porte_fornecedor_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'porte_fornecedor_id', must be one of '%s'",
                    $porte_fornecedor_id,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['porte_fornecedor_id'] = $porte_fornecedor_id;

        return $this;
    }

    /**
     * Gets codigo_pais
     *
     * @return string|null
     */
    public function getCodigoPais()
    {
        return $this->container['codigo_pais'];
    }

    /**
     * Sets codigo_pais
     *
     * @param string|null $codigo_pais codigo_pais
     *
     * @return self
     */
    public function setCodigoPais($codigo_pais)
    {
        if (is_null($codigo_pais)) {
            throw new \InvalidArgumentException('non-nullable codigo_pais cannot be null');
        }
        if ((mb_strlen($codigo_pais) > 3)) {
            throw new \InvalidArgumentException('invalid length for $codigo_pais when calling AlterarCompraItemResultadoDTO., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($codigo_pais) < 2)) {
            throw new \InvalidArgumentException('invalid length for $codigo_pais when calling AlterarCompraItemResultadoDTO., must be bigger than or equal to 2.');
        }

        $this->container['codigo_pais'] = $codigo_pais;

        return $this;
    }

    /**
     * Gets indicador_subcontratacao
     *
     * @return bool
     */
    public function getIndicadorSubcontratacao()
    {
        return $this->container['indicador_subcontratacao'];
    }

    /**
     * Sets indicador_subcontratacao
     *
     * @param bool $indicador_subcontratacao indicador_subcontratacao
     *
     * @return self
     */
    public function setIndicadorSubcontratacao($indicador_subcontratacao)
    {
        if (is_null($indicador_subcontratacao)) {
            throw new \InvalidArgumentException('non-nullable indicador_subcontratacao cannot be null');
        }
        $this->container['indicador_subcontratacao'] = $indicador_subcontratacao;

        return $this;
    }

    /**
     * Gets ordem_classificacao_srp
     *
     * @return int|null
     */
    public function getOrdemClassificacaoSrp()
    {
        return $this->container['ordem_classificacao_srp'];
    }

    /**
     * Sets ordem_classificacao_srp
     *
     * @param int|null $ordem_classificacao_srp ordem_classificacao_srp
     *
     * @return self
     */
    public function setOrdemClassificacaoSrp($ordem_classificacao_srp)
    {
        if (is_null($ordem_classificacao_srp)) {
            throw new \InvalidArgumentException('non-nullable ordem_classificacao_srp cannot be null');
        }

        if (($ordem_classificacao_srp < 1)) {
            throw new \InvalidArgumentException('invalid value for $ordem_classificacao_srp when calling AlterarCompraItemResultadoDTO., must be bigger than or equal to 1.');
        }

        $this->container['ordem_classificacao_srp'] = $ordem_classificacao_srp;

        return $this;
    }

    /**
     * Gets data_resultado
     *
     * @return \DateTime
     */
    public function getDataResultado()
    {
        return $this->container['data_resultado'];
    }

    /**
     * Sets data_resultado
     *
     * @param \DateTime $data_resultado data_resultado
     *
     * @return self
     */
    public function setDataResultado($data_resultado)
    {
        if (is_null($data_resultado)) {
            throw new \InvalidArgumentException('non-nullable data_resultado cannot be null');
        }
        $this->container['data_resultado'] = $data_resultado;

        return $this;
    }

    /**
     * Gets natureza_juridica_id
     *
     * @return string|null
     */
    public function getNaturezaJuridicaId()
    {
        return $this->container['natureza_juridica_id'];
    }

    /**
     * Sets natureza_juridica_id
     *
     * @param string|null $natureza_juridica_id natureza_juridica_id
     *
     * @return self
     */
    public function setNaturezaJuridicaId($natureza_juridica_id)
    {
        if (is_null($natureza_juridica_id)) {
            throw new \InvalidArgumentException('non-nullable natureza_juridica_id cannot be null');
        }

        if ((!preg_match("/\\d{4}/", ObjectSerializer::toString($natureza_juridica_id)))) {
            throw new \InvalidArgumentException("invalid value for \$natureza_juridica_id when calling AlterarCompraItemResultadoDTO., must conform to the pattern /\\d{4}/.");
        }

        $this->container['natureza_juridica_id'] = $natureza_juridica_id;

        return $this;
    }

    /**
     * Gets situacao_compra_item_resultado_id
     *
     * @return int
     */
    public function getSituacaoCompraItemResultadoId()
    {
        return $this->container['situacao_compra_item_resultado_id'];
    }

    /**
     * Sets situacao_compra_item_resultado_id
     *
     * @param int $situacao_compra_item_resultado_id situacao_compra_item_resultado_id
     *
     * @return self
     */
    public function setSituacaoCompraItemResultadoId($situacao_compra_item_resultado_id)
    {
        if (is_null($situacao_compra_item_resultado_id)) {
            throw new \InvalidArgumentException('non-nullable situacao_compra_item_resultado_id cannot be null');
        }
        $this->container['situacao_compra_item_resultado_id'] = $situacao_compra_item_resultado_id;

        return $this;
    }

    /**
     * Gets justificativa
     *
     * @return string|null
     */
    public function getJustificativa()
    {
        return $this->container['justificativa'];
    }

    /**
     * Sets justificativa
     *
     * @param string|null $justificativa justificativa
     *
     * @return self
     */
    public function setJustificativa($justificativa)
    {
        if (is_null($justificativa)) {
            throw new \InvalidArgumentException('non-nullable justificativa cannot be null');
        }
        $this->container['justificativa'] = $justificativa;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


