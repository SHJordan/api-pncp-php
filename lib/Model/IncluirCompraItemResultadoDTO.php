<?php
/**
 * IncluirCompraItemResultadoDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API PNCP
 *
 * API REST de serviços do Portal Nacional de Contratações Públicas (PNCP)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: css.serpro@serpro.gov.br
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * IncluirCompraItemResultadoDTO Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IncluirCompraItemResultadoDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IncluirCompraItemResultadoDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'quantidade_homologada' => 'float',
        'valor_unitario_homologado' => 'float',
        'valor_total_homologado' => 'float',
        'percentual_desconto' => 'float',
        'tipo_pessoa_id' => 'string',
        'ni_fornecedor' => 'string',
        'nome_razao_social_fornecedor' => 'string',
        'porte_fornecedor_id' => 'string',
        'codigo_pais' => 'string',
        'indicador_subcontratacao' => 'bool',
        'ordem_classificacao_srp' => 'int',
        'data_resultado' => '\DateTime',
        'natureza_juridica_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'quantidade_homologada' => null,
        'valor_unitario_homologado' => null,
        'valor_total_homologado' => null,
        'percentual_desconto' => null,
        'tipo_pessoa_id' => null,
        'ni_fornecedor' => null,
        'nome_razao_social_fornecedor' => null,
        'porte_fornecedor_id' => null,
        'codigo_pais' => null,
        'indicador_subcontratacao' => null,
        'ordem_classificacao_srp' => 'int32',
        'data_resultado' => 'date',
        'natureza_juridica_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'quantidade_homologada' => false,
		'valor_unitario_homologado' => false,
		'valor_total_homologado' => false,
		'percentual_desconto' => false,
		'tipo_pessoa_id' => false,
		'ni_fornecedor' => false,
		'nome_razao_social_fornecedor' => false,
		'porte_fornecedor_id' => false,
		'codigo_pais' => false,
		'indicador_subcontratacao' => false,
		'ordem_classificacao_srp' => false,
		'data_resultado' => false,
		'natureza_juridica_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'quantidade_homologada' => 'quantidadeHomologada',
        'valor_unitario_homologado' => 'valorUnitarioHomologado',
        'valor_total_homologado' => 'valorTotalHomologado',
        'percentual_desconto' => 'percentualDesconto',
        'tipo_pessoa_id' => 'tipoPessoaId',
        'ni_fornecedor' => 'niFornecedor',
        'nome_razao_social_fornecedor' => 'nomeRazaoSocialFornecedor',
        'porte_fornecedor_id' => 'porteFornecedorId',
        'codigo_pais' => 'codigoPais',
        'indicador_subcontratacao' => 'indicadorSubcontratacao',
        'ordem_classificacao_srp' => 'ordemClassificacaoSrp',
        'data_resultado' => 'dataResultado',
        'natureza_juridica_id' => 'naturezaJuridicaId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'quantidade_homologada' => 'setQuantidadeHomologada',
        'valor_unitario_homologado' => 'setValorUnitarioHomologado',
        'valor_total_homologado' => 'setValorTotalHomologado',
        'percentual_desconto' => 'setPercentualDesconto',
        'tipo_pessoa_id' => 'setTipoPessoaId',
        'ni_fornecedor' => 'setNiFornecedor',
        'nome_razao_social_fornecedor' => 'setNomeRazaoSocialFornecedor',
        'porte_fornecedor_id' => 'setPorteFornecedorId',
        'codigo_pais' => 'setCodigoPais',
        'indicador_subcontratacao' => 'setIndicadorSubcontratacao',
        'ordem_classificacao_srp' => 'setOrdemClassificacaoSrp',
        'data_resultado' => 'setDataResultado',
        'natureza_juridica_id' => 'setNaturezaJuridicaId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'quantidade_homologada' => 'getQuantidadeHomologada',
        'valor_unitario_homologado' => 'getValorUnitarioHomologado',
        'valor_total_homologado' => 'getValorTotalHomologado',
        'percentual_desconto' => 'getPercentualDesconto',
        'tipo_pessoa_id' => 'getTipoPessoaId',
        'ni_fornecedor' => 'getNiFornecedor',
        'nome_razao_social_fornecedor' => 'getNomeRazaoSocialFornecedor',
        'porte_fornecedor_id' => 'getPorteFornecedorId',
        'codigo_pais' => 'getCodigoPais',
        'indicador_subcontratacao' => 'getIndicadorSubcontratacao',
        'ordem_classificacao_srp' => 'getOrdemClassificacaoSrp',
        'data_resultado' => 'getDataResultado',
        'natureza_juridica_id' => 'getNaturezaJuridicaId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TIPO_PESSOA_ID_PJ = 'PJ';
    public const TIPO_PESSOA_ID_PF = 'PF';
    public const TIPO_PESSOA_ID_PE = 'PE';
    public const PORTE_FORNECEDOR_ID__1 = '1';
    public const PORTE_FORNECEDOR_ID__2 = '2';
    public const PORTE_FORNECEDOR_ID__3 = '3';
    public const PORTE_FORNECEDOR_ID__4 = '4';
    public const PORTE_FORNECEDOR_ID__5 = '5';
    public const CODIGO_PAIS_AFG = 'AFG';
    public const CODIGO_PAIS_ZAF = 'ZAF';
    public const CODIGO_PAIS_ALB = 'ALB';
    public const CODIGO_PAIS_DEU = 'DEU';
    public const CODIGO_PAIS__AND = 'AND';
    public const CODIGO_PAIS_AGO = 'AGO';
    public const CODIGO_PAIS_ATG = 'ATG';
    public const CODIGO_PAIS_SAU = 'SAU';
    public const CODIGO_PAIS_DZA = 'DZA';
    public const CODIGO_PAIS_ARG = 'ARG';
    public const CODIGO_PAIS_ARM = 'ARM';
    public const CODIGO_PAIS_AUS = 'AUS';
    public const CODIGO_PAIS_AUT = 'AUT';
    public const CODIGO_PAIS_AZE = 'AZE';
    public const CODIGO_PAIS_BHS = 'BHS';
    public const CODIGO_PAIS_BGD = 'BGD';
    public const CODIGO_PAIS_BRB = 'BRB';
    public const CODIGO_PAIS_BHR = 'BHR';
    public const CODIGO_PAIS_BEL = 'BEL';
    public const CODIGO_PAIS_BLZ = 'BLZ';
    public const CODIGO_PAIS_BEN = 'BEN';
    public const CODIGO_PAIS_BLR = 'BLR';
    public const CODIGO_PAIS_BOL = 'BOL';
    public const CODIGO_PAIS_BIH = 'BIH';
    public const CODIGO_PAIS_BWA = 'BWA';
    public const CODIGO_PAIS_BRA = 'BRA';
    public const CODIGO_PAIS_BRN = 'BRN';
    public const CODIGO_PAIS_BGR = 'BGR';
    public const CODIGO_PAIS_BFA = 'BFA';
    public const CODIGO_PAIS_BDI = 'BDI';
    public const CODIGO_PAIS_BTN = 'BTN';
    public const CODIGO_PAIS_CPV = 'CPV';
    public const CODIGO_PAIS_CMR = 'CMR';
    public const CODIGO_PAIS_KHM = 'KHM';
    public const CODIGO_PAIS_CAN = 'CAN';
    public const CODIGO_PAIS_QAT = 'QAT';
    public const CODIGO_PAIS_KAZ = 'KAZ';
    public const CODIGO_PAIS_TCD = 'TCD';
    public const CODIGO_PAIS_CHL = 'CHL';
    public const CODIGO_PAIS_CHN = 'CHN';
    public const CODIGO_PAIS_CYP = 'CYP';
    public const CODIGO_PAIS_COL = 'COL';
    public const CODIGO_PAIS_COM = 'COM';
    public const CODIGO_PAIS_COG = 'COG';
    public const CODIGO_PAIS_PRK = 'PRK';
    public const CODIGO_PAIS_KOR = 'KOR';
    public const CODIGO_PAIS_CIV = 'CIV';
    public const CODIGO_PAIS_CRI = 'CRI';
    public const CODIGO_PAIS_HRV = 'HRV';
    public const CODIGO_PAIS_KWT = 'KWT';
    public const CODIGO_PAIS_CUB = 'CUB';
    public const CODIGO_PAIS_DNK = 'DNK';
    public const CODIGO_PAIS_DMA = 'DMA';
    public const CODIGO_PAIS_EGY = 'EGY';
    public const CODIGO_PAIS_ARE = 'ARE';
    public const CODIGO_PAIS_ECU = 'ECU';
    public const CODIGO_PAIS_ERI = 'ERI';
    public const CODIGO_PAIS_SVK = 'SVK';
    public const CODIGO_PAIS_SVN = 'SVN';
    public const CODIGO_PAIS_ESP = 'ESP';
    public const CODIGO_PAIS_SWZ = 'SWZ';
    public const CODIGO_PAIS_PSE = 'PSE';
    public const CODIGO_PAIS_USA = 'USA';
    public const CODIGO_PAIS_EST = 'EST';
    public const CODIGO_PAIS_ETH = 'ETH';
    public const CODIGO_PAIS_FJI = 'FJI';
    public const CODIGO_PAIS_PHL = 'PHL';
    public const CODIGO_PAIS_FIN = 'FIN';
    public const CODIGO_PAIS_FRA = 'FRA';
    public const CODIGO_PAIS_GAB = 'GAB';
    public const CODIGO_PAIS_GMB = 'GMB';
    public const CODIGO_PAIS_GHA = 'GHA';
    public const CODIGO_PAIS_GEO = 'GEO';
    public const CODIGO_PAIS_GRD = 'GRD';
    public const CODIGO_PAIS_GRC = 'GRC';
    public const CODIGO_PAIS_GTM = 'GTM';
    public const CODIGO_PAIS_GUY = 'GUY';
    public const CODIGO_PAIS_GIN = 'GIN';
    public const CODIGO_PAIS_GNQ = 'GNQ';
    public const CODIGO_PAIS_GNB = 'GNB';
    public const CODIGO_PAIS_HTI = 'HTI';
    public const CODIGO_PAIS_HND = 'HND';
    public const CODIGO_PAIS_HUN = 'HUN';
    public const CODIGO_PAIS_YEM = 'YEM';
    public const CODIGO_PAIS_MHL = 'MHL';
    public const CODIGO_PAIS_IND = 'IND';
    public const CODIGO_PAIS_IDN = 'IDN';
    public const CODIGO_PAIS_IRN = 'IRN';
    public const CODIGO_PAIS_IRQ = 'IRQ';
    public const CODIGO_PAIS_IRL = 'IRL';
    public const CODIGO_PAIS_ISL = 'ISL';
    public const CODIGO_PAIS_ISR = 'ISR';
    public const CODIGO_PAIS_ITA = 'ITA';
    public const CODIGO_PAIS_JAM = 'JAM';
    public const CODIGO_PAIS_JPN = 'JPN';
    public const CODIGO_PAIS_DJI = 'DJI';
    public const CODIGO_PAIS_JOR = 'JOR';
    public const CODIGO_PAIS_LAO = 'LAO';
    public const CODIGO_PAIS_LSO = 'LSO';
    public const CODIGO_PAIS_LVA = 'LVA';
    public const CODIGO_PAIS_LBN = 'LBN';
    public const CODIGO_PAIS_LBR = 'LBR';
    public const CODIGO_PAIS_LBY = 'LBY';
    public const CODIGO_PAIS_LIE = 'LIE';
    public const CODIGO_PAIS_LTU = 'LTU';
    public const CODIGO_PAIS_LUX = 'LUX';
    public const CODIGO_PAIS_MKD = 'MKD';
    public const CODIGO_PAIS_MDG = 'MDG';
    public const CODIGO_PAIS_MYS = 'MYS';
    public const CODIGO_PAIS_MWI = 'MWI';
    public const CODIGO_PAIS_MDV = 'MDV';
    public const CODIGO_PAIS_MLI = 'MLI';
    public const CODIGO_PAIS_MLT = 'MLT';
    public const CODIGO_PAIS_MAR = 'MAR';
    public const CODIGO_PAIS_MUS = 'MUS';
    public const CODIGO_PAIS_MRT = 'MRT';
    public const CODIGO_PAIS_MEX = 'MEX';
    public const CODIGO_PAIS_MMR = 'MMR';
    public const CODIGO_PAIS_FSM = 'FSM';
    public const CODIGO_PAIS_MOZ = 'MOZ';
    public const CODIGO_PAIS_MDA = 'MDA';
    public const CODIGO_PAIS_MCO = 'MCO';
    public const CODIGO_PAIS_MNG = 'MNG';
    public const CODIGO_PAIS_MNE = 'MNE';
    public const CODIGO_PAIS_NAM = 'NAM';
    public const CODIGO_PAIS_NRU = 'NRU';
    public const CODIGO_PAIS_NPL = 'NPL';
    public const CODIGO_PAIS_NIC = 'NIC';
    public const CODIGO_PAIS_NER = 'NER';
    public const CODIGO_PAIS_NGA = 'NGA';
    public const CODIGO_PAIS_NOR = 'NOR';
    public const CODIGO_PAIS_NZL = 'NZL';
    public const CODIGO_PAIS_OMN = 'OMN';
    public const CODIGO_PAIS_NLD = 'NLD';
    public const CODIGO_PAIS_PLW = 'PLW';
    public const CODIGO_PAIS_PAN = 'PAN';
    public const CODIGO_PAIS_PNG = 'PNG';
    public const CODIGO_PAIS_PAK = 'PAK';
    public const CODIGO_PAIS_PRY = 'PRY';
    public const CODIGO_PAIS_PER = 'PER';
    public const CODIGO_PAIS_POL = 'POL';
    public const CODIGO_PAIS_PRT = 'PRT';
    public const CODIGO_PAIS_KEN = 'KEN';
    public const CODIGO_PAIS_KGZ = 'KGZ';
    public const CODIGO_PAIS_KIR = 'KIR';
    public const CODIGO_PAIS_GBR = 'GBR';
    public const CODIGO_PAIS_CAF = 'CAF';
    public const CODIGO_PAIS_CZE = 'CZE';
    public const CODIGO_PAIS_COD = 'COD';
    public const CODIGO_PAIS_DOM = 'DOM';
    public const CODIGO_PAIS_ROU = 'ROU';
    public const CODIGO_PAIS_RWA = 'RWA';
    public const CODIGO_PAIS_RUS = 'RUS';
    public const CODIGO_PAIS_SLB = 'SLB';
    public const CODIGO_PAIS_SLV = 'SLV';
    public const CODIGO_PAIS_WSM = 'WSM';
    public const CODIGO_PAIS_LCA = 'LCA';
    public const CODIGO_PAIS_KNA = 'KNA';
    public const CODIGO_PAIS_SMR = 'SMR';
    public const CODIGO_PAIS_STP = 'STP';
    public const CODIGO_PAIS_VCT = 'VCT';
    public const CODIGO_PAIS_SYC = 'SYC';
    public const CODIGO_PAIS_SEN = 'SEN';
    public const CODIGO_PAIS_SLE = 'SLE';
    public const CODIGO_PAIS_SRB = 'SRB';
    public const CODIGO_PAIS_SGP = 'SGP';
    public const CODIGO_PAIS_SYR = 'SYR';
    public const CODIGO_PAIS_SOM = 'SOM';
    public const CODIGO_PAIS_LKA = 'LKA';
    public const CODIGO_PAIS_SDN = 'SDN';
    public const CODIGO_PAIS_SSD = 'SSD';
    public const CODIGO_PAIS_SWE = 'SWE';
    public const CODIGO_PAIS_CHE = 'CHE';
    public const CODIGO_PAIS_SUR = 'SUR';
    public const CODIGO_PAIS_THA = 'THA';
    public const CODIGO_PAIS_TWN = 'TWN';
    public const CODIGO_PAIS_TJK = 'TJK';
    public const CODIGO_PAIS_TZA = 'TZA';
    public const CODIGO_PAIS_TLS = 'TLS';
    public const CODIGO_PAIS_TGO = 'TGO';
    public const CODIGO_PAIS_TON = 'TON';
    public const CODIGO_PAIS_TTO = 'TTO';
    public const CODIGO_PAIS_TUN = 'TUN';
    public const CODIGO_PAIS_TKM = 'TKM';
    public const CODIGO_PAIS_TUR = 'TUR';
    public const CODIGO_PAIS_TUV = 'TUV';
    public const CODIGO_PAIS_UKR = 'UKR';
    public const CODIGO_PAIS_UGA = 'UGA';
    public const CODIGO_PAIS_URY = 'URY';
    public const CODIGO_PAIS_UZB = 'UZB';
    public const CODIGO_PAIS_VUT = 'VUT';
    public const CODIGO_PAIS_VAT = 'VAT';
    public const CODIGO_PAIS_VEN = 'VEN';
    public const CODIGO_PAIS_VNM = 'VNM';
    public const CODIGO_PAIS_ZMB = 'ZMB';
    public const CODIGO_PAIS_ZWE = 'ZWE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTipoPessoaIdAllowableValues()
    {
        return [
            self::TIPO_PESSOA_ID_PJ,
            self::TIPO_PESSOA_ID_PF,
            self::TIPO_PESSOA_ID_PE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPorteFornecedorIdAllowableValues()
    {
        return [
            self::PORTE_FORNECEDOR_ID__1,
            self::PORTE_FORNECEDOR_ID__2,
            self::PORTE_FORNECEDOR_ID__3,
            self::PORTE_FORNECEDOR_ID__4,
            self::PORTE_FORNECEDOR_ID__5,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodigoPaisAllowableValues()
    {
        return [
            self::CODIGO_PAIS_AFG,
            self::CODIGO_PAIS_ZAF,
            self::CODIGO_PAIS_ALB,
            self::CODIGO_PAIS_DEU,
            self::CODIGO_PAIS__AND,
            self::CODIGO_PAIS_AGO,
            self::CODIGO_PAIS_ATG,
            self::CODIGO_PAIS_SAU,
            self::CODIGO_PAIS_DZA,
            self::CODIGO_PAIS_ARG,
            self::CODIGO_PAIS_ARM,
            self::CODIGO_PAIS_AUS,
            self::CODIGO_PAIS_AUT,
            self::CODIGO_PAIS_AZE,
            self::CODIGO_PAIS_BHS,
            self::CODIGO_PAIS_BGD,
            self::CODIGO_PAIS_BRB,
            self::CODIGO_PAIS_BHR,
            self::CODIGO_PAIS_BEL,
            self::CODIGO_PAIS_BLZ,
            self::CODIGO_PAIS_BEN,
            self::CODIGO_PAIS_BLR,
            self::CODIGO_PAIS_BOL,
            self::CODIGO_PAIS_BIH,
            self::CODIGO_PAIS_BWA,
            self::CODIGO_PAIS_BRA,
            self::CODIGO_PAIS_BRN,
            self::CODIGO_PAIS_BGR,
            self::CODIGO_PAIS_BFA,
            self::CODIGO_PAIS_BDI,
            self::CODIGO_PAIS_BTN,
            self::CODIGO_PAIS_CPV,
            self::CODIGO_PAIS_CMR,
            self::CODIGO_PAIS_KHM,
            self::CODIGO_PAIS_CAN,
            self::CODIGO_PAIS_QAT,
            self::CODIGO_PAIS_KAZ,
            self::CODIGO_PAIS_TCD,
            self::CODIGO_PAIS_CHL,
            self::CODIGO_PAIS_CHN,
            self::CODIGO_PAIS_CYP,
            self::CODIGO_PAIS_COL,
            self::CODIGO_PAIS_COM,
            self::CODIGO_PAIS_COG,
            self::CODIGO_PAIS_PRK,
            self::CODIGO_PAIS_KOR,
            self::CODIGO_PAIS_CIV,
            self::CODIGO_PAIS_CRI,
            self::CODIGO_PAIS_HRV,
            self::CODIGO_PAIS_KWT,
            self::CODIGO_PAIS_CUB,
            self::CODIGO_PAIS_DNK,
            self::CODIGO_PAIS_DMA,
            self::CODIGO_PAIS_EGY,
            self::CODIGO_PAIS_ARE,
            self::CODIGO_PAIS_ECU,
            self::CODIGO_PAIS_ERI,
            self::CODIGO_PAIS_SVK,
            self::CODIGO_PAIS_SVN,
            self::CODIGO_PAIS_ESP,
            self::CODIGO_PAIS_SWZ,
            self::CODIGO_PAIS_PSE,
            self::CODIGO_PAIS_USA,
            self::CODIGO_PAIS_EST,
            self::CODIGO_PAIS_ETH,
            self::CODIGO_PAIS_FJI,
            self::CODIGO_PAIS_PHL,
            self::CODIGO_PAIS_FIN,
            self::CODIGO_PAIS_FRA,
            self::CODIGO_PAIS_GAB,
            self::CODIGO_PAIS_GMB,
            self::CODIGO_PAIS_GHA,
            self::CODIGO_PAIS_GEO,
            self::CODIGO_PAIS_GRD,
            self::CODIGO_PAIS_GRC,
            self::CODIGO_PAIS_GTM,
            self::CODIGO_PAIS_GUY,
            self::CODIGO_PAIS_GIN,
            self::CODIGO_PAIS_GNQ,
            self::CODIGO_PAIS_GNB,
            self::CODIGO_PAIS_HTI,
            self::CODIGO_PAIS_HND,
            self::CODIGO_PAIS_HUN,
            self::CODIGO_PAIS_YEM,
            self::CODIGO_PAIS_MHL,
            self::CODIGO_PAIS_IND,
            self::CODIGO_PAIS_IDN,
            self::CODIGO_PAIS_IRN,
            self::CODIGO_PAIS_IRQ,
            self::CODIGO_PAIS_IRL,
            self::CODIGO_PAIS_ISL,
            self::CODIGO_PAIS_ISR,
            self::CODIGO_PAIS_ITA,
            self::CODIGO_PAIS_JAM,
            self::CODIGO_PAIS_JPN,
            self::CODIGO_PAIS_DJI,
            self::CODIGO_PAIS_JOR,
            self::CODIGO_PAIS_LAO,
            self::CODIGO_PAIS_LSO,
            self::CODIGO_PAIS_LVA,
            self::CODIGO_PAIS_LBN,
            self::CODIGO_PAIS_LBR,
            self::CODIGO_PAIS_LBY,
            self::CODIGO_PAIS_LIE,
            self::CODIGO_PAIS_LTU,
            self::CODIGO_PAIS_LUX,
            self::CODIGO_PAIS_MKD,
            self::CODIGO_PAIS_MDG,
            self::CODIGO_PAIS_MYS,
            self::CODIGO_PAIS_MWI,
            self::CODIGO_PAIS_MDV,
            self::CODIGO_PAIS_MLI,
            self::CODIGO_PAIS_MLT,
            self::CODIGO_PAIS_MAR,
            self::CODIGO_PAIS_MUS,
            self::CODIGO_PAIS_MRT,
            self::CODIGO_PAIS_MEX,
            self::CODIGO_PAIS_MMR,
            self::CODIGO_PAIS_FSM,
            self::CODIGO_PAIS_MOZ,
            self::CODIGO_PAIS_MDA,
            self::CODIGO_PAIS_MCO,
            self::CODIGO_PAIS_MNG,
            self::CODIGO_PAIS_MNE,
            self::CODIGO_PAIS_NAM,
            self::CODIGO_PAIS_NRU,
            self::CODIGO_PAIS_NPL,
            self::CODIGO_PAIS_NIC,
            self::CODIGO_PAIS_NER,
            self::CODIGO_PAIS_NGA,
            self::CODIGO_PAIS_NOR,
            self::CODIGO_PAIS_NZL,
            self::CODIGO_PAIS_OMN,
            self::CODIGO_PAIS_NLD,
            self::CODIGO_PAIS_PLW,
            self::CODIGO_PAIS_PAN,
            self::CODIGO_PAIS_PNG,
            self::CODIGO_PAIS_PAK,
            self::CODIGO_PAIS_PRY,
            self::CODIGO_PAIS_PER,
            self::CODIGO_PAIS_POL,
            self::CODIGO_PAIS_PRT,
            self::CODIGO_PAIS_KEN,
            self::CODIGO_PAIS_KGZ,
            self::CODIGO_PAIS_KIR,
            self::CODIGO_PAIS_GBR,
            self::CODIGO_PAIS_CAF,
            self::CODIGO_PAIS_CZE,
            self::CODIGO_PAIS_COD,
            self::CODIGO_PAIS_DOM,
            self::CODIGO_PAIS_ROU,
            self::CODIGO_PAIS_RWA,
            self::CODIGO_PAIS_RUS,
            self::CODIGO_PAIS_SLB,
            self::CODIGO_PAIS_SLV,
            self::CODIGO_PAIS_WSM,
            self::CODIGO_PAIS_LCA,
            self::CODIGO_PAIS_KNA,
            self::CODIGO_PAIS_SMR,
            self::CODIGO_PAIS_STP,
            self::CODIGO_PAIS_VCT,
            self::CODIGO_PAIS_SYC,
            self::CODIGO_PAIS_SEN,
            self::CODIGO_PAIS_SLE,
            self::CODIGO_PAIS_SRB,
            self::CODIGO_PAIS_SGP,
            self::CODIGO_PAIS_SYR,
            self::CODIGO_PAIS_SOM,
            self::CODIGO_PAIS_LKA,
            self::CODIGO_PAIS_SDN,
            self::CODIGO_PAIS_SSD,
            self::CODIGO_PAIS_SWE,
            self::CODIGO_PAIS_CHE,
            self::CODIGO_PAIS_SUR,
            self::CODIGO_PAIS_THA,
            self::CODIGO_PAIS_TWN,
            self::CODIGO_PAIS_TJK,
            self::CODIGO_PAIS_TZA,
            self::CODIGO_PAIS_TLS,
            self::CODIGO_PAIS_TGO,
            self::CODIGO_PAIS_TON,
            self::CODIGO_PAIS_TTO,
            self::CODIGO_PAIS_TUN,
            self::CODIGO_PAIS_TKM,
            self::CODIGO_PAIS_TUR,
            self::CODIGO_PAIS_TUV,
            self::CODIGO_PAIS_UKR,
            self::CODIGO_PAIS_UGA,
            self::CODIGO_PAIS_URY,
            self::CODIGO_PAIS_UZB,
            self::CODIGO_PAIS_VUT,
            self::CODIGO_PAIS_VAT,
            self::CODIGO_PAIS_VEN,
            self::CODIGO_PAIS_VNM,
            self::CODIGO_PAIS_ZMB,
            self::CODIGO_PAIS_ZWE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('quantidade_homologada', $data ?? [], null);
        $this->setIfExists('valor_unitario_homologado', $data ?? [], null);
        $this->setIfExists('valor_total_homologado', $data ?? [], null);
        $this->setIfExists('percentual_desconto', $data ?? [], null);
        $this->setIfExists('tipo_pessoa_id', $data ?? [], null);
        $this->setIfExists('ni_fornecedor', $data ?? [], null);
        $this->setIfExists('nome_razao_social_fornecedor', $data ?? [], null);
        $this->setIfExists('porte_fornecedor_id', $data ?? [], null);
        $this->setIfExists('codigo_pais', $data ?? [], null);
        $this->setIfExists('indicador_subcontratacao', $data ?? [], null);
        $this->setIfExists('ordem_classificacao_srp', $data ?? [], null);
        $this->setIfExists('data_resultado', $data ?? [], null);
        $this->setIfExists('natureza_juridica_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['quantidade_homologada'] === null) {
            $invalidProperties[] = "'quantidade_homologada' can't be null";
        }
        if (($this->container['quantidade_homologada'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'quantidade_homologada', must be bigger than or equal to 0.0.";
        }

        if ($this->container['valor_unitario_homologado'] === null) {
            $invalidProperties[] = "'valor_unitario_homologado' can't be null";
        }
        if (($this->container['valor_unitario_homologado'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'valor_unitario_homologado', must be bigger than or equal to 0.0.";
        }

        if ($this->container['valor_total_homologado'] === null) {
            $invalidProperties[] = "'valor_total_homologado' can't be null";
        }
        if (($this->container['valor_total_homologado'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'valor_total_homologado', must be bigger than or equal to 0.0.";
        }

        if ($this->container['percentual_desconto'] === null) {
            $invalidProperties[] = "'percentual_desconto' can't be null";
        }
        if (($this->container['percentual_desconto'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'percentual_desconto', must be bigger than or equal to 0.0.";
        }

        if ($this->container['tipo_pessoa_id'] === null) {
            $invalidProperties[] = "'tipo_pessoa_id' can't be null";
        }
        $allowedValues = $this->getTipoPessoaIdAllowableValues();
        if (!is_null($this->container['tipo_pessoa_id']) && !in_array($this->container['tipo_pessoa_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tipo_pessoa_id', must be one of '%s'",
                $this->container['tipo_pessoa_id'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['ni_fornecedor'] === null) {
            $invalidProperties[] = "'ni_fornecedor' can't be null";
        }
        if ($this->container['nome_razao_social_fornecedor'] === null) {
            $invalidProperties[] = "'nome_razao_social_fornecedor' can't be null";
        }
        if ($this->container['porte_fornecedor_id'] === null) {
            $invalidProperties[] = "'porte_fornecedor_id' can't be null";
        }
        $allowedValues = $this->getPorteFornecedorIdAllowableValues();
        if (!is_null($this->container['porte_fornecedor_id']) && !in_array($this->container['porte_fornecedor_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'porte_fornecedor_id', must be one of '%s'",
                $this->container['porte_fornecedor_id'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['codigo_pais'] === null) {
            $invalidProperties[] = "'codigo_pais' can't be null";
        }
        $allowedValues = $this->getCodigoPaisAllowableValues();
        if (!is_null($this->container['codigo_pais']) && !in_array($this->container['codigo_pais'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'codigo_pais', must be one of '%s'",
                $this->container['codigo_pais'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['indicador_subcontratacao'] === null) {
            $invalidProperties[] = "'indicador_subcontratacao' can't be null";
        }
        if (!is_null($this->container['ordem_classificacao_srp']) && ($this->container['ordem_classificacao_srp'] < 1)) {
            $invalidProperties[] = "invalid value for 'ordem_classificacao_srp', must be bigger than or equal to 1.";
        }

        if ($this->container['data_resultado'] === null) {
            $invalidProperties[] = "'data_resultado' can't be null";
        }
        if (!is_null($this->container['natureza_juridica_id']) && !preg_match("/\\d{4}/", $this->container['natureza_juridica_id'])) {
            $invalidProperties[] = "invalid value for 'natureza_juridica_id', must be conform to the pattern /\\d{4}/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets quantidade_homologada
     *
     * @return float
     */
    public function getQuantidadeHomologada()
    {
        return $this->container['quantidade_homologada'];
    }

    /**
     * Sets quantidade_homologada
     *
     * @param float $quantidade_homologada quantidade_homologada
     *
     * @return self
     */
    public function setQuantidadeHomologada($quantidade_homologada)
    {
        if (is_null($quantidade_homologada)) {
            throw new \InvalidArgumentException('non-nullable quantidade_homologada cannot be null');
        }

        if (($quantidade_homologada < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $quantidade_homologada when calling IncluirCompraItemResultadoDTO., must be bigger than or equal to 0.0.');
        }

        $this->container['quantidade_homologada'] = $quantidade_homologada;

        return $this;
    }

    /**
     * Gets valor_unitario_homologado
     *
     * @return float
     */
    public function getValorUnitarioHomologado()
    {
        return $this->container['valor_unitario_homologado'];
    }

    /**
     * Sets valor_unitario_homologado
     *
     * @param float $valor_unitario_homologado valor_unitario_homologado
     *
     * @return self
     */
    public function setValorUnitarioHomologado($valor_unitario_homologado)
    {
        if (is_null($valor_unitario_homologado)) {
            throw new \InvalidArgumentException('non-nullable valor_unitario_homologado cannot be null');
        }

        if (($valor_unitario_homologado < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $valor_unitario_homologado when calling IncluirCompraItemResultadoDTO., must be bigger than or equal to 0.0.');
        }

        $this->container['valor_unitario_homologado'] = $valor_unitario_homologado;

        return $this;
    }

    /**
     * Gets valor_total_homologado
     *
     * @return float
     */
    public function getValorTotalHomologado()
    {
        return $this->container['valor_total_homologado'];
    }

    /**
     * Sets valor_total_homologado
     *
     * @param float $valor_total_homologado valor_total_homologado
     *
     * @return self
     */
    public function setValorTotalHomologado($valor_total_homologado)
    {
        if (is_null($valor_total_homologado)) {
            throw new \InvalidArgumentException('non-nullable valor_total_homologado cannot be null');
        }

        if (($valor_total_homologado < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $valor_total_homologado when calling IncluirCompraItemResultadoDTO., must be bigger than or equal to 0.0.');
        }

        $this->container['valor_total_homologado'] = $valor_total_homologado;

        return $this;
    }

    /**
     * Gets percentual_desconto
     *
     * @return float
     */
    public function getPercentualDesconto()
    {
        return $this->container['percentual_desconto'];
    }

    /**
     * Sets percentual_desconto
     *
     * @param float $percentual_desconto percentual_desconto
     *
     * @return self
     */
    public function setPercentualDesconto($percentual_desconto)
    {
        if (is_null($percentual_desconto)) {
            throw new \InvalidArgumentException('non-nullable percentual_desconto cannot be null');
        }

        if (($percentual_desconto < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $percentual_desconto when calling IncluirCompraItemResultadoDTO., must be bigger than or equal to 0.0.');
        }

        $this->container['percentual_desconto'] = $percentual_desconto;

        return $this;
    }

    /**
     * Gets tipo_pessoa_id
     *
     * @return string
     */
    public function getTipoPessoaId()
    {
        return $this->container['tipo_pessoa_id'];
    }

    /**
     * Sets tipo_pessoa_id
     *
     * @param string $tipo_pessoa_id tipo_pessoa_id
     *
     * @return self
     */
    public function setTipoPessoaId($tipo_pessoa_id)
    {
        if (is_null($tipo_pessoa_id)) {
            throw new \InvalidArgumentException('non-nullable tipo_pessoa_id cannot be null');
        }
        $allowedValues = $this->getTipoPessoaIdAllowableValues();
        if (!in_array($tipo_pessoa_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tipo_pessoa_id', must be one of '%s'",
                    $tipo_pessoa_id,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tipo_pessoa_id'] = $tipo_pessoa_id;

        return $this;
    }

    /**
     * Gets ni_fornecedor
     *
     * @return string
     */
    public function getNiFornecedor()
    {
        return $this->container['ni_fornecedor'];
    }

    /**
     * Sets ni_fornecedor
     *
     * @param string $ni_fornecedor ni_fornecedor
     *
     * @return self
     */
    public function setNiFornecedor($ni_fornecedor)
    {
        if (is_null($ni_fornecedor)) {
            throw new \InvalidArgumentException('non-nullable ni_fornecedor cannot be null');
        }
        $this->container['ni_fornecedor'] = $ni_fornecedor;

        return $this;
    }

    /**
     * Gets nome_razao_social_fornecedor
     *
     * @return string
     */
    public function getNomeRazaoSocialFornecedor()
    {
        return $this->container['nome_razao_social_fornecedor'];
    }

    /**
     * Sets nome_razao_social_fornecedor
     *
     * @param string $nome_razao_social_fornecedor nome_razao_social_fornecedor
     *
     * @return self
     */
    public function setNomeRazaoSocialFornecedor($nome_razao_social_fornecedor)
    {
        if (is_null($nome_razao_social_fornecedor)) {
            throw new \InvalidArgumentException('non-nullable nome_razao_social_fornecedor cannot be null');
        }
        $this->container['nome_razao_social_fornecedor'] = $nome_razao_social_fornecedor;

        return $this;
    }

    /**
     * Gets porte_fornecedor_id
     *
     * @return string
     */
    public function getPorteFornecedorId()
    {
        return $this->container['porte_fornecedor_id'];
    }

    /**
     * Sets porte_fornecedor_id
     *
     * @param string $porte_fornecedor_id porte_fornecedor_id
     *
     * @return self
     */
    public function setPorteFornecedorId($porte_fornecedor_id)
    {
        if (is_null($porte_fornecedor_id)) {
            throw new \InvalidArgumentException('non-nullable porte_fornecedor_id cannot be null');
        }
        $allowedValues = $this->getPorteFornecedorIdAllowableValues();
        if (!in_array($porte_fornecedor_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'porte_fornecedor_id', must be one of '%s'",
                    $porte_fornecedor_id,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['porte_fornecedor_id'] = $porte_fornecedor_id;

        return $this;
    }

    /**
     * Gets codigo_pais
     *
     * @return string
     */
    public function getCodigoPais()
    {
        return $this->container['codigo_pais'];
    }

    /**
     * Sets codigo_pais
     *
     * @param string $codigo_pais codigo_pais
     *
     * @return self
     */
    public function setCodigoPais($codigo_pais)
    {
        if (is_null($codigo_pais)) {
            throw new \InvalidArgumentException('non-nullable codigo_pais cannot be null');
        }
        $allowedValues = $this->getCodigoPaisAllowableValues();
        if (!in_array($codigo_pais, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'codigo_pais', must be one of '%s'",
                    $codigo_pais,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['codigo_pais'] = $codigo_pais;

        return $this;
    }

    /**
     * Gets indicador_subcontratacao
     *
     * @return bool
     */
    public function getIndicadorSubcontratacao()
    {
        return $this->container['indicador_subcontratacao'];
    }

    /**
     * Sets indicador_subcontratacao
     *
     * @param bool $indicador_subcontratacao indicador_subcontratacao
     *
     * @return self
     */
    public function setIndicadorSubcontratacao($indicador_subcontratacao)
    {
        if (is_null($indicador_subcontratacao)) {
            throw new \InvalidArgumentException('non-nullable indicador_subcontratacao cannot be null');
        }
        $this->container['indicador_subcontratacao'] = $indicador_subcontratacao;

        return $this;
    }

    /**
     * Gets ordem_classificacao_srp
     *
     * @return int|null
     */
    public function getOrdemClassificacaoSrp()
    {
        return $this->container['ordem_classificacao_srp'];
    }

    /**
     * Sets ordem_classificacao_srp
     *
     * @param int|null $ordem_classificacao_srp ordem_classificacao_srp
     *
     * @return self
     */
    public function setOrdemClassificacaoSrp($ordem_classificacao_srp)
    {
        if (is_null($ordem_classificacao_srp)) {
            throw new \InvalidArgumentException('non-nullable ordem_classificacao_srp cannot be null');
        }

        if (($ordem_classificacao_srp < 1)) {
            throw new \InvalidArgumentException('invalid value for $ordem_classificacao_srp when calling IncluirCompraItemResultadoDTO., must be bigger than or equal to 1.');
        }

        $this->container['ordem_classificacao_srp'] = $ordem_classificacao_srp;

        return $this;
    }

    /**
     * Gets data_resultado
     *
     * @return \DateTime
     */
    public function getDataResultado()
    {
        return $this->container['data_resultado'];
    }

    /**
     * Sets data_resultado
     *
     * @param \DateTime $data_resultado data_resultado
     *
     * @return self
     */
    public function setDataResultado($data_resultado)
    {
        if (is_null($data_resultado)) {
            throw new \InvalidArgumentException('non-nullable data_resultado cannot be null');
        }
        $this->container['data_resultado'] = $data_resultado;

        return $this;
    }

    /**
     * Gets natureza_juridica_id
     *
     * @return string|null
     */
    public function getNaturezaJuridicaId()
    {
        return $this->container['natureza_juridica_id'];
    }

    /**
     * Sets natureza_juridica_id
     *
     * @param string|null $natureza_juridica_id natureza_juridica_id
     *
     * @return self
     */
    public function setNaturezaJuridicaId($natureza_juridica_id)
    {
        if (is_null($natureza_juridica_id)) {
            throw new \InvalidArgumentException('non-nullable natureza_juridica_id cannot be null');
        }

        if ((!preg_match("/\\d{4}/", ObjectSerializer::toString($natureza_juridica_id)))) {
            throw new \InvalidArgumentException("invalid value for \$natureza_juridica_id when calling IncluirCompraItemResultadoDTO., must conform to the pattern /\\d{4}/.");
        }

        $this->container['natureza_juridica_id'] = $natureza_juridica_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


