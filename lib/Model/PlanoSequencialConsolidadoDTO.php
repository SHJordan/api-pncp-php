<?php
/**
 * PlanoSequencialConsolidadoDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API PNCP
 *
 * API REST de serviços do Portal Nacional de Contratações Públicas (PNCP)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: css.serpro@serpro.gov.br
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PlanoSequencialConsolidadoDTO Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PlanoSequencialConsolidadoDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PlanoSequencialConsolidadoDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'valor_total' => 'float',
        'quantidade' => 'float',
        'data_atualizacao' => '\DateTime',
        'data_publicacao_pncp' => '\DateTime',
        'codigo_unidade' => 'string',
        'nome_unidade' => 'string',
        'ano_pca' => 'int',
        'cnpj' => 'string',
        'numero_controle_pncp' => 'string',
        'usuario' => 'string',
        'sequencial_pca' => 'int',
        'municipio' => 'string',
        'uf' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'valor_total' => null,
        'quantidade' => null,
        'data_atualizacao' => 'date-time',
        'data_publicacao_pncp' => 'date-time',
        'codigo_unidade' => null,
        'nome_unidade' => null,
        'ano_pca' => 'int32',
        'cnpj' => null,
        'numero_controle_pncp' => null,
        'usuario' => null,
        'sequencial_pca' => 'int32',
        'municipio' => null,
        'uf' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'valor_total' => false,
		'quantidade' => false,
		'data_atualizacao' => false,
		'data_publicacao_pncp' => false,
		'codigo_unidade' => false,
		'nome_unidade' => false,
		'ano_pca' => false,
		'cnpj' => false,
		'numero_controle_pncp' => false,
		'usuario' => false,
		'sequencial_pca' => false,
		'municipio' => false,
		'uf' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'valor_total' => 'valorTotal',
        'quantidade' => 'quantidade',
        'data_atualizacao' => 'dataAtualizacao',
        'data_publicacao_pncp' => 'dataPublicacaoPncp',
        'codigo_unidade' => 'codigoUnidade',
        'nome_unidade' => 'nomeUnidade',
        'ano_pca' => 'anoPca',
        'cnpj' => 'cnpj',
        'numero_controle_pncp' => 'numeroControlePNCP',
        'usuario' => 'usuario',
        'sequencial_pca' => 'sequencialPca',
        'municipio' => 'municipio',
        'uf' => 'uf'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'valor_total' => 'setValorTotal',
        'quantidade' => 'setQuantidade',
        'data_atualizacao' => 'setDataAtualizacao',
        'data_publicacao_pncp' => 'setDataPublicacaoPncp',
        'codigo_unidade' => 'setCodigoUnidade',
        'nome_unidade' => 'setNomeUnidade',
        'ano_pca' => 'setAnoPca',
        'cnpj' => 'setCnpj',
        'numero_controle_pncp' => 'setNumeroControlePncp',
        'usuario' => 'setUsuario',
        'sequencial_pca' => 'setSequencialPca',
        'municipio' => 'setMunicipio',
        'uf' => 'setUf'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'valor_total' => 'getValorTotal',
        'quantidade' => 'getQuantidade',
        'data_atualizacao' => 'getDataAtualizacao',
        'data_publicacao_pncp' => 'getDataPublicacaoPncp',
        'codigo_unidade' => 'getCodigoUnidade',
        'nome_unidade' => 'getNomeUnidade',
        'ano_pca' => 'getAnoPca',
        'cnpj' => 'getCnpj',
        'numero_controle_pncp' => 'getNumeroControlePncp',
        'usuario' => 'getUsuario',
        'sequencial_pca' => 'getSequencialPca',
        'municipio' => 'getMunicipio',
        'uf' => 'getUf'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('valor_total', $data ?? [], null);
        $this->setIfExists('quantidade', $data ?? [], null);
        $this->setIfExists('data_atualizacao', $data ?? [], null);
        $this->setIfExists('data_publicacao_pncp', $data ?? [], null);
        $this->setIfExists('codigo_unidade', $data ?? [], null);
        $this->setIfExists('nome_unidade', $data ?? [], null);
        $this->setIfExists('ano_pca', $data ?? [], null);
        $this->setIfExists('cnpj', $data ?? [], null);
        $this->setIfExists('numero_controle_pncp', $data ?? [], null);
        $this->setIfExists('usuario', $data ?? [], null);
        $this->setIfExists('sequencial_pca', $data ?? [], null);
        $this->setIfExists('municipio', $data ?? [], null);
        $this->setIfExists('uf', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets valor_total
     *
     * @return float|null
     */
    public function getValorTotal()
    {
        return $this->container['valor_total'];
    }

    /**
     * Sets valor_total
     *
     * @param float|null $valor_total valor_total
     *
     * @return self
     */
    public function setValorTotal($valor_total)
    {
        if (is_null($valor_total)) {
            throw new \InvalidArgumentException('non-nullable valor_total cannot be null');
        }
        $this->container['valor_total'] = $valor_total;

        return $this;
    }

    /**
     * Gets quantidade
     *
     * @return float|null
     */
    public function getQuantidade()
    {
        return $this->container['quantidade'];
    }

    /**
     * Sets quantidade
     *
     * @param float|null $quantidade quantidade
     *
     * @return self
     */
    public function setQuantidade($quantidade)
    {
        if (is_null($quantidade)) {
            throw new \InvalidArgumentException('non-nullable quantidade cannot be null');
        }
        $this->container['quantidade'] = $quantidade;

        return $this;
    }

    /**
     * Gets data_atualizacao
     *
     * @return \DateTime|null
     */
    public function getDataAtualizacao()
    {
        return $this->container['data_atualizacao'];
    }

    /**
     * Sets data_atualizacao
     *
     * @param \DateTime|null $data_atualizacao data_atualizacao
     *
     * @return self
     */
    public function setDataAtualizacao($data_atualizacao)
    {
        if (is_null($data_atualizacao)) {
            throw new \InvalidArgumentException('non-nullable data_atualizacao cannot be null');
        }
        $this->container['data_atualizacao'] = $data_atualizacao;

        return $this;
    }

    /**
     * Gets data_publicacao_pncp
     *
     * @return \DateTime|null
     */
    public function getDataPublicacaoPncp()
    {
        return $this->container['data_publicacao_pncp'];
    }

    /**
     * Sets data_publicacao_pncp
     *
     * @param \DateTime|null $data_publicacao_pncp data_publicacao_pncp
     *
     * @return self
     */
    public function setDataPublicacaoPncp($data_publicacao_pncp)
    {
        if (is_null($data_publicacao_pncp)) {
            throw new \InvalidArgumentException('non-nullable data_publicacao_pncp cannot be null');
        }
        $this->container['data_publicacao_pncp'] = $data_publicacao_pncp;

        return $this;
    }

    /**
     * Gets codigo_unidade
     *
     * @return string|null
     */
    public function getCodigoUnidade()
    {
        return $this->container['codigo_unidade'];
    }

    /**
     * Sets codigo_unidade
     *
     * @param string|null $codigo_unidade codigo_unidade
     *
     * @return self
     */
    public function setCodigoUnidade($codigo_unidade)
    {
        if (is_null($codigo_unidade)) {
            throw new \InvalidArgumentException('non-nullable codigo_unidade cannot be null');
        }
        $this->container['codigo_unidade'] = $codigo_unidade;

        return $this;
    }

    /**
     * Gets nome_unidade
     *
     * @return string|null
     */
    public function getNomeUnidade()
    {
        return $this->container['nome_unidade'];
    }

    /**
     * Sets nome_unidade
     *
     * @param string|null $nome_unidade nome_unidade
     *
     * @return self
     */
    public function setNomeUnidade($nome_unidade)
    {
        if (is_null($nome_unidade)) {
            throw new \InvalidArgumentException('non-nullable nome_unidade cannot be null');
        }
        $this->container['nome_unidade'] = $nome_unidade;

        return $this;
    }

    /**
     * Gets ano_pca
     *
     * @return int|null
     */
    public function getAnoPca()
    {
        return $this->container['ano_pca'];
    }

    /**
     * Sets ano_pca
     *
     * @param int|null $ano_pca ano_pca
     *
     * @return self
     */
    public function setAnoPca($ano_pca)
    {
        if (is_null($ano_pca)) {
            throw new \InvalidArgumentException('non-nullable ano_pca cannot be null');
        }
        $this->container['ano_pca'] = $ano_pca;

        return $this;
    }

    /**
     * Gets cnpj
     *
     * @return string|null
     */
    public function getCnpj()
    {
        return $this->container['cnpj'];
    }

    /**
     * Sets cnpj
     *
     * @param string|null $cnpj cnpj
     *
     * @return self
     */
    public function setCnpj($cnpj)
    {
        if (is_null($cnpj)) {
            throw new \InvalidArgumentException('non-nullable cnpj cannot be null');
        }
        $this->container['cnpj'] = $cnpj;

        return $this;
    }

    /**
     * Gets numero_controle_pncp
     *
     * @return string|null
     */
    public function getNumeroControlePncp()
    {
        return $this->container['numero_controle_pncp'];
    }

    /**
     * Sets numero_controle_pncp
     *
     * @param string|null $numero_controle_pncp numero_controle_pncp
     *
     * @return self
     */
    public function setNumeroControlePncp($numero_controle_pncp)
    {
        if (is_null($numero_controle_pncp)) {
            throw new \InvalidArgumentException('non-nullable numero_controle_pncp cannot be null');
        }
        $this->container['numero_controle_pncp'] = $numero_controle_pncp;

        return $this;
    }

    /**
     * Gets usuario
     *
     * @return string|null
     */
    public function getUsuario()
    {
        return $this->container['usuario'];
    }

    /**
     * Sets usuario
     *
     * @param string|null $usuario usuario
     *
     * @return self
     */
    public function setUsuario($usuario)
    {
        if (is_null($usuario)) {
            throw new \InvalidArgumentException('non-nullable usuario cannot be null');
        }
        $this->container['usuario'] = $usuario;

        return $this;
    }

    /**
     * Gets sequencial_pca
     *
     * @return int|null
     */
    public function getSequencialPca()
    {
        return $this->container['sequencial_pca'];
    }

    /**
     * Sets sequencial_pca
     *
     * @param int|null $sequencial_pca sequencial_pca
     *
     * @return self
     */
    public function setSequencialPca($sequencial_pca)
    {
        if (is_null($sequencial_pca)) {
            throw new \InvalidArgumentException('non-nullable sequencial_pca cannot be null');
        }
        $this->container['sequencial_pca'] = $sequencial_pca;

        return $this;
    }

    /**
     * Gets municipio
     *
     * @return string|null
     */
    public function getMunicipio()
    {
        return $this->container['municipio'];
    }

    /**
     * Sets municipio
     *
     * @param string|null $municipio municipio
     *
     * @return self
     */
    public function setMunicipio($municipio)
    {
        if (is_null($municipio)) {
            throw new \InvalidArgumentException('non-nullable municipio cannot be null');
        }
        $this->container['municipio'] = $municipio;

        return $this;
    }

    /**
     * Gets uf
     *
     * @return string|null
     */
    public function getUf()
    {
        return $this->container['uf'];
    }

    /**
     * Sets uf
     *
     * @param string|null $uf uf
     *
     * @return self
     */
    public function setUf($uf)
    {
        if (is_null($uf)) {
            throw new \InvalidArgumentException('non-nullable uf cannot be null');
        }
        $this->container['uf'] = $uf;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


